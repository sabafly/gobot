// Code generated by ent, DO NOT EDIT.

package member

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/sabafly/gobot/ent/predicate"
	"github.com/sabafly/gobot/internal/xppoint"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldID, id))
}

// Xp applies equality check predicate on the "xp" field. It's identical to XpEQ.
func Xp(v xppoint.XP) predicate.Member {
	vc := uint64(v)
	return predicate.Member(sql.FieldEQ(FieldXp, vc))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v snowflake.ID) predicate.Member {
	vc := uint64(v)
	return predicate.Member(sql.FieldEQ(FieldUserID, vc))
}

// LastXp applies equality check predicate on the "last_xp" field. It's identical to LastXpEQ.
func LastXp(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldLastXp, v))
}

// MessageCount applies equality check predicate on the "message_count" field. It's identical to MessageCountEQ.
func MessageCount(v uint64) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldMessageCount, v))
}

// LastNotifiedLevel applies equality check predicate on the "last_notified_level" field. It's identical to LastNotifiedLevelEQ.
func LastNotifiedLevel(v uint64) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldLastNotifiedLevel, v))
}

// PermissionIsNil applies the IsNil predicate on the "permission" field.
func PermissionIsNil() predicate.Member {
	return predicate.Member(sql.FieldIsNull(FieldPermission))
}

// PermissionNotNil applies the NotNil predicate on the "permission" field.
func PermissionNotNil() predicate.Member {
	return predicate.Member(sql.FieldNotNull(FieldPermission))
}

// XpEQ applies the EQ predicate on the "xp" field.
func XpEQ(v xppoint.XP) predicate.Member {
	vc := uint64(v)
	return predicate.Member(sql.FieldEQ(FieldXp, vc))
}

// XpNEQ applies the NEQ predicate on the "xp" field.
func XpNEQ(v xppoint.XP) predicate.Member {
	vc := uint64(v)
	return predicate.Member(sql.FieldNEQ(FieldXp, vc))
}

// XpIn applies the In predicate on the "xp" field.
func XpIn(vs ...xppoint.XP) predicate.Member {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Member(sql.FieldIn(FieldXp, v...))
}

// XpNotIn applies the NotIn predicate on the "xp" field.
func XpNotIn(vs ...xppoint.XP) predicate.Member {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Member(sql.FieldNotIn(FieldXp, v...))
}

// XpGT applies the GT predicate on the "xp" field.
func XpGT(v xppoint.XP) predicate.Member {
	vc := uint64(v)
	return predicate.Member(sql.FieldGT(FieldXp, vc))
}

// XpGTE applies the GTE predicate on the "xp" field.
func XpGTE(v xppoint.XP) predicate.Member {
	vc := uint64(v)
	return predicate.Member(sql.FieldGTE(FieldXp, vc))
}

// XpLT applies the LT predicate on the "xp" field.
func XpLT(v xppoint.XP) predicate.Member {
	vc := uint64(v)
	return predicate.Member(sql.FieldLT(FieldXp, vc))
}

// XpLTE applies the LTE predicate on the "xp" field.
func XpLTE(v xppoint.XP) predicate.Member {
	vc := uint64(v)
	return predicate.Member(sql.FieldLTE(FieldXp, vc))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v snowflake.ID) predicate.Member {
	vc := uint64(v)
	return predicate.Member(sql.FieldEQ(FieldUserID, vc))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v snowflake.ID) predicate.Member {
	vc := uint64(v)
	return predicate.Member(sql.FieldNEQ(FieldUserID, vc))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...snowflake.ID) predicate.Member {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Member(sql.FieldIn(FieldUserID, v...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...snowflake.ID) predicate.Member {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Member(sql.FieldNotIn(FieldUserID, v...))
}

// LastXpEQ applies the EQ predicate on the "last_xp" field.
func LastXpEQ(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldLastXp, v))
}

// LastXpNEQ applies the NEQ predicate on the "last_xp" field.
func LastXpNEQ(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldLastXp, v))
}

// LastXpIn applies the In predicate on the "last_xp" field.
func LastXpIn(vs ...time.Time) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldLastXp, vs...))
}

// LastXpNotIn applies the NotIn predicate on the "last_xp" field.
func LastXpNotIn(vs ...time.Time) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldLastXp, vs...))
}

// LastXpGT applies the GT predicate on the "last_xp" field.
func LastXpGT(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldLastXp, v))
}

// LastXpGTE applies the GTE predicate on the "last_xp" field.
func LastXpGTE(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldLastXp, v))
}

// LastXpLT applies the LT predicate on the "last_xp" field.
func LastXpLT(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldLastXp, v))
}

// LastXpLTE applies the LTE predicate on the "last_xp" field.
func LastXpLTE(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldLastXp, v))
}

// LastXpIsNil applies the IsNil predicate on the "last_xp" field.
func LastXpIsNil() predicate.Member {
	return predicate.Member(sql.FieldIsNull(FieldLastXp))
}

// LastXpNotNil applies the NotNil predicate on the "last_xp" field.
func LastXpNotNil() predicate.Member {
	return predicate.Member(sql.FieldNotNull(FieldLastXp))
}

// MessageCountEQ applies the EQ predicate on the "message_count" field.
func MessageCountEQ(v uint64) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldMessageCount, v))
}

// MessageCountNEQ applies the NEQ predicate on the "message_count" field.
func MessageCountNEQ(v uint64) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldMessageCount, v))
}

// MessageCountIn applies the In predicate on the "message_count" field.
func MessageCountIn(vs ...uint64) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldMessageCount, vs...))
}

// MessageCountNotIn applies the NotIn predicate on the "message_count" field.
func MessageCountNotIn(vs ...uint64) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldMessageCount, vs...))
}

// MessageCountGT applies the GT predicate on the "message_count" field.
func MessageCountGT(v uint64) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldMessageCount, v))
}

// MessageCountGTE applies the GTE predicate on the "message_count" field.
func MessageCountGTE(v uint64) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldMessageCount, v))
}

// MessageCountLT applies the LT predicate on the "message_count" field.
func MessageCountLT(v uint64) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldMessageCount, v))
}

// MessageCountLTE applies the LTE predicate on the "message_count" field.
func MessageCountLTE(v uint64) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldMessageCount, v))
}

// LastNotifiedLevelEQ applies the EQ predicate on the "last_notified_level" field.
func LastNotifiedLevelEQ(v uint64) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldLastNotifiedLevel, v))
}

// LastNotifiedLevelNEQ applies the NEQ predicate on the "last_notified_level" field.
func LastNotifiedLevelNEQ(v uint64) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldLastNotifiedLevel, v))
}

// LastNotifiedLevelIn applies the In predicate on the "last_notified_level" field.
func LastNotifiedLevelIn(vs ...uint64) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldLastNotifiedLevel, vs...))
}

// LastNotifiedLevelNotIn applies the NotIn predicate on the "last_notified_level" field.
func LastNotifiedLevelNotIn(vs ...uint64) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldLastNotifiedLevel, vs...))
}

// LastNotifiedLevelGT applies the GT predicate on the "last_notified_level" field.
func LastNotifiedLevelGT(v uint64) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldLastNotifiedLevel, v))
}

// LastNotifiedLevelGTE applies the GTE predicate on the "last_notified_level" field.
func LastNotifiedLevelGTE(v uint64) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldLastNotifiedLevel, v))
}

// LastNotifiedLevelLT applies the LT predicate on the "last_notified_level" field.
func LastNotifiedLevelLT(v uint64) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldLastNotifiedLevel, v))
}

// LastNotifiedLevelLTE applies the LTE predicate on the "last_notified_level" field.
func LastNotifiedLevelLTE(v uint64) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldLastNotifiedLevel, v))
}

// LastNotifiedLevelIsNil applies the IsNil predicate on the "last_notified_level" field.
func LastNotifiedLevelIsNil() predicate.Member {
	return predicate.Member(sql.FieldIsNull(FieldLastNotifiedLevel))
}

// LastNotifiedLevelNotNil applies the NotNil predicate on the "last_notified_level" field.
func LastNotifiedLevelNotNil() predicate.Member {
	return predicate.Member(sql.FieldNotNull(FieldLastNotifiedLevel))
}

// HasGuild applies the HasEdge predicate on the "guild" edge.
func HasGuild() predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GuildTable, GuildColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGuildWith applies the HasEdge predicate on the "guild" edge with a given conditions (other predicates).
func HasGuildWith(preds ...predicate.Guild) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		step := newGuildStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Member {
	return predicate.Member(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Member) predicate.Member {
	return predicate.Member(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Member) predicate.Member {
	return predicate.Member(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Member) predicate.Member {
	return predicate.Member(sql.NotPredicates(p))
}
