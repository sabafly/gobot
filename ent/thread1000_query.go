// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/google/uuid"
	"github.com/sabafly/gobot/ent/guild"
	"github.com/sabafly/gobot/ent/predicate"
	"github.com/sabafly/gobot/ent/thread1000"
	"github.com/sabafly/gobot/ent/thread1000channel"
)

// Thread1000Query is the builder for querying Thread1000 entities.
type Thread1000Query struct {
	config
	ctx         *QueryContext
	order       []thread1000.OrderOption
	inters      []Interceptor
	predicates  []predicate.Thread1000
	withGuild   *GuildQuery
	withChannel *Thread1000ChannelQuery
	withFKs     bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the Thread1000Query builder.
func (t *Thread1000Query) Where(ps ...predicate.Thread1000) *Thread1000Query {
	t.predicates = append(t.predicates, ps...)
	return t
}

// Limit the number of records to be returned by this query.
func (t *Thread1000Query) Limit(limit int) *Thread1000Query {
	t.ctx.Limit = &limit
	return t
}

// Offset to start from.
func (t *Thread1000Query) Offset(offset int) *Thread1000Query {
	t.ctx.Offset = &offset
	return t
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (t *Thread1000Query) Unique(unique bool) *Thread1000Query {
	t.ctx.Unique = &unique
	return t
}

// Order specifies how the records should be ordered.
func (t *Thread1000Query) Order(o ...thread1000.OrderOption) *Thread1000Query {
	t.order = append(t.order, o...)
	return t
}

// QueryGuild chains the current query on the "guild" edge.
func (t *Thread1000Query) QueryGuild() *GuildQuery {
	query := (&GuildClient{config: t.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := t.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := t.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(thread1000.Table, thread1000.FieldID, selector),
			sqlgraph.To(guild.Table, guild.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, thread1000.GuildTable, thread1000.GuildColumn),
		)
		fromU = sqlgraph.SetNeighbors(t.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChannel chains the current query on the "channel" edge.
func (t *Thread1000Query) QueryChannel() *Thread1000ChannelQuery {
	query := (&Thread1000ChannelClient{config: t.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := t.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := t.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(thread1000.Table, thread1000.FieldID, selector),
			sqlgraph.To(thread1000channel.Table, thread1000channel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, thread1000.ChannelTable, thread1000.ChannelColumn),
		)
		fromU = sqlgraph.SetNeighbors(t.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Thread1000 entity from the query.
// Returns a *NotFoundError when no Thread1000 was found.
func (t *Thread1000Query) First(ctx context.Context) (*Thread1000, error) {
	nodes, err := t.Limit(1).All(setContextOp(ctx, t.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{thread1000.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (t *Thread1000Query) FirstX(ctx context.Context) *Thread1000 {
	node, err := t.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Thread1000 ID from the query.
// Returns a *NotFoundError when no Thread1000 ID was found.
func (t *Thread1000Query) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = t.Limit(1).IDs(setContextOp(ctx, t.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{thread1000.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (t *Thread1000Query) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := t.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Thread1000 entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Thread1000 entity is found.
// Returns a *NotFoundError when no Thread1000 entities are found.
func (t *Thread1000Query) Only(ctx context.Context) (*Thread1000, error) {
	nodes, err := t.Limit(2).All(setContextOp(ctx, t.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{thread1000.Label}
	default:
		return nil, &NotSingularError{thread1000.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (t *Thread1000Query) OnlyX(ctx context.Context) *Thread1000 {
	node, err := t.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Thread1000 ID in the query.
// Returns a *NotSingularError when more than one Thread1000 ID is found.
// Returns a *NotFoundError when no entities are found.
func (t *Thread1000Query) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = t.Limit(2).IDs(setContextOp(ctx, t.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{thread1000.Label}
	default:
		err = &NotSingularError{thread1000.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (t *Thread1000Query) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := t.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Thread1000s.
func (t *Thread1000Query) All(ctx context.Context) ([]*Thread1000, error) {
	ctx = setContextOp(ctx, t.ctx, "All")
	if err := t.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Thread1000, *Thread1000Query]()
	return withInterceptors[[]*Thread1000](ctx, t, qr, t.inters)
}

// AllX is like All, but panics if an error occurs.
func (t *Thread1000Query) AllX(ctx context.Context) []*Thread1000 {
	nodes, err := t.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Thread1000 IDs.
func (t *Thread1000Query) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if t.ctx.Unique == nil && t.path != nil {
		t.Unique(true)
	}
	ctx = setContextOp(ctx, t.ctx, "IDs")
	if err = t.Select(thread1000.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (t *Thread1000Query) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := t.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (t *Thread1000Query) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, t.ctx, "Count")
	if err := t.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, t, querierCount[*Thread1000Query](), t.inters)
}

// CountX is like Count, but panics if an error occurs.
func (t *Thread1000Query) CountX(ctx context.Context) int {
	count, err := t.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (t *Thread1000Query) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, t.ctx, "Exist")
	switch _, err := t.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (t *Thread1000Query) ExistX(ctx context.Context) bool {
	exist, err := t.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the Thread1000Query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (t *Thread1000Query) Clone() *Thread1000Query {
	if t == nil {
		return nil
	}
	return &Thread1000Query{
		config:      t.config,
		ctx:         t.ctx.Clone(),
		order:       append([]thread1000.OrderOption{}, t.order...),
		inters:      append([]Interceptor{}, t.inters...),
		predicates:  append([]predicate.Thread1000{}, t.predicates...),
		withGuild:   t.withGuild.Clone(),
		withChannel: t.withChannel.Clone(),
		// clone intermediate query.
		sql:  t.sql.Clone(),
		path: t.path,
	}
}

// WithGuild tells the query-builder to eager-load the nodes that are connected to
// the "guild" edge. The optional arguments are used to configure the query builder of the edge.
func (t *Thread1000Query) WithGuild(opts ...func(*GuildQuery)) *Thread1000Query {
	query := (&GuildClient{config: t.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	t.withGuild = query
	return t
}

// WithChannel tells the query-builder to eager-load the nodes that are connected to
// the "channel" edge. The optional arguments are used to configure the query builder of the edge.
func (t *Thread1000Query) WithChannel(opts ...func(*Thread1000ChannelQuery)) *Thread1000Query {
	query := (&Thread1000ChannelClient{config: t.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	t.withChannel = query
	return t
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Thread1000.Query().
//		GroupBy(thread1000.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (t *Thread1000Query) GroupBy(field string, fields ...string) *Thread1000GroupBy {
	t.ctx.Fields = append([]string{field}, fields...)
	grbuild := &Thread1000GroupBy{build: t}
	grbuild.flds = &t.ctx.Fields
	grbuild.label = thread1000.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.Thread1000.Query().
//		Select(thread1000.FieldName).
//		Scan(ctx, &v)
func (t *Thread1000Query) Select(fields ...string) *Thread1000Select {
	t.ctx.Fields = append(t.ctx.Fields, fields...)
	sbuild := &Thread1000Select{Thread1000Query: t}
	sbuild.label = thread1000.Label
	sbuild.flds, sbuild.scan = &t.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a Thread1000Select configured with the given aggregations.
func (t *Thread1000Query) Aggregate(fns ...AggregateFunc) *Thread1000Select {
	return t.Select().Aggregate(fns...)
}

func (t *Thread1000Query) prepareQuery(ctx context.Context) error {
	for _, inter := range t.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, t); err != nil {
				return err
			}
		}
	}
	for _, f := range t.ctx.Fields {
		if !thread1000.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if t.path != nil {
		prev, err := t.path(ctx)
		if err != nil {
			return err
		}
		t.sql = prev
	}
	return nil
}

func (t *Thread1000Query) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Thread1000, error) {
	var (
		nodes       = []*Thread1000{}
		withFKs     = t.withFKs
		_spec       = t.querySpec()
		loadedTypes = [2]bool{
			t.withGuild != nil,
			t.withChannel != nil,
		}
	)
	if t.withGuild != nil || t.withChannel != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, thread1000.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Thread1000).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Thread1000{config: t.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, t.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := t.withGuild; query != nil {
		if err := t.loadGuild(ctx, query, nodes, nil,
			func(n *Thread1000, e *Guild) { n.Edges.Guild = e }); err != nil {
			return nil, err
		}
	}
	if query := t.withChannel; query != nil {
		if err := t.loadChannel(ctx, query, nodes, nil,
			func(n *Thread1000, e *Thread1000Channel) { n.Edges.Channel = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (t *Thread1000Query) loadGuild(ctx context.Context, query *GuildQuery, nodes []*Thread1000, init func(*Thread1000), assign func(*Thread1000, *Guild)) error {
	ids := make([]snowflake.ID, 0, len(nodes))
	nodeids := make(map[snowflake.ID][]*Thread1000)
	for i := range nodes {
		if nodes[i].guild_threads1000 == nil {
			continue
		}
		fk := *nodes[i].guild_threads1000
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(guild.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "guild_threads1000" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (t *Thread1000Query) loadChannel(ctx context.Context, query *Thread1000ChannelQuery, nodes []*Thread1000, init func(*Thread1000), assign func(*Thread1000, *Thread1000Channel)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Thread1000)
	for i := range nodes {
		if nodes[i].thread1000channel_threads == nil {
			continue
		}
		fk := *nodes[i].thread1000channel_threads
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(thread1000channel.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "thread1000channel_threads" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (t *Thread1000Query) sqlCount(ctx context.Context) (int, error) {
	_spec := t.querySpec()
	_spec.Node.Columns = t.ctx.Fields
	if len(t.ctx.Fields) > 0 {
		_spec.Unique = t.ctx.Unique != nil && *t.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, t.driver, _spec)
}

func (t *Thread1000Query) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(thread1000.Table, thread1000.Columns, sqlgraph.NewFieldSpec(thread1000.FieldID, field.TypeUUID))
	_spec.From = t.sql
	if unique := t.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if t.path != nil {
		_spec.Unique = true
	}
	if fields := t.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, thread1000.FieldID)
		for i := range fields {
			if fields[i] != thread1000.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := t.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := t.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := t.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := t.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (t *Thread1000Query) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(t.driver.Dialect())
	t1 := builder.Table(thread1000.Table)
	columns := t.ctx.Fields
	if len(columns) == 0 {
		columns = thread1000.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if t.sql != nil {
		selector = t.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if t.ctx.Unique != nil && *t.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range t.predicates {
		p(selector)
	}
	for _, p := range t.order {
		p(selector)
	}
	if offset := t.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := t.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Thread1000GroupBy is the group-by builder for Thread1000 entities.
type Thread1000GroupBy struct {
	selector
	build *Thread1000Query
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tb *Thread1000GroupBy) Aggregate(fns ...AggregateFunc) *Thread1000GroupBy {
	tb.fns = append(tb.fns, fns...)
	return tb
}

// Scan applies the selector query and scans the result into the given value.
func (tb *Thread1000GroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tb.build.ctx, "GroupBy")
	if err := tb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*Thread1000Query, *Thread1000GroupBy](ctx, tb.build, tb, tb.build.inters, v)
}

func (tb *Thread1000GroupBy) sqlScan(ctx context.Context, root *Thread1000Query, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tb.fns))
	for _, fn := range tb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tb.flds)+len(tb.fns))
		for _, f := range *tb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Thread1000Select is the builder for selecting fields of Thread1000 entities.
type Thread1000Select struct {
	*Thread1000Query
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (t *Thread1000Select) Aggregate(fns ...AggregateFunc) *Thread1000Select {
	t.fns = append(t.fns, fns...)
	return t
}

// Scan applies the selector query and scans the result into the given value.
func (t *Thread1000Select) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, t.ctx, "Select")
	if err := t.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*Thread1000Query, *Thread1000Select](ctx, t.Thread1000Query, t, t.inters, v)
}

func (t *Thread1000Select) sqlScan(ctx context.Context, root *Thread1000Query, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(t.fns))
	for _, fn := range t.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*t.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := t.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
