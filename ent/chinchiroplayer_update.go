// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/sabafly/gobot/ent/chinchiroplayer"
	"github.com/sabafly/gobot/ent/predicate"
)

// ChinchiroPlayerUpdate is the builder for updating ChinchiroPlayer entities.
type ChinchiroPlayerUpdate struct {
	config
	hooks    []Hook
	mutation *ChinchiroPlayerMutation
}

// Where appends a list predicates to the ChinchiroPlayerUpdate builder.
func (cpu *ChinchiroPlayerUpdate) Where(ps ...predicate.ChinchiroPlayer) *ChinchiroPlayerUpdate {
	cpu.mutation.Where(ps...)
	return cpu
}

// SetPoint sets the "point" field.
func (cpu *ChinchiroPlayerUpdate) SetPoint(i int) *ChinchiroPlayerUpdate {
	cpu.mutation.ResetPoint()
	cpu.mutation.SetPoint(i)
	return cpu
}

// SetNillablePoint sets the "point" field if the given value is not nil.
func (cpu *ChinchiroPlayerUpdate) SetNillablePoint(i *int) *ChinchiroPlayerUpdate {
	if i != nil {
		cpu.SetPoint(*i)
	}
	return cpu
}

// AddPoint adds i to the "point" field.
func (cpu *ChinchiroPlayerUpdate) AddPoint(i int) *ChinchiroPlayerUpdate {
	cpu.mutation.AddPoint(i)
	return cpu
}

// SetIsOwner sets the "is_owner" field.
func (cpu *ChinchiroPlayerUpdate) SetIsOwner(b bool) *ChinchiroPlayerUpdate {
	cpu.mutation.SetIsOwner(b)
	return cpu
}

// SetNillableIsOwner sets the "is_owner" field if the given value is not nil.
func (cpu *ChinchiroPlayerUpdate) SetNillableIsOwner(b *bool) *ChinchiroPlayerUpdate {
	if b != nil {
		cpu.SetIsOwner(*b)
	}
	return cpu
}

// SetBet sets the "bet" field.
func (cpu *ChinchiroPlayerUpdate) SetBet(i int) *ChinchiroPlayerUpdate {
	cpu.mutation.ResetBet()
	cpu.mutation.SetBet(i)
	return cpu
}

// SetNillableBet sets the "bet" field if the given value is not nil.
func (cpu *ChinchiroPlayerUpdate) SetNillableBet(i *int) *ChinchiroPlayerUpdate {
	if i != nil {
		cpu.SetBet(*i)
	}
	return cpu
}

// AddBet adds i to the "bet" field.
func (cpu *ChinchiroPlayerUpdate) AddBet(i int) *ChinchiroPlayerUpdate {
	cpu.mutation.AddBet(i)
	return cpu
}

// ClearBet clears the value of the "bet" field.
func (cpu *ChinchiroPlayerUpdate) ClearBet() *ChinchiroPlayerUpdate {
	cpu.mutation.ClearBet()
	return cpu
}

// SetDices sets the "dices" field.
func (cpu *ChinchiroPlayerUpdate) SetDices(i []int) *ChinchiroPlayerUpdate {
	cpu.mutation.SetDices(i)
	return cpu
}

// AppendDices appends i to the "dices" field.
func (cpu *ChinchiroPlayerUpdate) AppendDices(i []int) *ChinchiroPlayerUpdate {
	cpu.mutation.AppendDices(i)
	return cpu
}

// ClearDices clears the value of the "dices" field.
func (cpu *ChinchiroPlayerUpdate) ClearDices() *ChinchiroPlayerUpdate {
	cpu.mutation.ClearDices()
	return cpu
}

// Mutation returns the ChinchiroPlayerMutation object of the builder.
func (cpu *ChinchiroPlayerUpdate) Mutation() *ChinchiroPlayerMutation {
	return cpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cpu *ChinchiroPlayerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cpu.sqlSave, cpu.mutation, cpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cpu *ChinchiroPlayerUpdate) SaveX(ctx context.Context) int {
	affected, err := cpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cpu *ChinchiroPlayerUpdate) Exec(ctx context.Context) error {
	_, err := cpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpu *ChinchiroPlayerUpdate) ExecX(ctx context.Context) {
	if err := cpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpu *ChinchiroPlayerUpdate) check() error {
	if _, ok := cpu.mutation.UserID(); cpu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ChinchiroPlayer.user"`)
	}
	if _, ok := cpu.mutation.SessionID(); cpu.mutation.SessionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ChinchiroPlayer.session"`)
	}
	return nil
}

func (cpu *ChinchiroPlayerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(chinchiroplayer.Table, chinchiroplayer.Columns, sqlgraph.NewFieldSpec(chinchiroplayer.FieldID, field.TypeUUID))
	if ps := cpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpu.mutation.Point(); ok {
		_spec.SetField(chinchiroplayer.FieldPoint, field.TypeInt, value)
	}
	if value, ok := cpu.mutation.AddedPoint(); ok {
		_spec.AddField(chinchiroplayer.FieldPoint, field.TypeInt, value)
	}
	if value, ok := cpu.mutation.IsOwner(); ok {
		_spec.SetField(chinchiroplayer.FieldIsOwner, field.TypeBool, value)
	}
	if value, ok := cpu.mutation.Bet(); ok {
		_spec.SetField(chinchiroplayer.FieldBet, field.TypeInt, value)
	}
	if value, ok := cpu.mutation.AddedBet(); ok {
		_spec.AddField(chinchiroplayer.FieldBet, field.TypeInt, value)
	}
	if cpu.mutation.BetCleared() {
		_spec.ClearField(chinchiroplayer.FieldBet, field.TypeInt)
	}
	if value, ok := cpu.mutation.Dices(); ok {
		_spec.SetField(chinchiroplayer.FieldDices, field.TypeJSON, value)
	}
	if value, ok := cpu.mutation.AppendedDices(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, chinchiroplayer.FieldDices, value)
		})
	}
	if cpu.mutation.DicesCleared() {
		_spec.ClearField(chinchiroplayer.FieldDices, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chinchiroplayer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cpu.mutation.done = true
	return n, nil
}

// ChinchiroPlayerUpdateOne is the builder for updating a single ChinchiroPlayer entity.
type ChinchiroPlayerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChinchiroPlayerMutation
}

// SetPoint sets the "point" field.
func (cpuo *ChinchiroPlayerUpdateOne) SetPoint(i int) *ChinchiroPlayerUpdateOne {
	cpuo.mutation.ResetPoint()
	cpuo.mutation.SetPoint(i)
	return cpuo
}

// SetNillablePoint sets the "point" field if the given value is not nil.
func (cpuo *ChinchiroPlayerUpdateOne) SetNillablePoint(i *int) *ChinchiroPlayerUpdateOne {
	if i != nil {
		cpuo.SetPoint(*i)
	}
	return cpuo
}

// AddPoint adds i to the "point" field.
func (cpuo *ChinchiroPlayerUpdateOne) AddPoint(i int) *ChinchiroPlayerUpdateOne {
	cpuo.mutation.AddPoint(i)
	return cpuo
}

// SetIsOwner sets the "is_owner" field.
func (cpuo *ChinchiroPlayerUpdateOne) SetIsOwner(b bool) *ChinchiroPlayerUpdateOne {
	cpuo.mutation.SetIsOwner(b)
	return cpuo
}

// SetNillableIsOwner sets the "is_owner" field if the given value is not nil.
func (cpuo *ChinchiroPlayerUpdateOne) SetNillableIsOwner(b *bool) *ChinchiroPlayerUpdateOne {
	if b != nil {
		cpuo.SetIsOwner(*b)
	}
	return cpuo
}

// SetBet sets the "bet" field.
func (cpuo *ChinchiroPlayerUpdateOne) SetBet(i int) *ChinchiroPlayerUpdateOne {
	cpuo.mutation.ResetBet()
	cpuo.mutation.SetBet(i)
	return cpuo
}

// SetNillableBet sets the "bet" field if the given value is not nil.
func (cpuo *ChinchiroPlayerUpdateOne) SetNillableBet(i *int) *ChinchiroPlayerUpdateOne {
	if i != nil {
		cpuo.SetBet(*i)
	}
	return cpuo
}

// AddBet adds i to the "bet" field.
func (cpuo *ChinchiroPlayerUpdateOne) AddBet(i int) *ChinchiroPlayerUpdateOne {
	cpuo.mutation.AddBet(i)
	return cpuo
}

// ClearBet clears the value of the "bet" field.
func (cpuo *ChinchiroPlayerUpdateOne) ClearBet() *ChinchiroPlayerUpdateOne {
	cpuo.mutation.ClearBet()
	return cpuo
}

// SetDices sets the "dices" field.
func (cpuo *ChinchiroPlayerUpdateOne) SetDices(i []int) *ChinchiroPlayerUpdateOne {
	cpuo.mutation.SetDices(i)
	return cpuo
}

// AppendDices appends i to the "dices" field.
func (cpuo *ChinchiroPlayerUpdateOne) AppendDices(i []int) *ChinchiroPlayerUpdateOne {
	cpuo.mutation.AppendDices(i)
	return cpuo
}

// ClearDices clears the value of the "dices" field.
func (cpuo *ChinchiroPlayerUpdateOne) ClearDices() *ChinchiroPlayerUpdateOne {
	cpuo.mutation.ClearDices()
	return cpuo
}

// Mutation returns the ChinchiroPlayerMutation object of the builder.
func (cpuo *ChinchiroPlayerUpdateOne) Mutation() *ChinchiroPlayerMutation {
	return cpuo.mutation
}

// Where appends a list predicates to the ChinchiroPlayerUpdate builder.
func (cpuo *ChinchiroPlayerUpdateOne) Where(ps ...predicate.ChinchiroPlayer) *ChinchiroPlayerUpdateOne {
	cpuo.mutation.Where(ps...)
	return cpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cpuo *ChinchiroPlayerUpdateOne) Select(field string, fields ...string) *ChinchiroPlayerUpdateOne {
	cpuo.fields = append([]string{field}, fields...)
	return cpuo
}

// Save executes the query and returns the updated ChinchiroPlayer entity.
func (cpuo *ChinchiroPlayerUpdateOne) Save(ctx context.Context) (*ChinchiroPlayer, error) {
	return withHooks(ctx, cpuo.sqlSave, cpuo.mutation, cpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cpuo *ChinchiroPlayerUpdateOne) SaveX(ctx context.Context) *ChinchiroPlayer {
	node, err := cpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cpuo *ChinchiroPlayerUpdateOne) Exec(ctx context.Context) error {
	_, err := cpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpuo *ChinchiroPlayerUpdateOne) ExecX(ctx context.Context) {
	if err := cpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpuo *ChinchiroPlayerUpdateOne) check() error {
	if _, ok := cpuo.mutation.UserID(); cpuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ChinchiroPlayer.user"`)
	}
	if _, ok := cpuo.mutation.SessionID(); cpuo.mutation.SessionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ChinchiroPlayer.session"`)
	}
	return nil
}

func (cpuo *ChinchiroPlayerUpdateOne) sqlSave(ctx context.Context) (_node *ChinchiroPlayer, err error) {
	if err := cpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chinchiroplayer.Table, chinchiroplayer.Columns, sqlgraph.NewFieldSpec(chinchiroplayer.FieldID, field.TypeUUID))
	id, ok := cpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChinchiroPlayer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chinchiroplayer.FieldID)
		for _, f := range fields {
			if !chinchiroplayer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chinchiroplayer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpuo.mutation.Point(); ok {
		_spec.SetField(chinchiroplayer.FieldPoint, field.TypeInt, value)
	}
	if value, ok := cpuo.mutation.AddedPoint(); ok {
		_spec.AddField(chinchiroplayer.FieldPoint, field.TypeInt, value)
	}
	if value, ok := cpuo.mutation.IsOwner(); ok {
		_spec.SetField(chinchiroplayer.FieldIsOwner, field.TypeBool, value)
	}
	if value, ok := cpuo.mutation.Bet(); ok {
		_spec.SetField(chinchiroplayer.FieldBet, field.TypeInt, value)
	}
	if value, ok := cpuo.mutation.AddedBet(); ok {
		_spec.AddField(chinchiroplayer.FieldBet, field.TypeInt, value)
	}
	if cpuo.mutation.BetCleared() {
		_spec.ClearField(chinchiroplayer.FieldBet, field.TypeInt)
	}
	if value, ok := cpuo.mutation.Dices(); ok {
		_spec.SetField(chinchiroplayer.FieldDices, field.TypeJSON, value)
	}
	if value, ok := cpuo.mutation.AppendedDices(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, chinchiroplayer.FieldDices, value)
		})
	}
	if cpuo.mutation.DicesCleared() {
		_spec.ClearField(chinchiroplayer.FieldDices, field.TypeJSON)
	}
	_node = &ChinchiroPlayer{config: cpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chinchiroplayer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cpuo.mutation.done = true
	return _node, nil
}
