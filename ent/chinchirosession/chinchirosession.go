// Code generated by ent, DO NOT EDIT.

package chinchirosession

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the chinchirosession type in the database.
	Label = "chinchiro_session"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTurn holds the string denoting the turn field in the database.
	FieldTurn = "turn"
	// FieldLoop holds the string denoting the loop field in the database.
	FieldLoop = "loop"
	// EdgeGuild holds the string denoting the guild edge name in mutations.
	EdgeGuild = "guild"
	// EdgePlayers holds the string denoting the players edge name in mutations.
	EdgePlayers = "players"
	// Table holds the table name of the chinchirosession in the database.
	Table = "chinchiro_sessions"
	// GuildTable is the table that holds the guild relation/edge.
	GuildTable = "chinchiro_sessions"
	// GuildInverseTable is the table name for the Guild entity.
	// It exists in this package in order to avoid circular dependency with the "guild" package.
	GuildInverseTable = "guilds"
	// GuildColumn is the table column denoting the guild relation/edge.
	GuildColumn = "guild_chinchiro_sessions"
	// PlayersTable is the table that holds the players relation/edge.
	PlayersTable = "chinchiro_players"
	// PlayersInverseTable is the table name for the ChinchiroPlayer entity.
	// It exists in this package in order to avoid circular dependency with the "chinchiroplayer" package.
	PlayersInverseTable = "chinchiro_players"
	// PlayersColumn is the table column denoting the players relation/edge.
	PlayersColumn = "chinchiro_session_players"
)

// Columns holds all SQL columns for chinchirosession fields.
var Columns = []string{
	FieldID,
	FieldTurn,
	FieldLoop,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "chinchiro_sessions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"guild_chinchiro_sessions",
	"user_chinchiro_sessions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultTurn holds the default value on creation for the "turn" field.
	DefaultTurn int
	// DefaultLoop holds the default value on creation for the "loop" field.
	DefaultLoop int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ChinchiroSession queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTurn orders the results by the turn field.
func ByTurn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTurn, opts...).ToFunc()
}

// ByLoop orders the results by the loop field.
func ByLoop(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoop, opts...).ToFunc()
}

// ByGuildField orders the results by guild field.
func ByGuildField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGuildStep(), sql.OrderByField(field, opts...))
	}
}

// ByPlayersCount orders the results by players count.
func ByPlayersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlayersStep(), opts...)
	}
}

// ByPlayers orders the results by players terms.
func ByPlayers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newGuildStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GuildInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GuildTable, GuildColumn),
	)
}
func newPlayersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PlayersTable, PlayersColumn),
	)
}
