// Code generated by ent, DO NOT EDIT.

package rolepaneledit

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/google/uuid"
	"github.com/sabafly/gobot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldLTE(FieldID, id))
}

// ChannelID applies equality check predicate on the "channel_id" field. It's identical to ChannelIDEQ.
func ChannelID(v snowflake.ID) predicate.RolePanelEdit {
	vc := uint64(v)
	return predicate.RolePanelEdit(sql.FieldEQ(FieldChannelID, vc))
}

// EmojiAuthor applies equality check predicate on the "emoji_author" field. It's identical to EmojiAuthorEQ.
func EmojiAuthor(v snowflake.ID) predicate.RolePanelEdit {
	vc := uint64(v)
	return predicate.RolePanelEdit(sql.FieldEQ(FieldEmojiAuthor, vc))
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v string) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldEQ(FieldToken, v))
}

// SelectedRole applies equality check predicate on the "selected_role" field. It's identical to SelectedRoleEQ.
func SelectedRole(v snowflake.ID) predicate.RolePanelEdit {
	vc := uint64(v)
	return predicate.RolePanelEdit(sql.FieldEQ(FieldSelectedRole, vc))
}

// Modified applies equality check predicate on the "modified" field. It's identical to ModifiedEQ.
func Modified(v bool) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldEQ(FieldModified, v))
}

// ChannelIDEQ applies the EQ predicate on the "channel_id" field.
func ChannelIDEQ(v snowflake.ID) predicate.RolePanelEdit {
	vc := uint64(v)
	return predicate.RolePanelEdit(sql.FieldEQ(FieldChannelID, vc))
}

// ChannelIDNEQ applies the NEQ predicate on the "channel_id" field.
func ChannelIDNEQ(v snowflake.ID) predicate.RolePanelEdit {
	vc := uint64(v)
	return predicate.RolePanelEdit(sql.FieldNEQ(FieldChannelID, vc))
}

// ChannelIDIn applies the In predicate on the "channel_id" field.
func ChannelIDIn(vs ...snowflake.ID) predicate.RolePanelEdit {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.RolePanelEdit(sql.FieldIn(FieldChannelID, v...))
}

// ChannelIDNotIn applies the NotIn predicate on the "channel_id" field.
func ChannelIDNotIn(vs ...snowflake.ID) predicate.RolePanelEdit {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.RolePanelEdit(sql.FieldNotIn(FieldChannelID, v...))
}

// ChannelIDGT applies the GT predicate on the "channel_id" field.
func ChannelIDGT(v snowflake.ID) predicate.RolePanelEdit {
	vc := uint64(v)
	return predicate.RolePanelEdit(sql.FieldGT(FieldChannelID, vc))
}

// ChannelIDGTE applies the GTE predicate on the "channel_id" field.
func ChannelIDGTE(v snowflake.ID) predicate.RolePanelEdit {
	vc := uint64(v)
	return predicate.RolePanelEdit(sql.FieldGTE(FieldChannelID, vc))
}

// ChannelIDLT applies the LT predicate on the "channel_id" field.
func ChannelIDLT(v snowflake.ID) predicate.RolePanelEdit {
	vc := uint64(v)
	return predicate.RolePanelEdit(sql.FieldLT(FieldChannelID, vc))
}

// ChannelIDLTE applies the LTE predicate on the "channel_id" field.
func ChannelIDLTE(v snowflake.ID) predicate.RolePanelEdit {
	vc := uint64(v)
	return predicate.RolePanelEdit(sql.FieldLTE(FieldChannelID, vc))
}

// EmojiAuthorEQ applies the EQ predicate on the "emoji_author" field.
func EmojiAuthorEQ(v snowflake.ID) predicate.RolePanelEdit {
	vc := uint64(v)
	return predicate.RolePanelEdit(sql.FieldEQ(FieldEmojiAuthor, vc))
}

// EmojiAuthorNEQ applies the NEQ predicate on the "emoji_author" field.
func EmojiAuthorNEQ(v snowflake.ID) predicate.RolePanelEdit {
	vc := uint64(v)
	return predicate.RolePanelEdit(sql.FieldNEQ(FieldEmojiAuthor, vc))
}

// EmojiAuthorIn applies the In predicate on the "emoji_author" field.
func EmojiAuthorIn(vs ...snowflake.ID) predicate.RolePanelEdit {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.RolePanelEdit(sql.FieldIn(FieldEmojiAuthor, v...))
}

// EmojiAuthorNotIn applies the NotIn predicate on the "emoji_author" field.
func EmojiAuthorNotIn(vs ...snowflake.ID) predicate.RolePanelEdit {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.RolePanelEdit(sql.FieldNotIn(FieldEmojiAuthor, v...))
}

// EmojiAuthorGT applies the GT predicate on the "emoji_author" field.
func EmojiAuthorGT(v snowflake.ID) predicate.RolePanelEdit {
	vc := uint64(v)
	return predicate.RolePanelEdit(sql.FieldGT(FieldEmojiAuthor, vc))
}

// EmojiAuthorGTE applies the GTE predicate on the "emoji_author" field.
func EmojiAuthorGTE(v snowflake.ID) predicate.RolePanelEdit {
	vc := uint64(v)
	return predicate.RolePanelEdit(sql.FieldGTE(FieldEmojiAuthor, vc))
}

// EmojiAuthorLT applies the LT predicate on the "emoji_author" field.
func EmojiAuthorLT(v snowflake.ID) predicate.RolePanelEdit {
	vc := uint64(v)
	return predicate.RolePanelEdit(sql.FieldLT(FieldEmojiAuthor, vc))
}

// EmojiAuthorLTE applies the LTE predicate on the "emoji_author" field.
func EmojiAuthorLTE(v snowflake.ID) predicate.RolePanelEdit {
	vc := uint64(v)
	return predicate.RolePanelEdit(sql.FieldLTE(FieldEmojiAuthor, vc))
}

// EmojiAuthorIsNil applies the IsNil predicate on the "emoji_author" field.
func EmojiAuthorIsNil() predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldIsNull(FieldEmojiAuthor))
}

// EmojiAuthorNotNil applies the NotNil predicate on the "emoji_author" field.
func EmojiAuthorNotNil() predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldNotNull(FieldEmojiAuthor))
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v string) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldEQ(FieldToken, v))
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v string) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldNEQ(FieldToken, v))
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...string) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldIn(FieldToken, vs...))
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...string) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldNotIn(FieldToken, vs...))
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v string) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldGT(FieldToken, v))
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v string) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldGTE(FieldToken, v))
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v string) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldLT(FieldToken, v))
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v string) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldLTE(FieldToken, v))
}

// TokenContains applies the Contains predicate on the "token" field.
func TokenContains(v string) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldContains(FieldToken, v))
}

// TokenHasPrefix applies the HasPrefix predicate on the "token" field.
func TokenHasPrefix(v string) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldHasPrefix(FieldToken, v))
}

// TokenHasSuffix applies the HasSuffix predicate on the "token" field.
func TokenHasSuffix(v string) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldHasSuffix(FieldToken, v))
}

// TokenIsNil applies the IsNil predicate on the "token" field.
func TokenIsNil() predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldIsNull(FieldToken))
}

// TokenNotNil applies the NotNil predicate on the "token" field.
func TokenNotNil() predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldNotNull(FieldToken))
}

// TokenEqualFold applies the EqualFold predicate on the "token" field.
func TokenEqualFold(v string) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldEqualFold(FieldToken, v))
}

// TokenContainsFold applies the ContainsFold predicate on the "token" field.
func TokenContainsFold(v string) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldContainsFold(FieldToken, v))
}

// SelectedRoleEQ applies the EQ predicate on the "selected_role" field.
func SelectedRoleEQ(v snowflake.ID) predicate.RolePanelEdit {
	vc := uint64(v)
	return predicate.RolePanelEdit(sql.FieldEQ(FieldSelectedRole, vc))
}

// SelectedRoleNEQ applies the NEQ predicate on the "selected_role" field.
func SelectedRoleNEQ(v snowflake.ID) predicate.RolePanelEdit {
	vc := uint64(v)
	return predicate.RolePanelEdit(sql.FieldNEQ(FieldSelectedRole, vc))
}

// SelectedRoleIn applies the In predicate on the "selected_role" field.
func SelectedRoleIn(vs ...snowflake.ID) predicate.RolePanelEdit {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.RolePanelEdit(sql.FieldIn(FieldSelectedRole, v...))
}

// SelectedRoleNotIn applies the NotIn predicate on the "selected_role" field.
func SelectedRoleNotIn(vs ...snowflake.ID) predicate.RolePanelEdit {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.RolePanelEdit(sql.FieldNotIn(FieldSelectedRole, v...))
}

// SelectedRoleGT applies the GT predicate on the "selected_role" field.
func SelectedRoleGT(v snowflake.ID) predicate.RolePanelEdit {
	vc := uint64(v)
	return predicate.RolePanelEdit(sql.FieldGT(FieldSelectedRole, vc))
}

// SelectedRoleGTE applies the GTE predicate on the "selected_role" field.
func SelectedRoleGTE(v snowflake.ID) predicate.RolePanelEdit {
	vc := uint64(v)
	return predicate.RolePanelEdit(sql.FieldGTE(FieldSelectedRole, vc))
}

// SelectedRoleLT applies the LT predicate on the "selected_role" field.
func SelectedRoleLT(v snowflake.ID) predicate.RolePanelEdit {
	vc := uint64(v)
	return predicate.RolePanelEdit(sql.FieldLT(FieldSelectedRole, vc))
}

// SelectedRoleLTE applies the LTE predicate on the "selected_role" field.
func SelectedRoleLTE(v snowflake.ID) predicate.RolePanelEdit {
	vc := uint64(v)
	return predicate.RolePanelEdit(sql.FieldLTE(FieldSelectedRole, vc))
}

// SelectedRoleIsNil applies the IsNil predicate on the "selected_role" field.
func SelectedRoleIsNil() predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldIsNull(FieldSelectedRole))
}

// SelectedRoleNotNil applies the NotNil predicate on the "selected_role" field.
func SelectedRoleNotNil() predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldNotNull(FieldSelectedRole))
}

// ModifiedEQ applies the EQ predicate on the "modified" field.
func ModifiedEQ(v bool) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldEQ(FieldModified, v))
}

// ModifiedNEQ applies the NEQ predicate on the "modified" field.
func ModifiedNEQ(v bool) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.FieldNEQ(FieldModified, v))
}

// HasGuild applies the HasEdge predicate on the "guild" edge.
func HasGuild() predicate.RolePanelEdit {
	return predicate.RolePanelEdit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GuildTable, GuildColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGuildWith applies the HasEdge predicate on the "guild" edge with a given conditions (other predicates).
func HasGuildWith(preds ...predicate.Guild) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(func(s *sql.Selector) {
		step := newGuildStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.RolePanelEdit {
	return predicate.RolePanelEdit(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.RolePanel) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RolePanelEdit) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RolePanelEdit) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RolePanelEdit) predicate.RolePanelEdit {
	return predicate.RolePanelEdit(sql.NotPredicates(p))
}
