// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/google/uuid"
	"github.com/sabafly/gobot/ent/guild"
	"github.com/sabafly/gobot/ent/thread1000"
	"github.com/sabafly/gobot/ent/thread1000channel"
)

// Thread1000Create is the builder for creating a Thread1000 entity.
type Thread1000Create struct {
	config
	mutation *Thread1000Mutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (t *Thread1000Create) SetName(s string) *Thread1000Create {
	t.mutation.SetName(s)
	return t
}

// SetMessageCount sets the "message_count" field.
func (t *Thread1000Create) SetMessageCount(i int) *Thread1000Create {
	t.mutation.SetMessageCount(i)
	return t
}

// SetNillableMessageCount sets the "message_count" field if the given value is not nil.
func (t *Thread1000Create) SetNillableMessageCount(i *int) *Thread1000Create {
	if i != nil {
		t.SetMessageCount(*i)
	}
	return t
}

// SetIsArchived sets the "is_archived" field.
func (t *Thread1000Create) SetIsArchived(b bool) *Thread1000Create {
	t.mutation.SetIsArchived(b)
	return t
}

// SetNillableIsArchived sets the "is_archived" field if the given value is not nil.
func (t *Thread1000Create) SetNillableIsArchived(b *bool) *Thread1000Create {
	if b != nil {
		t.SetIsArchived(*b)
	}
	return t
}

// SetThreadID sets the "thread_id" field.
func (t *Thread1000Create) SetThreadID(s snowflake.ID) *Thread1000Create {
	t.mutation.SetThreadID(s)
	return t
}

// SetID sets the "id" field.
func (t *Thread1000Create) SetID(u uuid.UUID) *Thread1000Create {
	t.mutation.SetID(u)
	return t
}

// SetNillableID sets the "id" field if the given value is not nil.
func (t *Thread1000Create) SetNillableID(u *uuid.UUID) *Thread1000Create {
	if u != nil {
		t.SetID(*u)
	}
	return t
}

// SetGuildID sets the "guild" edge to the Guild entity by ID.
func (t *Thread1000Create) SetGuildID(id snowflake.ID) *Thread1000Create {
	t.mutation.SetGuildID(id)
	return t
}

// SetGuild sets the "guild" edge to the Guild entity.
func (t *Thread1000Create) SetGuild(g *Guild) *Thread1000Create {
	return t.SetGuildID(g.ID)
}

// SetChannelID sets the "channel" edge to the Thread1000Channel entity by ID.
func (t *Thread1000Create) SetChannelID(id uuid.UUID) *Thread1000Create {
	t.mutation.SetChannelID(id)
	return t
}

// SetChannel sets the "channel" edge to the Thread1000Channel entity.
func (t *Thread1000Create) SetChannel(v *Thread1000Channel) *Thread1000Create {
	return t.SetChannelID(v.ID)
}

// Mutation returns the Thread1000Mutation object of the builder.
func (t *Thread1000Create) Mutation() *Thread1000Mutation {
	return t.mutation
}

// Save creates the Thread1000 in the database.
func (t *Thread1000Create) Save(ctx context.Context) (*Thread1000, error) {
	t.defaults()
	return withHooks(ctx, t.sqlSave, t.mutation, t.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (t *Thread1000Create) SaveX(ctx context.Context) *Thread1000 {
	v, err := t.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (t *Thread1000Create) Exec(ctx context.Context) error {
	_, err := t.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (t *Thread1000Create) ExecX(ctx context.Context) {
	if err := t.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (t *Thread1000Create) defaults() {
	if _, ok := t.mutation.MessageCount(); !ok {
		v := thread1000.DefaultMessageCount
		t.mutation.SetMessageCount(v)
	}
	if _, ok := t.mutation.IsArchived(); !ok {
		v := thread1000.DefaultIsArchived
		t.mutation.SetIsArchived(v)
	}
	if _, ok := t.mutation.ID(); !ok {
		v := thread1000.DefaultID()
		t.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (t *Thread1000Create) check() error {
	if _, ok := t.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Thread1000.name"`)}
	}
	if v, ok := t.mutation.Name(); ok {
		if err := thread1000.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Thread1000.name": %w`, err)}
		}
	}
	if _, ok := t.mutation.MessageCount(); !ok {
		return &ValidationError{Name: "message_count", err: errors.New(`ent: missing required field "Thread1000.message_count"`)}
	}
	if _, ok := t.mutation.IsArchived(); !ok {
		return &ValidationError{Name: "is_archived", err: errors.New(`ent: missing required field "Thread1000.is_archived"`)}
	}
	if _, ok := t.mutation.ThreadID(); !ok {
		return &ValidationError{Name: "thread_id", err: errors.New(`ent: missing required field "Thread1000.thread_id"`)}
	}
	if _, ok := t.mutation.GuildID(); !ok {
		return &ValidationError{Name: "guild", err: errors.New(`ent: missing required edge "Thread1000.guild"`)}
	}
	if _, ok := t.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel", err: errors.New(`ent: missing required edge "Thread1000.channel"`)}
	}
	return nil
}

func (t *Thread1000Create) sqlSave(ctx context.Context) (*Thread1000, error) {
	if err := t.check(); err != nil {
		return nil, err
	}
	_node, _spec := t.createSpec()
	if err := sqlgraph.CreateNode(ctx, t.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	t.mutation.id = &_node.ID
	t.mutation.done = true
	return _node, nil
}

func (t *Thread1000Create) createSpec() (*Thread1000, *sqlgraph.CreateSpec) {
	var (
		_node = &Thread1000{config: t.config}
		_spec = sqlgraph.NewCreateSpec(thread1000.Table, sqlgraph.NewFieldSpec(thread1000.FieldID, field.TypeUUID))
	)
	if id, ok := t.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := t.mutation.Name(); ok {
		_spec.SetField(thread1000.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := t.mutation.MessageCount(); ok {
		_spec.SetField(thread1000.FieldMessageCount, field.TypeInt, value)
		_node.MessageCount = value
	}
	if value, ok := t.mutation.IsArchived(); ok {
		_spec.SetField(thread1000.FieldIsArchived, field.TypeBool, value)
		_node.IsArchived = value
	}
	if value, ok := t.mutation.ThreadID(); ok {
		_spec.SetField(thread1000.FieldThreadID, field.TypeUint64, value)
		_node.ThreadID = value
	}
	if nodes := t.mutation.GuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   thread1000.GuildTable,
			Columns: []string{thread1000.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.guild_threads1000 = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := t.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   thread1000.ChannelTable,
			Columns: []string{thread1000.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread1000channel.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.thread1000channel_threads = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// Thread1000CreateBulk is the builder for creating many Thread1000 entities in bulk.
type Thread1000CreateBulk struct {
	config
	err      error
	builders []*Thread1000Create
}

// Save creates the Thread1000 entities in the database.
func (tb *Thread1000CreateBulk) Save(ctx context.Context) ([]*Thread1000, error) {
	if tb.err != nil {
		return nil, tb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tb.builders))
	nodes := make([]*Thread1000, len(tb.builders))
	mutators := make([]Mutator, len(tb.builders))
	for i := range tb.builders {
		func(i int, root context.Context) {
			builder := tb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*Thread1000Mutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tb *Thread1000CreateBulk) SaveX(ctx context.Context) []*Thread1000 {
	v, err := tb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tb *Thread1000CreateBulk) Exec(ctx context.Context) error {
	_, err := tb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tb *Thread1000CreateBulk) ExecX(ctx context.Context) {
	if err := tb.Exec(ctx); err != nil {
		panic(err)
	}
}
