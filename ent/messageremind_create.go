// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/google/uuid"
	"github.com/sabafly/gobot/ent/guild"
	"github.com/sabafly/gobot/ent/messageremind"
)

// MessageRemindCreate is the builder for creating a MessageRemind entity.
type MessageRemindCreate struct {
	config
	mutation *MessageRemindMutation
	hooks    []Hook
}

// SetChannelID sets the "channel_id" field.
func (mrc *MessageRemindCreate) SetChannelID(s snowflake.ID) *MessageRemindCreate {
	mrc.mutation.SetChannelID(s)
	return mrc
}

// SetAuthorID sets the "author_id" field.
func (mrc *MessageRemindCreate) SetAuthorID(s snowflake.ID) *MessageRemindCreate {
	mrc.mutation.SetAuthorID(s)
	return mrc
}

// SetTime sets the "time" field.
func (mrc *MessageRemindCreate) SetTime(t time.Time) *MessageRemindCreate {
	mrc.mutation.SetTime(t)
	return mrc
}

// SetContent sets the "content" field.
func (mrc *MessageRemindCreate) SetContent(s string) *MessageRemindCreate {
	mrc.mutation.SetContent(s)
	return mrc
}

// SetName sets the "name" field.
func (mrc *MessageRemindCreate) SetName(s string) *MessageRemindCreate {
	mrc.mutation.SetName(s)
	return mrc
}

// SetID sets the "id" field.
func (mrc *MessageRemindCreate) SetID(u uuid.UUID) *MessageRemindCreate {
	mrc.mutation.SetID(u)
	return mrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mrc *MessageRemindCreate) SetNillableID(u *uuid.UUID) *MessageRemindCreate {
	if u != nil {
		mrc.SetID(*u)
	}
	return mrc
}

// SetGuildID sets the "guild" edge to the Guild entity by ID.
func (mrc *MessageRemindCreate) SetGuildID(id snowflake.ID) *MessageRemindCreate {
	mrc.mutation.SetGuildID(id)
	return mrc
}

// SetGuild sets the "guild" edge to the Guild entity.
func (mrc *MessageRemindCreate) SetGuild(g *Guild) *MessageRemindCreate {
	return mrc.SetGuildID(g.ID)
}

// Mutation returns the MessageRemindMutation object of the builder.
func (mrc *MessageRemindCreate) Mutation() *MessageRemindMutation {
	return mrc.mutation
}

// Save creates the MessageRemind in the database.
func (mrc *MessageRemindCreate) Save(ctx context.Context) (*MessageRemind, error) {
	mrc.defaults()
	return withHooks(ctx, mrc.sqlSave, mrc.mutation, mrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mrc *MessageRemindCreate) SaveX(ctx context.Context) *MessageRemind {
	v, err := mrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mrc *MessageRemindCreate) Exec(ctx context.Context) error {
	_, err := mrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mrc *MessageRemindCreate) ExecX(ctx context.Context) {
	if err := mrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mrc *MessageRemindCreate) defaults() {
	if _, ok := mrc.mutation.ID(); !ok {
		v := messageremind.DefaultID()
		mrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mrc *MessageRemindCreate) check() error {
	if _, ok := mrc.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel_id", err: errors.New(`ent: missing required field "MessageRemind.channel_id"`)}
	}
	if _, ok := mrc.mutation.AuthorID(); !ok {
		return &ValidationError{Name: "author_id", err: errors.New(`ent: missing required field "MessageRemind.author_id"`)}
	}
	if _, ok := mrc.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`ent: missing required field "MessageRemind.time"`)}
	}
	if _, ok := mrc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "MessageRemind.content"`)}
	}
	if v, ok := mrc.mutation.Content(); ok {
		if err := messageremind.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "MessageRemind.content": %w`, err)}
		}
	}
	if _, ok := mrc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "MessageRemind.name"`)}
	}
	if v, ok := mrc.mutation.Name(); ok {
		if err := messageremind.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "MessageRemind.name": %w`, err)}
		}
	}
	if _, ok := mrc.mutation.GuildID(); !ok {
		return &ValidationError{Name: "guild", err: errors.New(`ent: missing required edge "MessageRemind.guild"`)}
	}
	return nil
}

func (mrc *MessageRemindCreate) sqlSave(ctx context.Context) (*MessageRemind, error) {
	if err := mrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mrc.mutation.id = &_node.ID
	mrc.mutation.done = true
	return _node, nil
}

func (mrc *MessageRemindCreate) createSpec() (*MessageRemind, *sqlgraph.CreateSpec) {
	var (
		_node = &MessageRemind{config: mrc.config}
		_spec = sqlgraph.NewCreateSpec(messageremind.Table, sqlgraph.NewFieldSpec(messageremind.FieldID, field.TypeUUID))
	)
	if id, ok := mrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mrc.mutation.ChannelID(); ok {
		_spec.SetField(messageremind.FieldChannelID, field.TypeUint64, value)
		_node.ChannelID = value
	}
	if value, ok := mrc.mutation.AuthorID(); ok {
		_spec.SetField(messageremind.FieldAuthorID, field.TypeUint64, value)
		_node.AuthorID = value
	}
	if value, ok := mrc.mutation.Time(); ok {
		_spec.SetField(messageremind.FieldTime, field.TypeTime, value)
		_node.Time = value
	}
	if value, ok := mrc.mutation.Content(); ok {
		_spec.SetField(messageremind.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := mrc.mutation.Name(); ok {
		_spec.SetField(messageremind.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := mrc.mutation.GuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messageremind.GuildTable,
			Columns: []string{messageremind.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.guild_reminds = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MessageRemindCreateBulk is the builder for creating many MessageRemind entities in bulk.
type MessageRemindCreateBulk struct {
	config
	err      error
	builders []*MessageRemindCreate
}

// Save creates the MessageRemind entities in the database.
func (mrcb *MessageRemindCreateBulk) Save(ctx context.Context) ([]*MessageRemind, error) {
	if mrcb.err != nil {
		return nil, mrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mrcb.builders))
	nodes := make([]*MessageRemind, len(mrcb.builders))
	mutators := make([]Mutator, len(mrcb.builders))
	for i := range mrcb.builders {
		func(i int, root context.Context) {
			builder := mrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MessageRemindMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mrcb *MessageRemindCreateBulk) SaveX(ctx context.Context) []*MessageRemind {
	v, err := mrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mrcb *MessageRemindCreateBulk) Exec(ctx context.Context) error {
	_, err := mrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mrcb *MessageRemindCreateBulk) ExecX(ctx context.Context) {
	if err := mrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
