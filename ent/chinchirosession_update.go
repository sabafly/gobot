// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/google/uuid"
	"github.com/sabafly/gobot/ent/chinchiroplayer"
	"github.com/sabafly/gobot/ent/chinchirosession"
	"github.com/sabafly/gobot/ent/guild"
	"github.com/sabafly/gobot/ent/predicate"
)

// ChinchiroSessionUpdate is the builder for updating ChinchiroSession entities.
type ChinchiroSessionUpdate struct {
	config
	hooks    []Hook
	mutation *ChinchiroSessionMutation
}

// Where appends a list predicates to the ChinchiroSessionUpdate builder.
func (csu *ChinchiroSessionUpdate) Where(ps ...predicate.ChinchiroSession) *ChinchiroSessionUpdate {
	csu.mutation.Where(ps...)
	return csu
}

// SetTurn sets the "turn" field.
func (csu *ChinchiroSessionUpdate) SetTurn(i int) *ChinchiroSessionUpdate {
	csu.mutation.ResetTurn()
	csu.mutation.SetTurn(i)
	return csu
}

// SetNillableTurn sets the "turn" field if the given value is not nil.
func (csu *ChinchiroSessionUpdate) SetNillableTurn(i *int) *ChinchiroSessionUpdate {
	if i != nil {
		csu.SetTurn(*i)
	}
	return csu
}

// AddTurn adds i to the "turn" field.
func (csu *ChinchiroSessionUpdate) AddTurn(i int) *ChinchiroSessionUpdate {
	csu.mutation.AddTurn(i)
	return csu
}

// SetLoop sets the "loop" field.
func (csu *ChinchiroSessionUpdate) SetLoop(i int) *ChinchiroSessionUpdate {
	csu.mutation.ResetLoop()
	csu.mutation.SetLoop(i)
	return csu
}

// SetNillableLoop sets the "loop" field if the given value is not nil.
func (csu *ChinchiroSessionUpdate) SetNillableLoop(i *int) *ChinchiroSessionUpdate {
	if i != nil {
		csu.SetLoop(*i)
	}
	return csu
}

// AddLoop adds i to the "loop" field.
func (csu *ChinchiroSessionUpdate) AddLoop(i int) *ChinchiroSessionUpdate {
	csu.mutation.AddLoop(i)
	return csu
}

// SetGuildID sets the "guild" edge to the Guild entity by ID.
func (csu *ChinchiroSessionUpdate) SetGuildID(id snowflake.ID) *ChinchiroSessionUpdate {
	csu.mutation.SetGuildID(id)
	return csu
}

// SetNillableGuildID sets the "guild" edge to the Guild entity by ID if the given value is not nil.
func (csu *ChinchiroSessionUpdate) SetNillableGuildID(id *snowflake.ID) *ChinchiroSessionUpdate {
	if id != nil {
		csu = csu.SetGuildID(*id)
	}
	return csu
}

// SetGuild sets the "guild" edge to the Guild entity.
func (csu *ChinchiroSessionUpdate) SetGuild(g *Guild) *ChinchiroSessionUpdate {
	return csu.SetGuildID(g.ID)
}

// AddPlayerIDs adds the "players" edge to the ChinchiroPlayer entity by IDs.
func (csu *ChinchiroSessionUpdate) AddPlayerIDs(ids ...uuid.UUID) *ChinchiroSessionUpdate {
	csu.mutation.AddPlayerIDs(ids...)
	return csu
}

// AddPlayers adds the "players" edges to the ChinchiroPlayer entity.
func (csu *ChinchiroSessionUpdate) AddPlayers(c ...*ChinchiroPlayer) *ChinchiroSessionUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csu.AddPlayerIDs(ids...)
}

// Mutation returns the ChinchiroSessionMutation object of the builder.
func (csu *ChinchiroSessionUpdate) Mutation() *ChinchiroSessionMutation {
	return csu.mutation
}

// ClearGuild clears the "guild" edge to the Guild entity.
func (csu *ChinchiroSessionUpdate) ClearGuild() *ChinchiroSessionUpdate {
	csu.mutation.ClearGuild()
	return csu
}

// ClearPlayers clears all "players" edges to the ChinchiroPlayer entity.
func (csu *ChinchiroSessionUpdate) ClearPlayers() *ChinchiroSessionUpdate {
	csu.mutation.ClearPlayers()
	return csu
}

// RemovePlayerIDs removes the "players" edge to ChinchiroPlayer entities by IDs.
func (csu *ChinchiroSessionUpdate) RemovePlayerIDs(ids ...uuid.UUID) *ChinchiroSessionUpdate {
	csu.mutation.RemovePlayerIDs(ids...)
	return csu
}

// RemovePlayers removes "players" edges to ChinchiroPlayer entities.
func (csu *ChinchiroSessionUpdate) RemovePlayers(c ...*ChinchiroPlayer) *ChinchiroSessionUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csu.RemovePlayerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *ChinchiroSessionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, csu.sqlSave, csu.mutation, csu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csu *ChinchiroSessionUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *ChinchiroSessionUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *ChinchiroSessionUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (csu *ChinchiroSessionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(chinchirosession.Table, chinchirosession.Columns, sqlgraph.NewFieldSpec(chinchirosession.FieldID, field.TypeUUID))
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csu.mutation.Turn(); ok {
		_spec.SetField(chinchirosession.FieldTurn, field.TypeInt, value)
	}
	if value, ok := csu.mutation.AddedTurn(); ok {
		_spec.AddField(chinchirosession.FieldTurn, field.TypeInt, value)
	}
	if value, ok := csu.mutation.Loop(); ok {
		_spec.SetField(chinchirosession.FieldLoop, field.TypeInt, value)
	}
	if value, ok := csu.mutation.AddedLoop(); ok {
		_spec.AddField(chinchirosession.FieldLoop, field.TypeInt, value)
	}
	if csu.mutation.GuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chinchirosession.GuildTable,
			Columns: []string{chinchirosession.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.GuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chinchirosession.GuildTable,
			Columns: []string{chinchirosession.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csu.mutation.PlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chinchirosession.PlayersTable,
			Columns: []string{chinchirosession.PlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chinchiroplayer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.RemovedPlayersIDs(); len(nodes) > 0 && !csu.mutation.PlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chinchirosession.PlayersTable,
			Columns: []string{chinchirosession.PlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chinchiroplayer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.PlayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chinchirosession.PlayersTable,
			Columns: []string{chinchirosession.PlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chinchiroplayer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chinchirosession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csu.mutation.done = true
	return n, nil
}

// ChinchiroSessionUpdateOne is the builder for updating a single ChinchiroSession entity.
type ChinchiroSessionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChinchiroSessionMutation
}

// SetTurn sets the "turn" field.
func (csuo *ChinchiroSessionUpdateOne) SetTurn(i int) *ChinchiroSessionUpdateOne {
	csuo.mutation.ResetTurn()
	csuo.mutation.SetTurn(i)
	return csuo
}

// SetNillableTurn sets the "turn" field if the given value is not nil.
func (csuo *ChinchiroSessionUpdateOne) SetNillableTurn(i *int) *ChinchiroSessionUpdateOne {
	if i != nil {
		csuo.SetTurn(*i)
	}
	return csuo
}

// AddTurn adds i to the "turn" field.
func (csuo *ChinchiroSessionUpdateOne) AddTurn(i int) *ChinchiroSessionUpdateOne {
	csuo.mutation.AddTurn(i)
	return csuo
}

// SetLoop sets the "loop" field.
func (csuo *ChinchiroSessionUpdateOne) SetLoop(i int) *ChinchiroSessionUpdateOne {
	csuo.mutation.ResetLoop()
	csuo.mutation.SetLoop(i)
	return csuo
}

// SetNillableLoop sets the "loop" field if the given value is not nil.
func (csuo *ChinchiroSessionUpdateOne) SetNillableLoop(i *int) *ChinchiroSessionUpdateOne {
	if i != nil {
		csuo.SetLoop(*i)
	}
	return csuo
}

// AddLoop adds i to the "loop" field.
func (csuo *ChinchiroSessionUpdateOne) AddLoop(i int) *ChinchiroSessionUpdateOne {
	csuo.mutation.AddLoop(i)
	return csuo
}

// SetGuildID sets the "guild" edge to the Guild entity by ID.
func (csuo *ChinchiroSessionUpdateOne) SetGuildID(id snowflake.ID) *ChinchiroSessionUpdateOne {
	csuo.mutation.SetGuildID(id)
	return csuo
}

// SetNillableGuildID sets the "guild" edge to the Guild entity by ID if the given value is not nil.
func (csuo *ChinchiroSessionUpdateOne) SetNillableGuildID(id *snowflake.ID) *ChinchiroSessionUpdateOne {
	if id != nil {
		csuo = csuo.SetGuildID(*id)
	}
	return csuo
}

// SetGuild sets the "guild" edge to the Guild entity.
func (csuo *ChinchiroSessionUpdateOne) SetGuild(g *Guild) *ChinchiroSessionUpdateOne {
	return csuo.SetGuildID(g.ID)
}

// AddPlayerIDs adds the "players" edge to the ChinchiroPlayer entity by IDs.
func (csuo *ChinchiroSessionUpdateOne) AddPlayerIDs(ids ...uuid.UUID) *ChinchiroSessionUpdateOne {
	csuo.mutation.AddPlayerIDs(ids...)
	return csuo
}

// AddPlayers adds the "players" edges to the ChinchiroPlayer entity.
func (csuo *ChinchiroSessionUpdateOne) AddPlayers(c ...*ChinchiroPlayer) *ChinchiroSessionUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csuo.AddPlayerIDs(ids...)
}

// Mutation returns the ChinchiroSessionMutation object of the builder.
func (csuo *ChinchiroSessionUpdateOne) Mutation() *ChinchiroSessionMutation {
	return csuo.mutation
}

// ClearGuild clears the "guild" edge to the Guild entity.
func (csuo *ChinchiroSessionUpdateOne) ClearGuild() *ChinchiroSessionUpdateOne {
	csuo.mutation.ClearGuild()
	return csuo
}

// ClearPlayers clears all "players" edges to the ChinchiroPlayer entity.
func (csuo *ChinchiroSessionUpdateOne) ClearPlayers() *ChinchiroSessionUpdateOne {
	csuo.mutation.ClearPlayers()
	return csuo
}

// RemovePlayerIDs removes the "players" edge to ChinchiroPlayer entities by IDs.
func (csuo *ChinchiroSessionUpdateOne) RemovePlayerIDs(ids ...uuid.UUID) *ChinchiroSessionUpdateOne {
	csuo.mutation.RemovePlayerIDs(ids...)
	return csuo
}

// RemovePlayers removes "players" edges to ChinchiroPlayer entities.
func (csuo *ChinchiroSessionUpdateOne) RemovePlayers(c ...*ChinchiroPlayer) *ChinchiroSessionUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csuo.RemovePlayerIDs(ids...)
}

// Where appends a list predicates to the ChinchiroSessionUpdate builder.
func (csuo *ChinchiroSessionUpdateOne) Where(ps ...predicate.ChinchiroSession) *ChinchiroSessionUpdateOne {
	csuo.mutation.Where(ps...)
	return csuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *ChinchiroSessionUpdateOne) Select(field string, fields ...string) *ChinchiroSessionUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated ChinchiroSession entity.
func (csuo *ChinchiroSessionUpdateOne) Save(ctx context.Context) (*ChinchiroSession, error) {
	return withHooks(ctx, csuo.sqlSave, csuo.mutation, csuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *ChinchiroSessionUpdateOne) SaveX(ctx context.Context) *ChinchiroSession {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *ChinchiroSessionUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *ChinchiroSessionUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (csuo *ChinchiroSessionUpdateOne) sqlSave(ctx context.Context) (_node *ChinchiroSession, err error) {
	_spec := sqlgraph.NewUpdateSpec(chinchirosession.Table, chinchirosession.Columns, sqlgraph.NewFieldSpec(chinchirosession.FieldID, field.TypeUUID))
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChinchiroSession.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chinchirosession.FieldID)
		for _, f := range fields {
			if !chinchirosession.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chinchirosession.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csuo.mutation.Turn(); ok {
		_spec.SetField(chinchirosession.FieldTurn, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.AddedTurn(); ok {
		_spec.AddField(chinchirosession.FieldTurn, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.Loop(); ok {
		_spec.SetField(chinchirosession.FieldLoop, field.TypeInt, value)
	}
	if value, ok := csuo.mutation.AddedLoop(); ok {
		_spec.AddField(chinchirosession.FieldLoop, field.TypeInt, value)
	}
	if csuo.mutation.GuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chinchirosession.GuildTable,
			Columns: []string{chinchirosession.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.GuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chinchirosession.GuildTable,
			Columns: []string{chinchirosession.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csuo.mutation.PlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chinchirosession.PlayersTable,
			Columns: []string{chinchirosession.PlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chinchiroplayer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.RemovedPlayersIDs(); len(nodes) > 0 && !csuo.mutation.PlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chinchirosession.PlayersTable,
			Columns: []string{chinchirosession.PlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chinchiroplayer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.PlayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chinchirosession.PlayersTable,
			Columns: []string{chinchirosession.PlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chinchiroplayer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ChinchiroSession{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chinchirosession.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csuo.mutation.done = true
	return _node, nil
}
