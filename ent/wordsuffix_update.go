// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/sabafly/gobot/ent/guild"
	"github.com/sabafly/gobot/ent/predicate"
	"github.com/sabafly/gobot/ent/user"
	"github.com/sabafly/gobot/ent/wordsuffix"
)

// WordSuffixUpdate is the builder for updating WordSuffix entities.
type WordSuffixUpdate struct {
	config
	hooks    []Hook
	mutation *WordSuffixMutation
}

// Where appends a list predicates to the WordSuffixUpdate builder.
func (wsu *WordSuffixUpdate) Where(ps ...predicate.WordSuffix) *WordSuffixUpdate {
	wsu.mutation.Where(ps...)
	return wsu
}

// SetSuffix sets the "suffix" field.
func (wsu *WordSuffixUpdate) SetSuffix(s string) *WordSuffixUpdate {
	wsu.mutation.SetSuffix(s)
	return wsu
}

// SetExpired sets the "expired" field.
func (wsu *WordSuffixUpdate) SetExpired(t time.Time) *WordSuffixUpdate {
	wsu.mutation.SetExpired(t)
	return wsu
}

// SetNillableExpired sets the "expired" field if the given value is not nil.
func (wsu *WordSuffixUpdate) SetNillableExpired(t *time.Time) *WordSuffixUpdate {
	if t != nil {
		wsu.SetExpired(*t)
	}
	return wsu
}

// ClearExpired clears the value of the "expired" field.
func (wsu *WordSuffixUpdate) ClearExpired() *WordSuffixUpdate {
	wsu.mutation.ClearExpired()
	return wsu
}

// SetGuildID sets the "guild_id" field.
func (wsu *WordSuffixUpdate) SetGuildID(s snowflake.ID) *WordSuffixUpdate {
	wsu.mutation.SetGuildID(s)
	return wsu
}

// SetNillableGuildID sets the "guild_id" field if the given value is not nil.
func (wsu *WordSuffixUpdate) SetNillableGuildID(s *snowflake.ID) *WordSuffixUpdate {
	if s != nil {
		wsu.SetGuildID(*s)
	}
	return wsu
}

// ClearGuildID clears the value of the "guild_id" field.
func (wsu *WordSuffixUpdate) ClearGuildID() *WordSuffixUpdate {
	wsu.mutation.ClearGuildID()
	return wsu
}

// SetRule sets the "rule" field.
func (wsu *WordSuffixUpdate) SetRule(w wordsuffix.Rule) *WordSuffixUpdate {
	wsu.mutation.SetRule(w)
	return wsu
}

// SetNillableRule sets the "rule" field if the given value is not nil.
func (wsu *WordSuffixUpdate) SetNillableRule(w *wordsuffix.Rule) *WordSuffixUpdate {
	if w != nil {
		wsu.SetRule(*w)
	}
	return wsu
}

// SetGuild sets the "guild" edge to the Guild entity.
func (wsu *WordSuffixUpdate) SetGuild(g *Guild) *WordSuffixUpdate {
	return wsu.SetGuildID(g.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (wsu *WordSuffixUpdate) SetOwnerID(id snowflake.ID) *WordSuffixUpdate {
	wsu.mutation.SetOwnerID(id)
	return wsu
}

// SetOwner sets the "owner" edge to the User entity.
func (wsu *WordSuffixUpdate) SetOwner(u *User) *WordSuffixUpdate {
	return wsu.SetOwnerID(u.ID)
}

// Mutation returns the WordSuffixMutation object of the builder.
func (wsu *WordSuffixUpdate) Mutation() *WordSuffixMutation {
	return wsu.mutation
}

// ClearGuild clears the "guild" edge to the Guild entity.
func (wsu *WordSuffixUpdate) ClearGuild() *WordSuffixUpdate {
	wsu.mutation.ClearGuild()
	return wsu
}

// ClearOwner clears the "owner" edge to the User entity.
func (wsu *WordSuffixUpdate) ClearOwner() *WordSuffixUpdate {
	wsu.mutation.ClearOwner()
	return wsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wsu *WordSuffixUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wsu.sqlSave, wsu.mutation, wsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wsu *WordSuffixUpdate) SaveX(ctx context.Context) int {
	affected, err := wsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wsu *WordSuffixUpdate) Exec(ctx context.Context) error {
	_, err := wsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wsu *WordSuffixUpdate) ExecX(ctx context.Context) {
	if err := wsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wsu *WordSuffixUpdate) check() error {
	if v, ok := wsu.mutation.Suffix(); ok {
		if err := wordsuffix.SuffixValidator(v); err != nil {
			return &ValidationError{Name: "suffix", err: fmt.Errorf(`ent: validator failed for field "WordSuffix.suffix": %w`, err)}
		}
	}
	if v, ok := wsu.mutation.Rule(); ok {
		if err := wordsuffix.RuleValidator(v); err != nil {
			return &ValidationError{Name: "rule", err: fmt.Errorf(`ent: validator failed for field "WordSuffix.rule": %w`, err)}
		}
	}
	if _, ok := wsu.mutation.OwnerID(); wsu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "WordSuffix.owner"`)
	}
	return nil
}

func (wsu *WordSuffixUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(wordsuffix.Table, wordsuffix.Columns, sqlgraph.NewFieldSpec(wordsuffix.FieldID, field.TypeUUID))
	if ps := wsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wsu.mutation.Suffix(); ok {
		_spec.SetField(wordsuffix.FieldSuffix, field.TypeString, value)
	}
	if value, ok := wsu.mutation.Expired(); ok {
		_spec.SetField(wordsuffix.FieldExpired, field.TypeTime, value)
	}
	if wsu.mutation.ExpiredCleared() {
		_spec.ClearField(wordsuffix.FieldExpired, field.TypeTime)
	}
	if value, ok := wsu.mutation.Rule(); ok {
		_spec.SetField(wordsuffix.FieldRule, field.TypeEnum, value)
	}
	if wsu.mutation.GuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   wordsuffix.GuildTable,
			Columns: []string{wordsuffix.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wsu.mutation.GuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   wordsuffix.GuildTable,
			Columns: []string{wordsuffix.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wsu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wordsuffix.OwnerTable,
			Columns: []string{wordsuffix.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wsu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wordsuffix.OwnerTable,
			Columns: []string{wordsuffix.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wordsuffix.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wsu.mutation.done = true
	return n, nil
}

// WordSuffixUpdateOne is the builder for updating a single WordSuffix entity.
type WordSuffixUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WordSuffixMutation
}

// SetSuffix sets the "suffix" field.
func (wsuo *WordSuffixUpdateOne) SetSuffix(s string) *WordSuffixUpdateOne {
	wsuo.mutation.SetSuffix(s)
	return wsuo
}

// SetExpired sets the "expired" field.
func (wsuo *WordSuffixUpdateOne) SetExpired(t time.Time) *WordSuffixUpdateOne {
	wsuo.mutation.SetExpired(t)
	return wsuo
}

// SetNillableExpired sets the "expired" field if the given value is not nil.
func (wsuo *WordSuffixUpdateOne) SetNillableExpired(t *time.Time) *WordSuffixUpdateOne {
	if t != nil {
		wsuo.SetExpired(*t)
	}
	return wsuo
}

// ClearExpired clears the value of the "expired" field.
func (wsuo *WordSuffixUpdateOne) ClearExpired() *WordSuffixUpdateOne {
	wsuo.mutation.ClearExpired()
	return wsuo
}

// SetGuildID sets the "guild_id" field.
func (wsuo *WordSuffixUpdateOne) SetGuildID(s snowflake.ID) *WordSuffixUpdateOne {
	wsuo.mutation.SetGuildID(s)
	return wsuo
}

// SetNillableGuildID sets the "guild_id" field if the given value is not nil.
func (wsuo *WordSuffixUpdateOne) SetNillableGuildID(s *snowflake.ID) *WordSuffixUpdateOne {
	if s != nil {
		wsuo.SetGuildID(*s)
	}
	return wsuo
}

// ClearGuildID clears the value of the "guild_id" field.
func (wsuo *WordSuffixUpdateOne) ClearGuildID() *WordSuffixUpdateOne {
	wsuo.mutation.ClearGuildID()
	return wsuo
}

// SetRule sets the "rule" field.
func (wsuo *WordSuffixUpdateOne) SetRule(w wordsuffix.Rule) *WordSuffixUpdateOne {
	wsuo.mutation.SetRule(w)
	return wsuo
}

// SetNillableRule sets the "rule" field if the given value is not nil.
func (wsuo *WordSuffixUpdateOne) SetNillableRule(w *wordsuffix.Rule) *WordSuffixUpdateOne {
	if w != nil {
		wsuo.SetRule(*w)
	}
	return wsuo
}

// SetGuild sets the "guild" edge to the Guild entity.
func (wsuo *WordSuffixUpdateOne) SetGuild(g *Guild) *WordSuffixUpdateOne {
	return wsuo.SetGuildID(g.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (wsuo *WordSuffixUpdateOne) SetOwnerID(id snowflake.ID) *WordSuffixUpdateOne {
	wsuo.mutation.SetOwnerID(id)
	return wsuo
}

// SetOwner sets the "owner" edge to the User entity.
func (wsuo *WordSuffixUpdateOne) SetOwner(u *User) *WordSuffixUpdateOne {
	return wsuo.SetOwnerID(u.ID)
}

// Mutation returns the WordSuffixMutation object of the builder.
func (wsuo *WordSuffixUpdateOne) Mutation() *WordSuffixMutation {
	return wsuo.mutation
}

// ClearGuild clears the "guild" edge to the Guild entity.
func (wsuo *WordSuffixUpdateOne) ClearGuild() *WordSuffixUpdateOne {
	wsuo.mutation.ClearGuild()
	return wsuo
}

// ClearOwner clears the "owner" edge to the User entity.
func (wsuo *WordSuffixUpdateOne) ClearOwner() *WordSuffixUpdateOne {
	wsuo.mutation.ClearOwner()
	return wsuo
}

// Where appends a list predicates to the WordSuffixUpdate builder.
func (wsuo *WordSuffixUpdateOne) Where(ps ...predicate.WordSuffix) *WordSuffixUpdateOne {
	wsuo.mutation.Where(ps...)
	return wsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wsuo *WordSuffixUpdateOne) Select(field string, fields ...string) *WordSuffixUpdateOne {
	wsuo.fields = append([]string{field}, fields...)
	return wsuo
}

// Save executes the query and returns the updated WordSuffix entity.
func (wsuo *WordSuffixUpdateOne) Save(ctx context.Context) (*WordSuffix, error) {
	return withHooks(ctx, wsuo.sqlSave, wsuo.mutation, wsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wsuo *WordSuffixUpdateOne) SaveX(ctx context.Context) *WordSuffix {
	node, err := wsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wsuo *WordSuffixUpdateOne) Exec(ctx context.Context) error {
	_, err := wsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wsuo *WordSuffixUpdateOne) ExecX(ctx context.Context) {
	if err := wsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wsuo *WordSuffixUpdateOne) check() error {
	if v, ok := wsuo.mutation.Suffix(); ok {
		if err := wordsuffix.SuffixValidator(v); err != nil {
			return &ValidationError{Name: "suffix", err: fmt.Errorf(`ent: validator failed for field "WordSuffix.suffix": %w`, err)}
		}
	}
	if v, ok := wsuo.mutation.Rule(); ok {
		if err := wordsuffix.RuleValidator(v); err != nil {
			return &ValidationError{Name: "rule", err: fmt.Errorf(`ent: validator failed for field "WordSuffix.rule": %w`, err)}
		}
	}
	if _, ok := wsuo.mutation.OwnerID(); wsuo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "WordSuffix.owner"`)
	}
	return nil
}

func (wsuo *WordSuffixUpdateOne) sqlSave(ctx context.Context) (_node *WordSuffix, err error) {
	if err := wsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(wordsuffix.Table, wordsuffix.Columns, sqlgraph.NewFieldSpec(wordsuffix.FieldID, field.TypeUUID))
	id, ok := wsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WordSuffix.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wordsuffix.FieldID)
		for _, f := range fields {
			if !wordsuffix.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != wordsuffix.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wsuo.mutation.Suffix(); ok {
		_spec.SetField(wordsuffix.FieldSuffix, field.TypeString, value)
	}
	if value, ok := wsuo.mutation.Expired(); ok {
		_spec.SetField(wordsuffix.FieldExpired, field.TypeTime, value)
	}
	if wsuo.mutation.ExpiredCleared() {
		_spec.ClearField(wordsuffix.FieldExpired, field.TypeTime)
	}
	if value, ok := wsuo.mutation.Rule(); ok {
		_spec.SetField(wordsuffix.FieldRule, field.TypeEnum, value)
	}
	if wsuo.mutation.GuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   wordsuffix.GuildTable,
			Columns: []string{wordsuffix.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wsuo.mutation.GuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   wordsuffix.GuildTable,
			Columns: []string{wordsuffix.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wsuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wordsuffix.OwnerTable,
			Columns: []string{wordsuffix.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wsuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wordsuffix.OwnerTable,
			Columns: []string{wordsuffix.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WordSuffix{config: wsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wordsuffix.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wsuo.mutation.done = true
	return _node, nil
}
