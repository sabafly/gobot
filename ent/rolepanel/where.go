// Code generated by ent, DO NOT EDIT.

package rolepanel

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/sabafly/gobot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldEQ(FieldDescription, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldEQ(FieldUpdatedAt, v))
}

// AppliedAt applies equality check predicate on the "applied_at" field. It's identical to AppliedAtEQ.
func AppliedAt(v time.Time) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldEQ(FieldAppliedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldContainsFold(FieldDescription, v))
}

// RolesIsNil applies the IsNil predicate on the "roles" field.
func RolesIsNil() predicate.RolePanel {
	return predicate.RolePanel(sql.FieldIsNull(FieldRoles))
}

// RolesNotNil applies the NotNil predicate on the "roles" field.
func RolesNotNil() predicate.RolePanel {
	return predicate.RolePanel(sql.FieldNotNull(FieldRoles))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.RolePanel {
	return predicate.RolePanel(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.RolePanel {
	return predicate.RolePanel(sql.FieldNotNull(FieldUpdatedAt))
}

// AppliedAtEQ applies the EQ predicate on the "applied_at" field.
func AppliedAtEQ(v time.Time) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldEQ(FieldAppliedAt, v))
}

// AppliedAtNEQ applies the NEQ predicate on the "applied_at" field.
func AppliedAtNEQ(v time.Time) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldNEQ(FieldAppliedAt, v))
}

// AppliedAtIn applies the In predicate on the "applied_at" field.
func AppliedAtIn(vs ...time.Time) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldIn(FieldAppliedAt, vs...))
}

// AppliedAtNotIn applies the NotIn predicate on the "applied_at" field.
func AppliedAtNotIn(vs ...time.Time) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldNotIn(FieldAppliedAt, vs...))
}

// AppliedAtGT applies the GT predicate on the "applied_at" field.
func AppliedAtGT(v time.Time) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldGT(FieldAppliedAt, v))
}

// AppliedAtGTE applies the GTE predicate on the "applied_at" field.
func AppliedAtGTE(v time.Time) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldGTE(FieldAppliedAt, v))
}

// AppliedAtLT applies the LT predicate on the "applied_at" field.
func AppliedAtLT(v time.Time) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldLT(FieldAppliedAt, v))
}

// AppliedAtLTE applies the LTE predicate on the "applied_at" field.
func AppliedAtLTE(v time.Time) predicate.RolePanel {
	return predicate.RolePanel(sql.FieldLTE(FieldAppliedAt, v))
}

// AppliedAtIsNil applies the IsNil predicate on the "applied_at" field.
func AppliedAtIsNil() predicate.RolePanel {
	return predicate.RolePanel(sql.FieldIsNull(FieldAppliedAt))
}

// AppliedAtNotNil applies the NotNil predicate on the "applied_at" field.
func AppliedAtNotNil() predicate.RolePanel {
	return predicate.RolePanel(sql.FieldNotNull(FieldAppliedAt))
}

// HasGuild applies the HasEdge predicate on the "guild" edge.
func HasGuild() predicate.RolePanel {
	return predicate.RolePanel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GuildTable, GuildColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGuildWith applies the HasEdge predicate on the "guild" edge with a given conditions (other predicates).
func HasGuildWith(preds ...predicate.Guild) predicate.RolePanel {
	return predicate.RolePanel(func(s *sql.Selector) {
		step := newGuildStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPlacements applies the HasEdge predicate on the "placements" edge.
func HasPlacements() predicate.RolePanel {
	return predicate.RolePanel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PlacementsTable, PlacementsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlacementsWith applies the HasEdge predicate on the "placements" edge with a given conditions (other predicates).
func HasPlacementsWith(preds ...predicate.RolePanelPlaced) predicate.RolePanel {
	return predicate.RolePanel(func(s *sql.Selector) {
		step := newPlacementsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEdit applies the HasEdge predicate on the "edit" edge.
func HasEdit() predicate.RolePanel {
	return predicate.RolePanel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, EditTable, EditColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEditWith applies the HasEdge predicate on the "edit" edge with a given conditions (other predicates).
func HasEditWith(preds ...predicate.RolePanelEdit) predicate.RolePanel {
	return predicate.RolePanel(func(s *sql.Selector) {
		step := newEditStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RolePanel) predicate.RolePanel {
	return predicate.RolePanel(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RolePanel) predicate.RolePanel {
	return predicate.RolePanel(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RolePanel) predicate.RolePanel {
	return predicate.RolePanel(sql.NotPredicates(p))
}
