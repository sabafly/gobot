// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/google/uuid"
	"github.com/sabafly/gobot/ent/guild"
	"github.com/sabafly/gobot/ent/user"
	"github.com/sabafly/gobot/ent/wordsuffix"
)

// WordSuffixCreate is the builder for creating a WordSuffix entity.
type WordSuffixCreate struct {
	config
	mutation *WordSuffixMutation
	hooks    []Hook
}

// SetSuffix sets the "suffix" field.
func (wsc *WordSuffixCreate) SetSuffix(s string) *WordSuffixCreate {
	wsc.mutation.SetSuffix(s)
	return wsc
}

// SetExpired sets the "expired" field.
func (wsc *WordSuffixCreate) SetExpired(t time.Time) *WordSuffixCreate {
	wsc.mutation.SetExpired(t)
	return wsc
}

// SetNillableExpired sets the "expired" field if the given value is not nil.
func (wsc *WordSuffixCreate) SetNillableExpired(t *time.Time) *WordSuffixCreate {
	if t != nil {
		wsc.SetExpired(*t)
	}
	return wsc
}

// SetGuildID sets the "guild_id" field.
func (wsc *WordSuffixCreate) SetGuildID(s snowflake.ID) *WordSuffixCreate {
	wsc.mutation.SetGuildID(s)
	return wsc
}

// SetNillableGuildID sets the "guild_id" field if the given value is not nil.
func (wsc *WordSuffixCreate) SetNillableGuildID(s *snowflake.ID) *WordSuffixCreate {
	if s != nil {
		wsc.SetGuildID(*s)
	}
	return wsc
}

// SetRule sets the "rule" field.
func (wsc *WordSuffixCreate) SetRule(w wordsuffix.Rule) *WordSuffixCreate {
	wsc.mutation.SetRule(w)
	return wsc
}

// SetNillableRule sets the "rule" field if the given value is not nil.
func (wsc *WordSuffixCreate) SetNillableRule(w *wordsuffix.Rule) *WordSuffixCreate {
	if w != nil {
		wsc.SetRule(*w)
	}
	return wsc
}

// SetID sets the "id" field.
func (wsc *WordSuffixCreate) SetID(u uuid.UUID) *WordSuffixCreate {
	wsc.mutation.SetID(u)
	return wsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wsc *WordSuffixCreate) SetNillableID(u *uuid.UUID) *WordSuffixCreate {
	if u != nil {
		wsc.SetID(*u)
	}
	return wsc
}

// SetGuild sets the "guild" edge to the Guild entity.
func (wsc *WordSuffixCreate) SetGuild(g *Guild) *WordSuffixCreate {
	return wsc.SetGuildID(g.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (wsc *WordSuffixCreate) SetOwnerID(id snowflake.ID) *WordSuffixCreate {
	wsc.mutation.SetOwnerID(id)
	return wsc
}

// SetOwner sets the "owner" edge to the User entity.
func (wsc *WordSuffixCreate) SetOwner(u *User) *WordSuffixCreate {
	return wsc.SetOwnerID(u.ID)
}

// Mutation returns the WordSuffixMutation object of the builder.
func (wsc *WordSuffixCreate) Mutation() *WordSuffixMutation {
	return wsc.mutation
}

// Save creates the WordSuffix in the database.
func (wsc *WordSuffixCreate) Save(ctx context.Context) (*WordSuffix, error) {
	wsc.defaults()
	return withHooks(ctx, wsc.sqlSave, wsc.mutation, wsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wsc *WordSuffixCreate) SaveX(ctx context.Context) *WordSuffix {
	v, err := wsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wsc *WordSuffixCreate) Exec(ctx context.Context) error {
	_, err := wsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wsc *WordSuffixCreate) ExecX(ctx context.Context) {
	if err := wsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wsc *WordSuffixCreate) defaults() {
	if _, ok := wsc.mutation.Rule(); !ok {
		v := wordsuffix.DefaultRule
		wsc.mutation.SetRule(v)
	}
	if _, ok := wsc.mutation.ID(); !ok {
		v := wordsuffix.DefaultID()
		wsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wsc *WordSuffixCreate) check() error {
	if _, ok := wsc.mutation.Suffix(); !ok {
		return &ValidationError{Name: "suffix", err: errors.New(`ent: missing required field "WordSuffix.suffix"`)}
	}
	if v, ok := wsc.mutation.Suffix(); ok {
		if err := wordsuffix.SuffixValidator(v); err != nil {
			return &ValidationError{Name: "suffix", err: fmt.Errorf(`ent: validator failed for field "WordSuffix.suffix": %w`, err)}
		}
	}
	if _, ok := wsc.mutation.Rule(); !ok {
		return &ValidationError{Name: "rule", err: errors.New(`ent: missing required field "WordSuffix.rule"`)}
	}
	if v, ok := wsc.mutation.Rule(); ok {
		if err := wordsuffix.RuleValidator(v); err != nil {
			return &ValidationError{Name: "rule", err: fmt.Errorf(`ent: validator failed for field "WordSuffix.rule": %w`, err)}
		}
	}
	if _, ok := wsc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "WordSuffix.owner"`)}
	}
	return nil
}

func (wsc *WordSuffixCreate) sqlSave(ctx context.Context) (*WordSuffix, error) {
	if err := wsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wsc.mutation.id = &_node.ID
	wsc.mutation.done = true
	return _node, nil
}

func (wsc *WordSuffixCreate) createSpec() (*WordSuffix, *sqlgraph.CreateSpec) {
	var (
		_node = &WordSuffix{config: wsc.config}
		_spec = sqlgraph.NewCreateSpec(wordsuffix.Table, sqlgraph.NewFieldSpec(wordsuffix.FieldID, field.TypeUUID))
	)
	if id, ok := wsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wsc.mutation.Suffix(); ok {
		_spec.SetField(wordsuffix.FieldSuffix, field.TypeString, value)
		_node.Suffix = value
	}
	if value, ok := wsc.mutation.Expired(); ok {
		_spec.SetField(wordsuffix.FieldExpired, field.TypeTime, value)
		_node.Expired = &value
	}
	if value, ok := wsc.mutation.Rule(); ok {
		_spec.SetField(wordsuffix.FieldRule, field.TypeEnum, value)
		_node.Rule = value
	}
	if nodes := wsc.mutation.GuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   wordsuffix.GuildTable,
			Columns: []string{wordsuffix.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GuildID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wsc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wordsuffix.OwnerTable,
			Columns: []string{wordsuffix.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_word_suffix = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WordSuffixCreateBulk is the builder for creating many WordSuffix entities in bulk.
type WordSuffixCreateBulk struct {
	config
	err      error
	builders []*WordSuffixCreate
}

// Save creates the WordSuffix entities in the database.
func (wscb *WordSuffixCreateBulk) Save(ctx context.Context) ([]*WordSuffix, error) {
	if wscb.err != nil {
		return nil, wscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wscb.builders))
	nodes := make([]*WordSuffix, len(wscb.builders))
	mutators := make([]Mutator, len(wscb.builders))
	for i := range wscb.builders {
		func(i int, root context.Context) {
			builder := wscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WordSuffixMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wscb *WordSuffixCreateBulk) SaveX(ctx context.Context) []*WordSuffix {
	v, err := wscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wscb *WordSuffixCreateBulk) Exec(ctx context.Context) error {
	_, err := wscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wscb *WordSuffixCreateBulk) ExecX(ctx context.Context) {
	if err := wscb.Exec(ctx); err != nil {
		panic(err)
	}
}
