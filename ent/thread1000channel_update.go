// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/google/uuid"
	"github.com/sabafly/gobot/ent/guild"
	"github.com/sabafly/gobot/ent/predicate"
	"github.com/sabafly/gobot/ent/thread1000"
	"github.com/sabafly/gobot/ent/thread1000channel"
)

// Thread1000ChannelUpdate is the builder for updating Thread1000Channel entities.
type Thread1000ChannelUpdate struct {
	config
	hooks    []Hook
	mutation *Thread1000ChannelMutation
}

// Where appends a list predicates to the Thread1000ChannelUpdate builder.
func (tu *Thread1000ChannelUpdate) Where(ps ...predicate.Thread1000Channel) *Thread1000ChannelUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *Thread1000ChannelUpdate) SetName(s string) *Thread1000ChannelUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *Thread1000ChannelUpdate) SetNillableName(s *string) *Thread1000ChannelUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// ClearName clears the value of the "name" field.
func (tu *Thread1000ChannelUpdate) ClearName() *Thread1000ChannelUpdate {
	tu.mutation.ClearName()
	return tu
}

// SetAnonymousName sets the "anonymous_name" field.
func (tu *Thread1000ChannelUpdate) SetAnonymousName(s string) *Thread1000ChannelUpdate {
	tu.mutation.SetAnonymousName(s)
	return tu
}

// SetNillableAnonymousName sets the "anonymous_name" field if the given value is not nil.
func (tu *Thread1000ChannelUpdate) SetNillableAnonymousName(s *string) *Thread1000ChannelUpdate {
	if s != nil {
		tu.SetAnonymousName(*s)
	}
	return tu
}

// ClearAnonymousName clears the value of the "anonymous_name" field.
func (tu *Thread1000ChannelUpdate) ClearAnonymousName() *Thread1000ChannelUpdate {
	tu.mutation.ClearAnonymousName()
	return tu
}

// SetChannelID sets the "channel_id" field.
func (tu *Thread1000ChannelUpdate) SetChannelID(s snowflake.ID) *Thread1000ChannelUpdate {
	tu.mutation.ResetChannelID()
	tu.mutation.SetChannelID(s)
	return tu
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (tu *Thread1000ChannelUpdate) SetNillableChannelID(s *snowflake.ID) *Thread1000ChannelUpdate {
	if s != nil {
		tu.SetChannelID(*s)
	}
	return tu
}

// AddChannelID adds s to the "channel_id" field.
func (tu *Thread1000ChannelUpdate) AddChannelID(s snowflake.ID) *Thread1000ChannelUpdate {
	tu.mutation.AddChannelID(s)
	return tu
}

// SetGuildID sets the "guild" edge to the Guild entity by ID.
func (tu *Thread1000ChannelUpdate) SetGuildID(id snowflake.ID) *Thread1000ChannelUpdate {
	tu.mutation.SetGuildID(id)
	return tu
}

// SetGuild sets the "guild" edge to the Guild entity.
func (tu *Thread1000ChannelUpdate) SetGuild(g *Guild) *Thread1000ChannelUpdate {
	return tu.SetGuildID(g.ID)
}

// AddThreadIDs adds the "threads" edge to the Thread1000 entity by IDs.
func (tu *Thread1000ChannelUpdate) AddThreadIDs(ids ...uuid.UUID) *Thread1000ChannelUpdate {
	tu.mutation.AddThreadIDs(ids...)
	return tu
}

// AddThreads adds the "threads" edges to the Thread1000 entity.
func (tu *Thread1000ChannelUpdate) AddThreads(t ...*Thread1000) *Thread1000ChannelUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddThreadIDs(ids...)
}

// Mutation returns the Thread1000ChannelMutation object of the builder.
func (tu *Thread1000ChannelUpdate) Mutation() *Thread1000ChannelMutation {
	return tu.mutation
}

// ClearGuild clears the "guild" edge to the Guild entity.
func (tu *Thread1000ChannelUpdate) ClearGuild() *Thread1000ChannelUpdate {
	tu.mutation.ClearGuild()
	return tu
}

// ClearThreads clears all "threads" edges to the Thread1000 entity.
func (tu *Thread1000ChannelUpdate) ClearThreads() *Thread1000ChannelUpdate {
	tu.mutation.ClearThreads()
	return tu
}

// RemoveThreadIDs removes the "threads" edge to Thread1000 entities by IDs.
func (tu *Thread1000ChannelUpdate) RemoveThreadIDs(ids ...uuid.UUID) *Thread1000ChannelUpdate {
	tu.mutation.RemoveThreadIDs(ids...)
	return tu
}

// RemoveThreads removes "threads" edges to Thread1000 entities.
func (tu *Thread1000ChannelUpdate) RemoveThreads(t ...*Thread1000) *Thread1000ChannelUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveThreadIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *Thread1000ChannelUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *Thread1000ChannelUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *Thread1000ChannelUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *Thread1000ChannelUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *Thread1000ChannelUpdate) check() error {
	if _, ok := tu.mutation.GuildID(); tu.mutation.GuildCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Thread1000Channel.guild"`)
	}
	return nil
}

func (tu *Thread1000ChannelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(thread1000channel.Table, thread1000channel.Columns, sqlgraph.NewFieldSpec(thread1000channel.FieldID, field.TypeUUID))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(thread1000channel.FieldName, field.TypeString, value)
	}
	if tu.mutation.NameCleared() {
		_spec.ClearField(thread1000channel.FieldName, field.TypeString)
	}
	if value, ok := tu.mutation.AnonymousName(); ok {
		_spec.SetField(thread1000channel.FieldAnonymousName, field.TypeString, value)
	}
	if tu.mutation.AnonymousNameCleared() {
		_spec.ClearField(thread1000channel.FieldAnonymousName, field.TypeString)
	}
	if value, ok := tu.mutation.ChannelID(); ok {
		_spec.SetField(thread1000channel.FieldChannelID, field.TypeUint64, value)
	}
	if value, ok := tu.mutation.AddedChannelID(); ok {
		_spec.AddField(thread1000channel.FieldChannelID, field.TypeUint64, value)
	}
	if tu.mutation.GuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   thread1000channel.GuildTable,
			Columns: []string{thread1000channel.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.GuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   thread1000channel.GuildTable,
			Columns: []string{thread1000channel.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ThreadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   thread1000channel.ThreadsTable,
			Columns: []string{thread1000channel.ThreadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread1000.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedThreadsIDs(); len(nodes) > 0 && !tu.mutation.ThreadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   thread1000channel.ThreadsTable,
			Columns: []string{thread1000channel.ThreadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread1000.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ThreadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   thread1000channel.ThreadsTable,
			Columns: []string{thread1000channel.ThreadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread1000.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{thread1000channel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// Thread1000ChannelUpdateOne is the builder for updating a single Thread1000Channel entity.
type Thread1000ChannelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *Thread1000ChannelMutation
}

// SetName sets the "name" field.
func (tuo *Thread1000ChannelUpdateOne) SetName(s string) *Thread1000ChannelUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *Thread1000ChannelUpdateOne) SetNillableName(s *string) *Thread1000ChannelUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// ClearName clears the value of the "name" field.
func (tuo *Thread1000ChannelUpdateOne) ClearName() *Thread1000ChannelUpdateOne {
	tuo.mutation.ClearName()
	return tuo
}

// SetAnonymousName sets the "anonymous_name" field.
func (tuo *Thread1000ChannelUpdateOne) SetAnonymousName(s string) *Thread1000ChannelUpdateOne {
	tuo.mutation.SetAnonymousName(s)
	return tuo
}

// SetNillableAnonymousName sets the "anonymous_name" field if the given value is not nil.
func (tuo *Thread1000ChannelUpdateOne) SetNillableAnonymousName(s *string) *Thread1000ChannelUpdateOne {
	if s != nil {
		tuo.SetAnonymousName(*s)
	}
	return tuo
}

// ClearAnonymousName clears the value of the "anonymous_name" field.
func (tuo *Thread1000ChannelUpdateOne) ClearAnonymousName() *Thread1000ChannelUpdateOne {
	tuo.mutation.ClearAnonymousName()
	return tuo
}

// SetChannelID sets the "channel_id" field.
func (tuo *Thread1000ChannelUpdateOne) SetChannelID(s snowflake.ID) *Thread1000ChannelUpdateOne {
	tuo.mutation.ResetChannelID()
	tuo.mutation.SetChannelID(s)
	return tuo
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (tuo *Thread1000ChannelUpdateOne) SetNillableChannelID(s *snowflake.ID) *Thread1000ChannelUpdateOne {
	if s != nil {
		tuo.SetChannelID(*s)
	}
	return tuo
}

// AddChannelID adds s to the "channel_id" field.
func (tuo *Thread1000ChannelUpdateOne) AddChannelID(s snowflake.ID) *Thread1000ChannelUpdateOne {
	tuo.mutation.AddChannelID(s)
	return tuo
}

// SetGuildID sets the "guild" edge to the Guild entity by ID.
func (tuo *Thread1000ChannelUpdateOne) SetGuildID(id snowflake.ID) *Thread1000ChannelUpdateOne {
	tuo.mutation.SetGuildID(id)
	return tuo
}

// SetGuild sets the "guild" edge to the Guild entity.
func (tuo *Thread1000ChannelUpdateOne) SetGuild(g *Guild) *Thread1000ChannelUpdateOne {
	return tuo.SetGuildID(g.ID)
}

// AddThreadIDs adds the "threads" edge to the Thread1000 entity by IDs.
func (tuo *Thread1000ChannelUpdateOne) AddThreadIDs(ids ...uuid.UUID) *Thread1000ChannelUpdateOne {
	tuo.mutation.AddThreadIDs(ids...)
	return tuo
}

// AddThreads adds the "threads" edges to the Thread1000 entity.
func (tuo *Thread1000ChannelUpdateOne) AddThreads(t ...*Thread1000) *Thread1000ChannelUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddThreadIDs(ids...)
}

// Mutation returns the Thread1000ChannelMutation object of the builder.
func (tuo *Thread1000ChannelUpdateOne) Mutation() *Thread1000ChannelMutation {
	return tuo.mutation
}

// ClearGuild clears the "guild" edge to the Guild entity.
func (tuo *Thread1000ChannelUpdateOne) ClearGuild() *Thread1000ChannelUpdateOne {
	tuo.mutation.ClearGuild()
	return tuo
}

// ClearThreads clears all "threads" edges to the Thread1000 entity.
func (tuo *Thread1000ChannelUpdateOne) ClearThreads() *Thread1000ChannelUpdateOne {
	tuo.mutation.ClearThreads()
	return tuo
}

// RemoveThreadIDs removes the "threads" edge to Thread1000 entities by IDs.
func (tuo *Thread1000ChannelUpdateOne) RemoveThreadIDs(ids ...uuid.UUID) *Thread1000ChannelUpdateOne {
	tuo.mutation.RemoveThreadIDs(ids...)
	return tuo
}

// RemoveThreads removes "threads" edges to Thread1000 entities.
func (tuo *Thread1000ChannelUpdateOne) RemoveThreads(t ...*Thread1000) *Thread1000ChannelUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveThreadIDs(ids...)
}

// Where appends a list predicates to the Thread1000ChannelUpdate builder.
func (tuo *Thread1000ChannelUpdateOne) Where(ps ...predicate.Thread1000Channel) *Thread1000ChannelUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *Thread1000ChannelUpdateOne) Select(field string, fields ...string) *Thread1000ChannelUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Thread1000Channel entity.
func (tuo *Thread1000ChannelUpdateOne) Save(ctx context.Context) (*Thread1000Channel, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *Thread1000ChannelUpdateOne) SaveX(ctx context.Context) *Thread1000Channel {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *Thread1000ChannelUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *Thread1000ChannelUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *Thread1000ChannelUpdateOne) check() error {
	if _, ok := tuo.mutation.GuildID(); tuo.mutation.GuildCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Thread1000Channel.guild"`)
	}
	return nil
}

func (tuo *Thread1000ChannelUpdateOne) sqlSave(ctx context.Context) (_node *Thread1000Channel, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(thread1000channel.Table, thread1000channel.Columns, sqlgraph.NewFieldSpec(thread1000channel.FieldID, field.TypeUUID))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Thread1000Channel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, thread1000channel.FieldID)
		for _, f := range fields {
			if !thread1000channel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != thread1000channel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(thread1000channel.FieldName, field.TypeString, value)
	}
	if tuo.mutation.NameCleared() {
		_spec.ClearField(thread1000channel.FieldName, field.TypeString)
	}
	if value, ok := tuo.mutation.AnonymousName(); ok {
		_spec.SetField(thread1000channel.FieldAnonymousName, field.TypeString, value)
	}
	if tuo.mutation.AnonymousNameCleared() {
		_spec.ClearField(thread1000channel.FieldAnonymousName, field.TypeString)
	}
	if value, ok := tuo.mutation.ChannelID(); ok {
		_spec.SetField(thread1000channel.FieldChannelID, field.TypeUint64, value)
	}
	if value, ok := tuo.mutation.AddedChannelID(); ok {
		_spec.AddField(thread1000channel.FieldChannelID, field.TypeUint64, value)
	}
	if tuo.mutation.GuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   thread1000channel.GuildTable,
			Columns: []string{thread1000channel.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.GuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   thread1000channel.GuildTable,
			Columns: []string{thread1000channel.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ThreadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   thread1000channel.ThreadsTable,
			Columns: []string{thread1000channel.ThreadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread1000.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedThreadsIDs(); len(nodes) > 0 && !tuo.mutation.ThreadsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   thread1000channel.ThreadsTable,
			Columns: []string{thread1000channel.ThreadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread1000.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ThreadsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   thread1000channel.ThreadsTable,
			Columns: []string{thread1000channel.ThreadsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread1000.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Thread1000Channel{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{thread1000channel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
