// Code generated by ent, DO NOT EDIT.

package wordsuffix

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the wordsuffix type in the database.
	Label = "word_suffix"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSuffix holds the string denoting the suffix field in the database.
	FieldSuffix = "suffix"
	// FieldExpired holds the string denoting the expired field in the database.
	FieldExpired = "expired"
	// FieldGuildID holds the string denoting the guild_id field in the database.
	FieldGuildID = "guild_id"
	// FieldRule holds the string denoting the rule field in the database.
	FieldRule = "rule"
	// EdgeGuild holds the string denoting the guild edge name in mutations.
	EdgeGuild = "guild"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the wordsuffix in the database.
	Table = "word_suffixes"
	// GuildTable is the table that holds the guild relation/edge.
	GuildTable = "word_suffixes"
	// GuildInverseTable is the table name for the Guild entity.
	// It exists in this package in order to avoid circular dependency with the "guild" package.
	GuildInverseTable = "guilds"
	// GuildColumn is the table column denoting the guild relation/edge.
	GuildColumn = "guild_id"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "word_suffixes"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_word_suffix"
)

// Columns holds all SQL columns for wordsuffix fields.
var Columns = []string{
	FieldID,
	FieldSuffix,
	FieldExpired,
	FieldGuildID,
	FieldRule,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "word_suffixes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_word_suffix",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// SuffixValidator is a validator for the "suffix" field. It is called by the builders before save.
	SuffixValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Rule defines the type for the "rule" enum field.
type Rule string

// RuleWebhook is the default value of the Rule enum.
const DefaultRule = RuleWebhook

// Rule values.
const (
	RuleWebhook Rule = "webhook"
	RuleWarn    Rule = "warn"
	RuleDelete  Rule = "delete"
)

func (r Rule) String() string {
	return string(r)
}

// RuleValidator is a validator for the "rule" field enum values. It is called by the builders before save.
func RuleValidator(r Rule) error {
	switch r {
	case RuleWebhook, RuleWarn, RuleDelete:
		return nil
	default:
		return fmt.Errorf("wordsuffix: invalid enum value for rule field: %q", r)
	}
}

// OrderOption defines the ordering options for the WordSuffix queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySuffix orders the results by the suffix field.
func BySuffix(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSuffix, opts...).ToFunc()
}

// ByExpired orders the results by the expired field.
func ByExpired(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpired, opts...).ToFunc()
}

// ByGuildID orders the results by the guild_id field.
func ByGuildID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGuildID, opts...).ToFunc()
}

// ByRule orders the results by the rule field.
func ByRule(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRule, opts...).ToFunc()
}

// ByGuildField orders the results by guild field.
func ByGuildField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGuildStep(), sql.OrderByField(field, opts...))
	}
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}
func newGuildStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GuildInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, GuildTable, GuildColumn),
	)
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
