// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/google/uuid"
	"github.com/sabafly/gobot/ent/chinchiroplayer"
	"github.com/sabafly/gobot/ent/chinchirosession"
	"github.com/sabafly/gobot/ent/user"
)

// ChinchiroPlayer is the model entity for the ChinchiroPlayer schema.
type ChinchiroPlayer struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Point holds the value of the "point" field.
	Point int `json:"point,omitempty"`
	// IsOwner holds the value of the "is_owner" field.
	IsOwner bool `json:"is_owner,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID snowflake.ID `json:"user_id,omitempty"`
	// Bet holds the value of the "bet" field.
	Bet *int `json:"bet,omitempty"`
	// サイコロの目
	Dices []int `json:"dices,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChinchiroPlayerQuery when eager-loading is set.
	Edges                     ChinchiroPlayerEdges `json:"edges"`
	chinchiro_session_players *uuid.UUID
	selectValues              sql.SelectValues
}

// ChinchiroPlayerEdges holds the relations/edges for other nodes in the graph.
type ChinchiroPlayerEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Session holds the value of the session edge.
	Session *ChinchiroSession `json:"session,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChinchiroPlayerEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// SessionOrErr returns the Session value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChinchiroPlayerEdges) SessionOrErr() (*ChinchiroSession, error) {
	if e.Session != nil {
		return e.Session, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: chinchirosession.Label}
	}
	return nil, &NotLoadedError{edge: "session"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChinchiroPlayer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chinchiroplayer.FieldDices:
			values[i] = new([]byte)
		case chinchiroplayer.FieldIsOwner:
			values[i] = new(sql.NullBool)
		case chinchiroplayer.FieldPoint, chinchiroplayer.FieldUserID, chinchiroplayer.FieldBet:
			values[i] = new(sql.NullInt64)
		case chinchiroplayer.FieldID:
			values[i] = new(uuid.UUID)
		case chinchiroplayer.ForeignKeys[0]: // chinchiro_session_players
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChinchiroPlayer fields.
func (cp *ChinchiroPlayer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chinchiroplayer.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cp.ID = *value
			}
		case chinchiroplayer.FieldPoint:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field point", values[i])
			} else if value.Valid {
				cp.Point = int(value.Int64)
			}
		case chinchiroplayer.FieldIsOwner:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_owner", values[i])
			} else if value.Valid {
				cp.IsOwner = value.Bool
			}
		case chinchiroplayer.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				cp.UserID = snowflake.ID(value.Int64)
			}
		case chinchiroplayer.FieldBet:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bet", values[i])
			} else if value.Valid {
				cp.Bet = new(int)
				*cp.Bet = int(value.Int64)
			}
		case chinchiroplayer.FieldDices:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field dices", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cp.Dices); err != nil {
					return fmt.Errorf("unmarshal field dices: %w", err)
				}
			}
		case chinchiroplayer.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field chinchiro_session_players", values[i])
			} else if value.Valid {
				cp.chinchiro_session_players = new(uuid.UUID)
				*cp.chinchiro_session_players = *value.S.(*uuid.UUID)
			}
		default:
			cp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChinchiroPlayer.
// This includes values selected through modifiers, order, etc.
func (cp *ChinchiroPlayer) Value(name string) (ent.Value, error) {
	return cp.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the ChinchiroPlayer entity.
func (cp *ChinchiroPlayer) QueryUser() *UserQuery {
	return NewChinchiroPlayerClient(cp.config).QueryUser(cp)
}

// QuerySession queries the "session" edge of the ChinchiroPlayer entity.
func (cp *ChinchiroPlayer) QuerySession() *ChinchiroSessionQuery {
	return NewChinchiroPlayerClient(cp.config).QuerySession(cp)
}

// Update returns a builder for updating this ChinchiroPlayer.
// Note that you need to call ChinchiroPlayer.Unwrap() before calling this method if this ChinchiroPlayer
// was returned from a transaction, and the transaction was committed or rolled back.
func (cp *ChinchiroPlayer) Update() *ChinchiroPlayerUpdateOne {
	return NewChinchiroPlayerClient(cp.config).UpdateOne(cp)
}

// Unwrap unwraps the ChinchiroPlayer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cp *ChinchiroPlayer) Unwrap() *ChinchiroPlayer {
	_tx, ok := cp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChinchiroPlayer is not a transactional entity")
	}
	cp.config.driver = _tx.drv
	return cp
}

// String implements the fmt.Stringer.
func (cp *ChinchiroPlayer) String() string {
	var builder strings.Builder
	builder.WriteString("ChinchiroPlayer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cp.ID))
	builder.WriteString("point=")
	builder.WriteString(fmt.Sprintf("%v", cp.Point))
	builder.WriteString(", ")
	builder.WriteString("is_owner=")
	builder.WriteString(fmt.Sprintf("%v", cp.IsOwner))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", cp.UserID))
	builder.WriteString(", ")
	if v := cp.Bet; v != nil {
		builder.WriteString("bet=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("dices=")
	builder.WriteString(fmt.Sprintf("%v", cp.Dices))
	builder.WriteByte(')')
	return builder.String()
}

// ChinchiroPlayers is a parsable slice of ChinchiroPlayer.
type ChinchiroPlayers []*ChinchiroPlayer
