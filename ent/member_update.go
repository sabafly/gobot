// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/sabafly/gobot/ent/guild"
	"github.com/sabafly/gobot/ent/member"
	"github.com/sabafly/gobot/ent/predicate"
	"github.com/sabafly/gobot/ent/user"
	"github.com/sabafly/gobot/internal/permissions"
)

// MemberUpdate is the builder for updating Member entities.
type MemberUpdate struct {
	config
	hooks    []Hook
	mutation *MemberMutation
}

// Where appends a list predicates to the MemberUpdate builder.
func (mu *MemberUpdate) Where(ps ...predicate.Member) *MemberUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetPermission sets the "permission" field.
func (mu *MemberUpdate) SetPermission(pe permissions.Permission) *MemberUpdate {
	mu.mutation.SetPermission(pe)
	return mu
}

// AppendPermission appends pe to the "permission" field.
func (mu *MemberUpdate) AppendPermission(pe permissions.Permission) *MemberUpdate {
	mu.mutation.AppendPermission(pe)
	return mu
}

// ClearPermission clears the value of the "permission" field.
func (mu *MemberUpdate) ClearPermission() *MemberUpdate {
	mu.mutation.ClearPermission()
	return mu
}

// AddGuildIDs adds the "guild" edge to the Guild entity by IDs.
func (mu *MemberUpdate) AddGuildIDs(ids ...snowflake.ID) *MemberUpdate {
	mu.mutation.AddGuildIDs(ids...)
	return mu
}

// AddGuild adds the "guild" edges to the Guild entity.
func (mu *MemberUpdate) AddGuild(g ...*Guild) *MemberUpdate {
	ids := make([]snowflake.ID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return mu.AddGuildIDs(ids...)
}

// AddOwnerIDs adds the "owner" edge to the User entity by IDs.
func (mu *MemberUpdate) AddOwnerIDs(ids ...snowflake.ID) *MemberUpdate {
	mu.mutation.AddOwnerIDs(ids...)
	return mu
}

// AddOwner adds the "owner" edges to the User entity.
func (mu *MemberUpdate) AddOwner(u ...*User) *MemberUpdate {
	ids := make([]snowflake.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.AddOwnerIDs(ids...)
}

// Mutation returns the MemberMutation object of the builder.
func (mu *MemberUpdate) Mutation() *MemberMutation {
	return mu.mutation
}

// ClearGuild clears all "guild" edges to the Guild entity.
func (mu *MemberUpdate) ClearGuild() *MemberUpdate {
	mu.mutation.ClearGuild()
	return mu
}

// RemoveGuildIDs removes the "guild" edge to Guild entities by IDs.
func (mu *MemberUpdate) RemoveGuildIDs(ids ...snowflake.ID) *MemberUpdate {
	mu.mutation.RemoveGuildIDs(ids...)
	return mu
}

// RemoveGuild removes "guild" edges to Guild entities.
func (mu *MemberUpdate) RemoveGuild(g ...*Guild) *MemberUpdate {
	ids := make([]snowflake.ID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return mu.RemoveGuildIDs(ids...)
}

// ClearOwner clears all "owner" edges to the User entity.
func (mu *MemberUpdate) ClearOwner() *MemberUpdate {
	mu.mutation.ClearOwner()
	return mu
}

// RemoveOwnerIDs removes the "owner" edge to User entities by IDs.
func (mu *MemberUpdate) RemoveOwnerIDs(ids ...snowflake.ID) *MemberUpdate {
	mu.mutation.RemoveOwnerIDs(ids...)
	return mu
}

// RemoveOwner removes "owner" edges to User entities.
func (mu *MemberUpdate) RemoveOwner(u ...*User) *MemberUpdate {
	ids := make([]snowflake.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.RemoveOwnerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MemberUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MemberUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MemberUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MemberUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(member.Table, member.Columns, sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Permission(); ok {
		_spec.SetField(member.FieldPermission, field.TypeJSON, value)
	}
	if value, ok := mu.mutation.AppendedPermission(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, member.FieldPermission, value)
		})
	}
	if mu.mutation.PermissionCleared() {
		_spec.ClearField(member.FieldPermission, field.TypeJSON)
	}
	if mu.mutation.GuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   member.GuildTable,
			Columns: member.GuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedGuildIDs(); len(nodes) > 0 && !mu.mutation.GuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   member.GuildTable,
			Columns: member.GuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.GuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   member.GuildTable,
			Columns: member.GuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   member.OwnerTable,
			Columns: member.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedOwnerIDs(); len(nodes) > 0 && !mu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   member.OwnerTable,
			Columns: member.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   member.OwnerTable,
			Columns: member.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MemberUpdateOne is the builder for updating a single Member entity.
type MemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberMutation
}

// SetPermission sets the "permission" field.
func (muo *MemberUpdateOne) SetPermission(pe permissions.Permission) *MemberUpdateOne {
	muo.mutation.SetPermission(pe)
	return muo
}

// AppendPermission appends pe to the "permission" field.
func (muo *MemberUpdateOne) AppendPermission(pe permissions.Permission) *MemberUpdateOne {
	muo.mutation.AppendPermission(pe)
	return muo
}

// ClearPermission clears the value of the "permission" field.
func (muo *MemberUpdateOne) ClearPermission() *MemberUpdateOne {
	muo.mutation.ClearPermission()
	return muo
}

// AddGuildIDs adds the "guild" edge to the Guild entity by IDs.
func (muo *MemberUpdateOne) AddGuildIDs(ids ...snowflake.ID) *MemberUpdateOne {
	muo.mutation.AddGuildIDs(ids...)
	return muo
}

// AddGuild adds the "guild" edges to the Guild entity.
func (muo *MemberUpdateOne) AddGuild(g ...*Guild) *MemberUpdateOne {
	ids := make([]snowflake.ID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return muo.AddGuildIDs(ids...)
}

// AddOwnerIDs adds the "owner" edge to the User entity by IDs.
func (muo *MemberUpdateOne) AddOwnerIDs(ids ...snowflake.ID) *MemberUpdateOne {
	muo.mutation.AddOwnerIDs(ids...)
	return muo
}

// AddOwner adds the "owner" edges to the User entity.
func (muo *MemberUpdateOne) AddOwner(u ...*User) *MemberUpdateOne {
	ids := make([]snowflake.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.AddOwnerIDs(ids...)
}

// Mutation returns the MemberMutation object of the builder.
func (muo *MemberUpdateOne) Mutation() *MemberMutation {
	return muo.mutation
}

// ClearGuild clears all "guild" edges to the Guild entity.
func (muo *MemberUpdateOne) ClearGuild() *MemberUpdateOne {
	muo.mutation.ClearGuild()
	return muo
}

// RemoveGuildIDs removes the "guild" edge to Guild entities by IDs.
func (muo *MemberUpdateOne) RemoveGuildIDs(ids ...snowflake.ID) *MemberUpdateOne {
	muo.mutation.RemoveGuildIDs(ids...)
	return muo
}

// RemoveGuild removes "guild" edges to Guild entities.
func (muo *MemberUpdateOne) RemoveGuild(g ...*Guild) *MemberUpdateOne {
	ids := make([]snowflake.ID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return muo.RemoveGuildIDs(ids...)
}

// ClearOwner clears all "owner" edges to the User entity.
func (muo *MemberUpdateOne) ClearOwner() *MemberUpdateOne {
	muo.mutation.ClearOwner()
	return muo
}

// RemoveOwnerIDs removes the "owner" edge to User entities by IDs.
func (muo *MemberUpdateOne) RemoveOwnerIDs(ids ...snowflake.ID) *MemberUpdateOne {
	muo.mutation.RemoveOwnerIDs(ids...)
	return muo
}

// RemoveOwner removes "owner" edges to User entities.
func (muo *MemberUpdateOne) RemoveOwner(u ...*User) *MemberUpdateOne {
	ids := make([]snowflake.ID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.RemoveOwnerIDs(ids...)
}

// Where appends a list predicates to the MemberUpdate builder.
func (muo *MemberUpdateOne) Where(ps ...predicate.Member) *MemberUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MemberUpdateOne) Select(field string, fields ...string) *MemberUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Member entity.
func (muo *MemberUpdateOne) Save(ctx context.Context) (*Member, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MemberUpdateOne) SaveX(ctx context.Context) *Member {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MemberUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MemberUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MemberUpdateOne) sqlSave(ctx context.Context) (_node *Member, err error) {
	_spec := sqlgraph.NewUpdateSpec(member.Table, member.Columns, sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Member.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, member.FieldID)
		for _, f := range fields {
			if !member.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != member.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Permission(); ok {
		_spec.SetField(member.FieldPermission, field.TypeJSON, value)
	}
	if value, ok := muo.mutation.AppendedPermission(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, member.FieldPermission, value)
		})
	}
	if muo.mutation.PermissionCleared() {
		_spec.ClearField(member.FieldPermission, field.TypeJSON)
	}
	if muo.mutation.GuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   member.GuildTable,
			Columns: member.GuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedGuildIDs(); len(nodes) > 0 && !muo.mutation.GuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   member.GuildTable,
			Columns: member.GuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.GuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   member.GuildTable,
			Columns: member.GuildPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   member.OwnerTable,
			Columns: member.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedOwnerIDs(); len(nodes) > 0 && !muo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   member.OwnerTable,
			Columns: member.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   member.OwnerTable,
			Columns: member.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Member{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
