// Code generated by ent, DO NOT EDIT.

package rolepanelplaced

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/disgoorg/disgo/discord"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the rolepanelplaced type in the database.
	Label = "role_panel_placed"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMessageID holds the string denoting the message_id field in the database.
	FieldMessageID = "message_id"
	// FieldChannelID holds the string denoting the channel_id field in the database.
	FieldChannelID = "channel_id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldButtonType holds the string denoting the button_type field in the database.
	FieldButtonType = "button_type"
	// FieldShowName holds the string denoting the show_name field in the database.
	FieldShowName = "show_name"
	// FieldFoldingSelectMenu holds the string denoting the folding_select_menu field in the database.
	FieldFoldingSelectMenu = "folding_select_menu"
	// FieldHideNotice holds the string denoting the hide_notice field in the database.
	FieldHideNotice = "hide_notice"
	// FieldUseDisplayName holds the string denoting the use_display_name field in the database.
	FieldUseDisplayName = "use_display_name"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUses holds the string denoting the uses field in the database.
	FieldUses = "uses"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldRoles holds the string denoting the roles field in the database.
	FieldRoles = "roles"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeGuild holds the string denoting the guild edge name in mutations.
	EdgeGuild = "guild"
	// EdgeRolePanel holds the string denoting the role_panel edge name in mutations.
	EdgeRolePanel = "role_panel"
	// Table holds the table name of the rolepanelplaced in the database.
	Table = "role_panel_placeds"
	// GuildTable is the table that holds the guild relation/edge.
	GuildTable = "role_panel_placeds"
	// GuildInverseTable is the table name for the Guild entity.
	// It exists in this package in order to avoid circular dependency with the "guild" package.
	GuildInverseTable = "guilds"
	// GuildColumn is the table column denoting the guild relation/edge.
	GuildColumn = "guild_role_panel_placements"
	// RolePanelTable is the table that holds the role_panel relation/edge.
	RolePanelTable = "role_panel_placeds"
	// RolePanelInverseTable is the table name for the RolePanel entity.
	// It exists in this package in order to avoid circular dependency with the "rolepanel" package.
	RolePanelInverseTable = "role_panels"
	// RolePanelColumn is the table column denoting the role_panel relation/edge.
	RolePanelColumn = "role_panel_placements"
)

// Columns holds all SQL columns for rolepanelplaced fields.
var Columns = []string{
	FieldID,
	FieldMessageID,
	FieldChannelID,
	FieldType,
	FieldButtonType,
	FieldShowName,
	FieldFoldingSelectMenu,
	FieldHideNotice,
	FieldUseDisplayName,
	FieldCreatedAt,
	FieldUses,
	FieldName,
	FieldDescription,
	FieldRoles,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "role_panel_placeds"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"guild_role_panel_placements",
	"role_panel_placements",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultButtonType holds the default value on creation for the "button_type" field.
	DefaultButtonType discord.ButtonStyle
	// ButtonTypeValidator is a validator for the "button_type" field. It is called by the builders before save.
	ButtonTypeValidator func(int) error
	// DefaultShowName holds the default value on creation for the "show_name" field.
	DefaultShowName bool
	// DefaultFoldingSelectMenu holds the default value on creation for the "folding_select_menu" field.
	DefaultFoldingSelectMenu bool
	// DefaultHideNotice holds the default value on creation for the "hide_notice" field.
	DefaultHideNotice bool
	// DefaultUseDisplayName holds the default value on creation for the "use_display_name" field.
	DefaultUseDisplayName bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUses holds the default value on creation for the "uses" field.
	DefaultUses int
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeButton     Type = "button"
	TypeReaction   Type = "reaction"
	TypeSelectMenu Type = "select_menu"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeButton, TypeReaction, TypeSelectMenu:
		return nil
	default:
		return fmt.Errorf("rolepanelplaced: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the RolePanelPlaced queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMessageID orders the results by the message_id field.
func ByMessageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessageID, opts...).ToFunc()
}

// ByChannelID orders the results by the channel_id field.
func ByChannelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannelID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByButtonType orders the results by the button_type field.
func ByButtonType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldButtonType, opts...).ToFunc()
}

// ByShowName orders the results by the show_name field.
func ByShowName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShowName, opts...).ToFunc()
}

// ByFoldingSelectMenu orders the results by the folding_select_menu field.
func ByFoldingSelectMenu(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFoldingSelectMenu, opts...).ToFunc()
}

// ByHideNotice orders the results by the hide_notice field.
func ByHideNotice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHideNotice, opts...).ToFunc()
}

// ByUseDisplayName orders the results by the use_display_name field.
func ByUseDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseDisplayName, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUses orders the results by the uses field.
func ByUses(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUses, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByGuildField orders the results by guild field.
func ByGuildField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGuildStep(), sql.OrderByField(field, opts...))
	}
}

// ByRolePanelField orders the results by role_panel field.
func ByRolePanelField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRolePanelStep(), sql.OrderByField(field, opts...))
	}
}
func newGuildStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GuildInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GuildTable, GuildColumn),
	)
}
func newRolePanelStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RolePanelInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RolePanelTable, RolePanelColumn),
	)
}
