// Code generated by ent, DO NOT EDIT.

package messagepin

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/sabafly/gobot/ent/schema"
)

const (
	// Label holds the string label denoting the messagepin type in the database.
	Label = "message_pin"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldChannelID holds the string denoting the channel_id field in the database.
	FieldChannelID = "channel_id"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldEmbeds holds the string denoting the embeds field in the database.
	FieldEmbeds = "embeds"
	// FieldBeforeID holds the string denoting the before_id field in the database.
	FieldBeforeID = "before_id"
	// FieldRateLimit holds the string denoting the rate_limit field in the database.
	FieldRateLimit = "rate_limit"
	// EdgeGuild holds the string denoting the guild edge name in mutations.
	EdgeGuild = "guild"
	// Table holds the table name of the messagepin in the database.
	Table = "message_pins"
	// GuildTable is the table that holds the guild relation/edge.
	GuildTable = "message_pins"
	// GuildInverseTable is the table name for the Guild entity.
	// It exists in this package in order to avoid circular dependency with the "guild" package.
	GuildInverseTable = "guilds"
	// GuildColumn is the table column denoting the guild relation/edge.
	GuildColumn = "guild_message_pins"
)

// Columns holds all SQL columns for messagepin fields.
var Columns = []string{
	FieldID,
	FieldChannelID,
	FieldContent,
	FieldEmbeds,
	FieldBeforeID,
	FieldRateLimit,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "message_pins"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"guild_message_pins",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultRateLimit holds the default value on creation for the "rate_limit" field.
	DefaultRateLimit schema.RateLimit
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the MessagePin queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByChannelID orders the results by the channel_id field.
func ByChannelID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannelID, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByBeforeID orders the results by the before_id field.
func ByBeforeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBeforeID, opts...).ToFunc()
}

// ByGuildField orders the results by guild field.
func ByGuildField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGuildStep(), sql.OrderByField(field, opts...))
	}
}
func newGuildStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GuildInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GuildTable, GuildColumn),
	)
}
