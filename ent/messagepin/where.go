// Code generated by ent, DO NOT EDIT.

package messagepin

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/google/uuid"
	"github.com/sabafly/gobot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.MessagePin {
	return predicate.MessagePin(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.MessagePin {
	return predicate.MessagePin(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.MessagePin {
	return predicate.MessagePin(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.MessagePin {
	return predicate.MessagePin(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.MessagePin {
	return predicate.MessagePin(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.MessagePin {
	return predicate.MessagePin(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.MessagePin {
	return predicate.MessagePin(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.MessagePin {
	return predicate.MessagePin(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.MessagePin {
	return predicate.MessagePin(sql.FieldLTE(FieldID, id))
}

// ChannelID applies equality check predicate on the "channel_id" field. It's identical to ChannelIDEQ.
func ChannelID(v snowflake.ID) predicate.MessagePin {
	vc := uint64(v)
	return predicate.MessagePin(sql.FieldEQ(FieldChannelID, vc))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.MessagePin {
	return predicate.MessagePin(sql.FieldEQ(FieldContent, v))
}

// BeforeID applies equality check predicate on the "before_id" field. It's identical to BeforeIDEQ.
func BeforeID(v snowflake.ID) predicate.MessagePin {
	vc := uint64(v)
	return predicate.MessagePin(sql.FieldEQ(FieldBeforeID, vc))
}

// ChannelIDEQ applies the EQ predicate on the "channel_id" field.
func ChannelIDEQ(v snowflake.ID) predicate.MessagePin {
	vc := uint64(v)
	return predicate.MessagePin(sql.FieldEQ(FieldChannelID, vc))
}

// ChannelIDNEQ applies the NEQ predicate on the "channel_id" field.
func ChannelIDNEQ(v snowflake.ID) predicate.MessagePin {
	vc := uint64(v)
	return predicate.MessagePin(sql.FieldNEQ(FieldChannelID, vc))
}

// ChannelIDIn applies the In predicate on the "channel_id" field.
func ChannelIDIn(vs ...snowflake.ID) predicate.MessagePin {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.MessagePin(sql.FieldIn(FieldChannelID, v...))
}

// ChannelIDNotIn applies the NotIn predicate on the "channel_id" field.
func ChannelIDNotIn(vs ...snowflake.ID) predicate.MessagePin {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.MessagePin(sql.FieldNotIn(FieldChannelID, v...))
}

// ChannelIDGT applies the GT predicate on the "channel_id" field.
func ChannelIDGT(v snowflake.ID) predicate.MessagePin {
	vc := uint64(v)
	return predicate.MessagePin(sql.FieldGT(FieldChannelID, vc))
}

// ChannelIDGTE applies the GTE predicate on the "channel_id" field.
func ChannelIDGTE(v snowflake.ID) predicate.MessagePin {
	vc := uint64(v)
	return predicate.MessagePin(sql.FieldGTE(FieldChannelID, vc))
}

// ChannelIDLT applies the LT predicate on the "channel_id" field.
func ChannelIDLT(v snowflake.ID) predicate.MessagePin {
	vc := uint64(v)
	return predicate.MessagePin(sql.FieldLT(FieldChannelID, vc))
}

// ChannelIDLTE applies the LTE predicate on the "channel_id" field.
func ChannelIDLTE(v snowflake.ID) predicate.MessagePin {
	vc := uint64(v)
	return predicate.MessagePin(sql.FieldLTE(FieldChannelID, vc))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.MessagePin {
	return predicate.MessagePin(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.MessagePin {
	return predicate.MessagePin(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.MessagePin {
	return predicate.MessagePin(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.MessagePin {
	return predicate.MessagePin(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.MessagePin {
	return predicate.MessagePin(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.MessagePin {
	return predicate.MessagePin(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.MessagePin {
	return predicate.MessagePin(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.MessagePin {
	return predicate.MessagePin(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.MessagePin {
	return predicate.MessagePin(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.MessagePin {
	return predicate.MessagePin(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.MessagePin {
	return predicate.MessagePin(sql.FieldHasSuffix(FieldContent, v))
}

// ContentIsNil applies the IsNil predicate on the "content" field.
func ContentIsNil() predicate.MessagePin {
	return predicate.MessagePin(sql.FieldIsNull(FieldContent))
}

// ContentNotNil applies the NotNil predicate on the "content" field.
func ContentNotNil() predicate.MessagePin {
	return predicate.MessagePin(sql.FieldNotNull(FieldContent))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.MessagePin {
	return predicate.MessagePin(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.MessagePin {
	return predicate.MessagePin(sql.FieldContainsFold(FieldContent, v))
}

// EmbedsIsNil applies the IsNil predicate on the "embeds" field.
func EmbedsIsNil() predicate.MessagePin {
	return predicate.MessagePin(sql.FieldIsNull(FieldEmbeds))
}

// EmbedsNotNil applies the NotNil predicate on the "embeds" field.
func EmbedsNotNil() predicate.MessagePin {
	return predicate.MessagePin(sql.FieldNotNull(FieldEmbeds))
}

// BeforeIDEQ applies the EQ predicate on the "before_id" field.
func BeforeIDEQ(v snowflake.ID) predicate.MessagePin {
	vc := uint64(v)
	return predicate.MessagePin(sql.FieldEQ(FieldBeforeID, vc))
}

// BeforeIDNEQ applies the NEQ predicate on the "before_id" field.
func BeforeIDNEQ(v snowflake.ID) predicate.MessagePin {
	vc := uint64(v)
	return predicate.MessagePin(sql.FieldNEQ(FieldBeforeID, vc))
}

// BeforeIDIn applies the In predicate on the "before_id" field.
func BeforeIDIn(vs ...snowflake.ID) predicate.MessagePin {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.MessagePin(sql.FieldIn(FieldBeforeID, v...))
}

// BeforeIDNotIn applies the NotIn predicate on the "before_id" field.
func BeforeIDNotIn(vs ...snowflake.ID) predicate.MessagePin {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.MessagePin(sql.FieldNotIn(FieldBeforeID, v...))
}

// BeforeIDGT applies the GT predicate on the "before_id" field.
func BeforeIDGT(v snowflake.ID) predicate.MessagePin {
	vc := uint64(v)
	return predicate.MessagePin(sql.FieldGT(FieldBeforeID, vc))
}

// BeforeIDGTE applies the GTE predicate on the "before_id" field.
func BeforeIDGTE(v snowflake.ID) predicate.MessagePin {
	vc := uint64(v)
	return predicate.MessagePin(sql.FieldGTE(FieldBeforeID, vc))
}

// BeforeIDLT applies the LT predicate on the "before_id" field.
func BeforeIDLT(v snowflake.ID) predicate.MessagePin {
	vc := uint64(v)
	return predicate.MessagePin(sql.FieldLT(FieldBeforeID, vc))
}

// BeforeIDLTE applies the LTE predicate on the "before_id" field.
func BeforeIDLTE(v snowflake.ID) predicate.MessagePin {
	vc := uint64(v)
	return predicate.MessagePin(sql.FieldLTE(FieldBeforeID, vc))
}

// BeforeIDIsNil applies the IsNil predicate on the "before_id" field.
func BeforeIDIsNil() predicate.MessagePin {
	return predicate.MessagePin(sql.FieldIsNull(FieldBeforeID))
}

// BeforeIDNotNil applies the NotNil predicate on the "before_id" field.
func BeforeIDNotNil() predicate.MessagePin {
	return predicate.MessagePin(sql.FieldNotNull(FieldBeforeID))
}

// HasGuild applies the HasEdge predicate on the "guild" edge.
func HasGuild() predicate.MessagePin {
	return predicate.MessagePin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GuildTable, GuildColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGuildWith applies the HasEdge predicate on the "guild" edge with a given conditions (other predicates).
func HasGuildWith(preds ...predicate.Guild) predicate.MessagePin {
	return predicate.MessagePin(func(s *sql.Selector) {
		step := newGuildStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MessagePin) predicate.MessagePin {
	return predicate.MessagePin(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MessagePin) predicate.MessagePin {
	return predicate.MessagePin(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MessagePin) predicate.MessagePin {
	return predicate.MessagePin(sql.NotPredicates(p))
}
