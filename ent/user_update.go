// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/disgoorg/disgo/discord"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/google/uuid"
	"github.com/sabafly/gobot/ent/guild"
	"github.com/sabafly/gobot/ent/member"
	"github.com/sabafly/gobot/ent/predicate"
	"github.com/sabafly/gobot/ent/user"
	"github.com/sabafly/gobot/ent/wordsuffix"
	"github.com/sabafly/gobot/internal/xppoint"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// SetLocale sets the "locale" field.
func (uu *UserUpdate) SetLocale(d discord.Locale) *UserUpdate {
	uu.mutation.SetLocale(d)
	return uu
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLocale(d *discord.Locale) *UserUpdate {
	if d != nil {
		uu.SetLocale(*d)
	}
	return uu
}

// SetXp sets the "xp" field.
func (uu *UserUpdate) SetXp(x xppoint.XP) *UserUpdate {
	uu.mutation.ResetXp()
	uu.mutation.SetXp(x)
	return uu
}

// SetNillableXp sets the "xp" field if the given value is not nil.
func (uu *UserUpdate) SetNillableXp(x *xppoint.XP) *UserUpdate {
	if x != nil {
		uu.SetXp(*x)
	}
	return uu
}

// AddXp adds x to the "xp" field.
func (uu *UserUpdate) AddXp(x xppoint.XP) *UserUpdate {
	uu.mutation.AddXp(x)
	return uu
}

// AddOwnGuildIDs adds the "own_guilds" edge to the Guild entity by IDs.
func (uu *UserUpdate) AddOwnGuildIDs(ids ...snowflake.ID) *UserUpdate {
	uu.mutation.AddOwnGuildIDs(ids...)
	return uu
}

// AddOwnGuilds adds the "own_guilds" edges to the Guild entity.
func (uu *UserUpdate) AddOwnGuilds(g ...*Guild) *UserUpdate {
	ids := make([]snowflake.ID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.AddOwnGuildIDs(ids...)
}

// AddGuildIDs adds the "guilds" edge to the Member entity by IDs.
func (uu *UserUpdate) AddGuildIDs(ids ...int) *UserUpdate {
	uu.mutation.AddGuildIDs(ids...)
	return uu
}

// AddGuilds adds the "guilds" edges to the Member entity.
func (uu *UserUpdate) AddGuilds(m ...*Member) *UserUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.AddGuildIDs(ids...)
}

// AddWordSuffixIDs adds the "word_suffix" edge to the WordSuffix entity by IDs.
func (uu *UserUpdate) AddWordSuffixIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddWordSuffixIDs(ids...)
	return uu
}

// AddWordSuffix adds the "word_suffix" edges to the WordSuffix entity.
func (uu *UserUpdate) AddWordSuffix(w ...*WordSuffix) *UserUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uu.AddWordSuffixIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearOwnGuilds clears all "own_guilds" edges to the Guild entity.
func (uu *UserUpdate) ClearOwnGuilds() *UserUpdate {
	uu.mutation.ClearOwnGuilds()
	return uu
}

// RemoveOwnGuildIDs removes the "own_guilds" edge to Guild entities by IDs.
func (uu *UserUpdate) RemoveOwnGuildIDs(ids ...snowflake.ID) *UserUpdate {
	uu.mutation.RemoveOwnGuildIDs(ids...)
	return uu
}

// RemoveOwnGuilds removes "own_guilds" edges to Guild entities.
func (uu *UserUpdate) RemoveOwnGuilds(g ...*Guild) *UserUpdate {
	ids := make([]snowflake.ID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.RemoveOwnGuildIDs(ids...)
}

// ClearGuilds clears all "guilds" edges to the Member entity.
func (uu *UserUpdate) ClearGuilds() *UserUpdate {
	uu.mutation.ClearGuilds()
	return uu
}

// RemoveGuildIDs removes the "guilds" edge to Member entities by IDs.
func (uu *UserUpdate) RemoveGuildIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveGuildIDs(ids...)
	return uu
}

// RemoveGuilds removes "guilds" edges to Member entities.
func (uu *UserUpdate) RemoveGuilds(m ...*Member) *UserUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.RemoveGuildIDs(ids...)
}

// ClearWordSuffix clears all "word_suffix" edges to the WordSuffix entity.
func (uu *UserUpdate) ClearWordSuffix() *UserUpdate {
	uu.mutation.ClearWordSuffix()
	return uu
}

// RemoveWordSuffixIDs removes the "word_suffix" edge to WordSuffix entities by IDs.
func (uu *UserUpdate) RemoveWordSuffixIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveWordSuffixIDs(ids...)
	return uu
}

// RemoveWordSuffix removes "word_suffix" edges to WordSuffix entities.
func (uu *UserUpdate) RemoveWordSuffix(w ...*WordSuffix) *UserUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uu.RemoveWordSuffixIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Locale(); ok {
		if err := user.LocaleValidator(string(v)); err != nil {
			return &ValidationError{Name: "locale", err: fmt.Errorf(`ent: validator failed for field "User.locale": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.Locale(); ok {
		_spec.SetField(user.FieldLocale, field.TypeString, value)
	}
	if value, ok := uu.mutation.Xp(); ok {
		_spec.SetField(user.FieldXp, field.TypeUint64, value)
	}
	if value, ok := uu.mutation.AddedXp(); ok {
		_spec.AddField(user.FieldXp, field.TypeUint64, value)
	}
	if uu.mutation.OwnGuildsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnGuildsTable,
			Columns: []string{user.OwnGuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedOwnGuildsIDs(); len(nodes) > 0 && !uu.mutation.OwnGuildsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnGuildsTable,
			Columns: []string{user.OwnGuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OwnGuildsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnGuildsTable,
			Columns: []string{user.OwnGuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.GuildsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GuildsTable,
			Columns: []string{user.GuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedGuildsIDs(); len(nodes) > 0 && !uu.mutation.GuildsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GuildsTable,
			Columns: []string{user.GuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.GuildsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GuildsTable,
			Columns: []string{user.GuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.WordSuffixCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WordSuffixTable,
			Columns: []string{user.WordSuffixColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wordsuffix.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedWordSuffixIDs(); len(nodes) > 0 && !uu.mutation.WordSuffixCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WordSuffixTable,
			Columns: []string{user.WordSuffixColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wordsuffix.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.WordSuffixIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WordSuffixTable,
			Columns: []string{user.WordSuffixColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wordsuffix.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// SetLocale sets the "locale" field.
func (uuo *UserUpdateOne) SetLocale(d discord.Locale) *UserUpdateOne {
	uuo.mutation.SetLocale(d)
	return uuo
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLocale(d *discord.Locale) *UserUpdateOne {
	if d != nil {
		uuo.SetLocale(*d)
	}
	return uuo
}

// SetXp sets the "xp" field.
func (uuo *UserUpdateOne) SetXp(x xppoint.XP) *UserUpdateOne {
	uuo.mutation.ResetXp()
	uuo.mutation.SetXp(x)
	return uuo
}

// SetNillableXp sets the "xp" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableXp(x *xppoint.XP) *UserUpdateOne {
	if x != nil {
		uuo.SetXp(*x)
	}
	return uuo
}

// AddXp adds x to the "xp" field.
func (uuo *UserUpdateOne) AddXp(x xppoint.XP) *UserUpdateOne {
	uuo.mutation.AddXp(x)
	return uuo
}

// AddOwnGuildIDs adds the "own_guilds" edge to the Guild entity by IDs.
func (uuo *UserUpdateOne) AddOwnGuildIDs(ids ...snowflake.ID) *UserUpdateOne {
	uuo.mutation.AddOwnGuildIDs(ids...)
	return uuo
}

// AddOwnGuilds adds the "own_guilds" edges to the Guild entity.
func (uuo *UserUpdateOne) AddOwnGuilds(g ...*Guild) *UserUpdateOne {
	ids := make([]snowflake.ID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.AddOwnGuildIDs(ids...)
}

// AddGuildIDs adds the "guilds" edge to the Member entity by IDs.
func (uuo *UserUpdateOne) AddGuildIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddGuildIDs(ids...)
	return uuo
}

// AddGuilds adds the "guilds" edges to the Member entity.
func (uuo *UserUpdateOne) AddGuilds(m ...*Member) *UserUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.AddGuildIDs(ids...)
}

// AddWordSuffixIDs adds the "word_suffix" edge to the WordSuffix entity by IDs.
func (uuo *UserUpdateOne) AddWordSuffixIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddWordSuffixIDs(ids...)
	return uuo
}

// AddWordSuffix adds the "word_suffix" edges to the WordSuffix entity.
func (uuo *UserUpdateOne) AddWordSuffix(w ...*WordSuffix) *UserUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uuo.AddWordSuffixIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearOwnGuilds clears all "own_guilds" edges to the Guild entity.
func (uuo *UserUpdateOne) ClearOwnGuilds() *UserUpdateOne {
	uuo.mutation.ClearOwnGuilds()
	return uuo
}

// RemoveOwnGuildIDs removes the "own_guilds" edge to Guild entities by IDs.
func (uuo *UserUpdateOne) RemoveOwnGuildIDs(ids ...snowflake.ID) *UserUpdateOne {
	uuo.mutation.RemoveOwnGuildIDs(ids...)
	return uuo
}

// RemoveOwnGuilds removes "own_guilds" edges to Guild entities.
func (uuo *UserUpdateOne) RemoveOwnGuilds(g ...*Guild) *UserUpdateOne {
	ids := make([]snowflake.ID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.RemoveOwnGuildIDs(ids...)
}

// ClearGuilds clears all "guilds" edges to the Member entity.
func (uuo *UserUpdateOne) ClearGuilds() *UserUpdateOne {
	uuo.mutation.ClearGuilds()
	return uuo
}

// RemoveGuildIDs removes the "guilds" edge to Member entities by IDs.
func (uuo *UserUpdateOne) RemoveGuildIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveGuildIDs(ids...)
	return uuo
}

// RemoveGuilds removes "guilds" edges to Member entities.
func (uuo *UserUpdateOne) RemoveGuilds(m ...*Member) *UserUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.RemoveGuildIDs(ids...)
}

// ClearWordSuffix clears all "word_suffix" edges to the WordSuffix entity.
func (uuo *UserUpdateOne) ClearWordSuffix() *UserUpdateOne {
	uuo.mutation.ClearWordSuffix()
	return uuo
}

// RemoveWordSuffixIDs removes the "word_suffix" edge to WordSuffix entities by IDs.
func (uuo *UserUpdateOne) RemoveWordSuffixIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveWordSuffixIDs(ids...)
	return uuo
}

// RemoveWordSuffix removes "word_suffix" edges to WordSuffix entities.
func (uuo *UserUpdateOne) RemoveWordSuffix(w ...*WordSuffix) *UserUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uuo.RemoveWordSuffixIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Locale(); ok {
		if err := user.LocaleValidator(string(v)); err != nil {
			return &ValidationError{Name: "locale", err: fmt.Errorf(`ent: validator failed for field "User.locale": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Locale(); ok {
		_spec.SetField(user.FieldLocale, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Xp(); ok {
		_spec.SetField(user.FieldXp, field.TypeUint64, value)
	}
	if value, ok := uuo.mutation.AddedXp(); ok {
		_spec.AddField(user.FieldXp, field.TypeUint64, value)
	}
	if uuo.mutation.OwnGuildsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnGuildsTable,
			Columns: []string{user.OwnGuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedOwnGuildsIDs(); len(nodes) > 0 && !uuo.mutation.OwnGuildsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnGuildsTable,
			Columns: []string{user.OwnGuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OwnGuildsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnGuildsTable,
			Columns: []string{user.OwnGuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.GuildsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GuildsTable,
			Columns: []string{user.GuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedGuildsIDs(); len(nodes) > 0 && !uuo.mutation.GuildsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GuildsTable,
			Columns: []string{user.GuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.GuildsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GuildsTable,
			Columns: []string{user.GuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.WordSuffixCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WordSuffixTable,
			Columns: []string{user.WordSuffixColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wordsuffix.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedWordSuffixIDs(); len(nodes) > 0 && !uuo.mutation.WordSuffixCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WordSuffixTable,
			Columns: []string{user.WordSuffixColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wordsuffix.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.WordSuffixIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WordSuffixTable,
			Columns: []string{user.WordSuffixColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wordsuffix.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
