// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/google/uuid"
	"github.com/sabafly/gobot/ent/guild"
	"github.com/sabafly/gobot/ent/predicate"
	"github.com/sabafly/gobot/ent/rolepanel"
	"github.com/sabafly/gobot/ent/rolepaneledit"
	"github.com/sabafly/gobot/ent/rolepanelplaced"
	"github.com/sabafly/gobot/ent/schema"
)

// RolePanelUpdate is the builder for updating RolePanel entities.
type RolePanelUpdate struct {
	config
	hooks    []Hook
	mutation *RolePanelMutation
}

// Where appends a list predicates to the RolePanelUpdate builder.
func (rpu *RolePanelUpdate) Where(ps ...predicate.RolePanel) *RolePanelUpdate {
	rpu.mutation.Where(ps...)
	return rpu
}

// SetName sets the "name" field.
func (rpu *RolePanelUpdate) SetName(s string) *RolePanelUpdate {
	rpu.mutation.SetName(s)
	return rpu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rpu *RolePanelUpdate) SetNillableName(s *string) *RolePanelUpdate {
	if s != nil {
		rpu.SetName(*s)
	}
	return rpu
}

// SetDescription sets the "description" field.
func (rpu *RolePanelUpdate) SetDescription(s string) *RolePanelUpdate {
	rpu.mutation.SetDescription(s)
	return rpu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rpu *RolePanelUpdate) SetNillableDescription(s *string) *RolePanelUpdate {
	if s != nil {
		rpu.SetDescription(*s)
	}
	return rpu
}

// SetRoles sets the "roles" field.
func (rpu *RolePanelUpdate) SetRoles(s []schema.Role) *RolePanelUpdate {
	rpu.mutation.SetRoles(s)
	return rpu
}

// AppendRoles appends s to the "roles" field.
func (rpu *RolePanelUpdate) AppendRoles(s []schema.Role) *RolePanelUpdate {
	rpu.mutation.AppendRoles(s)
	return rpu
}

// ClearRoles clears the value of the "roles" field.
func (rpu *RolePanelUpdate) ClearRoles() *RolePanelUpdate {
	rpu.mutation.ClearRoles()
	return rpu
}

// SetUpdatedAt sets the "updated_at" field.
func (rpu *RolePanelUpdate) SetUpdatedAt(t time.Time) *RolePanelUpdate {
	rpu.mutation.SetUpdatedAt(t)
	return rpu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rpu *RolePanelUpdate) SetNillableUpdatedAt(t *time.Time) *RolePanelUpdate {
	if t != nil {
		rpu.SetUpdatedAt(*t)
	}
	return rpu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (rpu *RolePanelUpdate) ClearUpdatedAt() *RolePanelUpdate {
	rpu.mutation.ClearUpdatedAt()
	return rpu
}

// SetAppliedAt sets the "applied_at" field.
func (rpu *RolePanelUpdate) SetAppliedAt(t time.Time) *RolePanelUpdate {
	rpu.mutation.SetAppliedAt(t)
	return rpu
}

// SetNillableAppliedAt sets the "applied_at" field if the given value is not nil.
func (rpu *RolePanelUpdate) SetNillableAppliedAt(t *time.Time) *RolePanelUpdate {
	if t != nil {
		rpu.SetAppliedAt(*t)
	}
	return rpu
}

// ClearAppliedAt clears the value of the "applied_at" field.
func (rpu *RolePanelUpdate) ClearAppliedAt() *RolePanelUpdate {
	rpu.mutation.ClearAppliedAt()
	return rpu
}

// SetGuildID sets the "guild" edge to the Guild entity by ID.
func (rpu *RolePanelUpdate) SetGuildID(id snowflake.ID) *RolePanelUpdate {
	rpu.mutation.SetGuildID(id)
	return rpu
}

// SetGuild sets the "guild" edge to the Guild entity.
func (rpu *RolePanelUpdate) SetGuild(g *Guild) *RolePanelUpdate {
	return rpu.SetGuildID(g.ID)
}

// AddPlacementIDs adds the "placements" edge to the RolePanelPlaced entity by IDs.
func (rpu *RolePanelUpdate) AddPlacementIDs(ids ...uuid.UUID) *RolePanelUpdate {
	rpu.mutation.AddPlacementIDs(ids...)
	return rpu
}

// AddPlacements adds the "placements" edges to the RolePanelPlaced entity.
func (rpu *RolePanelUpdate) AddPlacements(r ...*RolePanelPlaced) *RolePanelUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpu.AddPlacementIDs(ids...)
}

// SetEditID sets the "edit" edge to the RolePanelEdit entity by ID.
func (rpu *RolePanelUpdate) SetEditID(id uuid.UUID) *RolePanelUpdate {
	rpu.mutation.SetEditID(id)
	return rpu
}

// SetNillableEditID sets the "edit" edge to the RolePanelEdit entity by ID if the given value is not nil.
func (rpu *RolePanelUpdate) SetNillableEditID(id *uuid.UUID) *RolePanelUpdate {
	if id != nil {
		rpu = rpu.SetEditID(*id)
	}
	return rpu
}

// SetEdit sets the "edit" edge to the RolePanelEdit entity.
func (rpu *RolePanelUpdate) SetEdit(r *RolePanelEdit) *RolePanelUpdate {
	return rpu.SetEditID(r.ID)
}

// Mutation returns the RolePanelMutation object of the builder.
func (rpu *RolePanelUpdate) Mutation() *RolePanelMutation {
	return rpu.mutation
}

// ClearGuild clears the "guild" edge to the Guild entity.
func (rpu *RolePanelUpdate) ClearGuild() *RolePanelUpdate {
	rpu.mutation.ClearGuild()
	return rpu
}

// ClearPlacements clears all "placements" edges to the RolePanelPlaced entity.
func (rpu *RolePanelUpdate) ClearPlacements() *RolePanelUpdate {
	rpu.mutation.ClearPlacements()
	return rpu
}

// RemovePlacementIDs removes the "placements" edge to RolePanelPlaced entities by IDs.
func (rpu *RolePanelUpdate) RemovePlacementIDs(ids ...uuid.UUID) *RolePanelUpdate {
	rpu.mutation.RemovePlacementIDs(ids...)
	return rpu
}

// RemovePlacements removes "placements" edges to RolePanelPlaced entities.
func (rpu *RolePanelUpdate) RemovePlacements(r ...*RolePanelPlaced) *RolePanelUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpu.RemovePlacementIDs(ids...)
}

// ClearEdit clears the "edit" edge to the RolePanelEdit entity.
func (rpu *RolePanelUpdate) ClearEdit() *RolePanelUpdate {
	rpu.mutation.ClearEdit()
	return rpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rpu *RolePanelUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rpu.sqlSave, rpu.mutation, rpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpu *RolePanelUpdate) SaveX(ctx context.Context) int {
	affected, err := rpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rpu *RolePanelUpdate) Exec(ctx context.Context) error {
	_, err := rpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpu *RolePanelUpdate) ExecX(ctx context.Context) {
	if err := rpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpu *RolePanelUpdate) check() error {
	if v, ok := rpu.mutation.Name(); ok {
		if err := rolepanel.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "RolePanel.name": %w`, err)}
		}
	}
	if _, ok := rpu.mutation.GuildID(); rpu.mutation.GuildCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RolePanel.guild"`)
	}
	return nil
}

func (rpu *RolePanelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(rolepanel.Table, rolepanel.Columns, sqlgraph.NewFieldSpec(rolepanel.FieldID, field.TypeUUID))
	if ps := rpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpu.mutation.Name(); ok {
		_spec.SetField(rolepanel.FieldName, field.TypeString, value)
	}
	if value, ok := rpu.mutation.Description(); ok {
		_spec.SetField(rolepanel.FieldDescription, field.TypeString, value)
	}
	if value, ok := rpu.mutation.Roles(); ok {
		_spec.SetField(rolepanel.FieldRoles, field.TypeJSON, value)
	}
	if value, ok := rpu.mutation.AppendedRoles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, rolepanel.FieldRoles, value)
		})
	}
	if rpu.mutation.RolesCleared() {
		_spec.ClearField(rolepanel.FieldRoles, field.TypeJSON)
	}
	if value, ok := rpu.mutation.UpdatedAt(); ok {
		_spec.SetField(rolepanel.FieldUpdatedAt, field.TypeTime, value)
	}
	if rpu.mutation.UpdatedAtCleared() {
		_spec.ClearField(rolepanel.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := rpu.mutation.AppliedAt(); ok {
		_spec.SetField(rolepanel.FieldAppliedAt, field.TypeTime, value)
	}
	if rpu.mutation.AppliedAtCleared() {
		_spec.ClearField(rolepanel.FieldAppliedAt, field.TypeTime)
	}
	if rpu.mutation.GuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolepanel.GuildTable,
			Columns: []string{rolepanel.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.GuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolepanel.GuildTable,
			Columns: []string{rolepanel.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpu.mutation.PlacementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rolepanel.PlacementsTable,
			Columns: []string{rolepanel.PlacementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolepanelplaced.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.RemovedPlacementsIDs(); len(nodes) > 0 && !rpu.mutation.PlacementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rolepanel.PlacementsTable,
			Columns: []string{rolepanel.PlacementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolepanelplaced.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.PlacementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rolepanel.PlacementsTable,
			Columns: []string{rolepanel.PlacementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolepanelplaced.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpu.mutation.EditCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   rolepanel.EditTable,
			Columns: []string{rolepanel.EditColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolepaneledit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpu.mutation.EditIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   rolepanel.EditTable,
			Columns: []string{rolepanel.EditColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolepaneledit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolepanel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rpu.mutation.done = true
	return n, nil
}

// RolePanelUpdateOne is the builder for updating a single RolePanel entity.
type RolePanelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RolePanelMutation
}

// SetName sets the "name" field.
func (rpuo *RolePanelUpdateOne) SetName(s string) *RolePanelUpdateOne {
	rpuo.mutation.SetName(s)
	return rpuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rpuo *RolePanelUpdateOne) SetNillableName(s *string) *RolePanelUpdateOne {
	if s != nil {
		rpuo.SetName(*s)
	}
	return rpuo
}

// SetDescription sets the "description" field.
func (rpuo *RolePanelUpdateOne) SetDescription(s string) *RolePanelUpdateOne {
	rpuo.mutation.SetDescription(s)
	return rpuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (rpuo *RolePanelUpdateOne) SetNillableDescription(s *string) *RolePanelUpdateOne {
	if s != nil {
		rpuo.SetDescription(*s)
	}
	return rpuo
}

// SetRoles sets the "roles" field.
func (rpuo *RolePanelUpdateOne) SetRoles(s []schema.Role) *RolePanelUpdateOne {
	rpuo.mutation.SetRoles(s)
	return rpuo
}

// AppendRoles appends s to the "roles" field.
func (rpuo *RolePanelUpdateOne) AppendRoles(s []schema.Role) *RolePanelUpdateOne {
	rpuo.mutation.AppendRoles(s)
	return rpuo
}

// ClearRoles clears the value of the "roles" field.
func (rpuo *RolePanelUpdateOne) ClearRoles() *RolePanelUpdateOne {
	rpuo.mutation.ClearRoles()
	return rpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (rpuo *RolePanelUpdateOne) SetUpdatedAt(t time.Time) *RolePanelUpdateOne {
	rpuo.mutation.SetUpdatedAt(t)
	return rpuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rpuo *RolePanelUpdateOne) SetNillableUpdatedAt(t *time.Time) *RolePanelUpdateOne {
	if t != nil {
		rpuo.SetUpdatedAt(*t)
	}
	return rpuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (rpuo *RolePanelUpdateOne) ClearUpdatedAt() *RolePanelUpdateOne {
	rpuo.mutation.ClearUpdatedAt()
	return rpuo
}

// SetAppliedAt sets the "applied_at" field.
func (rpuo *RolePanelUpdateOne) SetAppliedAt(t time.Time) *RolePanelUpdateOne {
	rpuo.mutation.SetAppliedAt(t)
	return rpuo
}

// SetNillableAppliedAt sets the "applied_at" field if the given value is not nil.
func (rpuo *RolePanelUpdateOne) SetNillableAppliedAt(t *time.Time) *RolePanelUpdateOne {
	if t != nil {
		rpuo.SetAppliedAt(*t)
	}
	return rpuo
}

// ClearAppliedAt clears the value of the "applied_at" field.
func (rpuo *RolePanelUpdateOne) ClearAppliedAt() *RolePanelUpdateOne {
	rpuo.mutation.ClearAppliedAt()
	return rpuo
}

// SetGuildID sets the "guild" edge to the Guild entity by ID.
func (rpuo *RolePanelUpdateOne) SetGuildID(id snowflake.ID) *RolePanelUpdateOne {
	rpuo.mutation.SetGuildID(id)
	return rpuo
}

// SetGuild sets the "guild" edge to the Guild entity.
func (rpuo *RolePanelUpdateOne) SetGuild(g *Guild) *RolePanelUpdateOne {
	return rpuo.SetGuildID(g.ID)
}

// AddPlacementIDs adds the "placements" edge to the RolePanelPlaced entity by IDs.
func (rpuo *RolePanelUpdateOne) AddPlacementIDs(ids ...uuid.UUID) *RolePanelUpdateOne {
	rpuo.mutation.AddPlacementIDs(ids...)
	return rpuo
}

// AddPlacements adds the "placements" edges to the RolePanelPlaced entity.
func (rpuo *RolePanelUpdateOne) AddPlacements(r ...*RolePanelPlaced) *RolePanelUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpuo.AddPlacementIDs(ids...)
}

// SetEditID sets the "edit" edge to the RolePanelEdit entity by ID.
func (rpuo *RolePanelUpdateOne) SetEditID(id uuid.UUID) *RolePanelUpdateOne {
	rpuo.mutation.SetEditID(id)
	return rpuo
}

// SetNillableEditID sets the "edit" edge to the RolePanelEdit entity by ID if the given value is not nil.
func (rpuo *RolePanelUpdateOne) SetNillableEditID(id *uuid.UUID) *RolePanelUpdateOne {
	if id != nil {
		rpuo = rpuo.SetEditID(*id)
	}
	return rpuo
}

// SetEdit sets the "edit" edge to the RolePanelEdit entity.
func (rpuo *RolePanelUpdateOne) SetEdit(r *RolePanelEdit) *RolePanelUpdateOne {
	return rpuo.SetEditID(r.ID)
}

// Mutation returns the RolePanelMutation object of the builder.
func (rpuo *RolePanelUpdateOne) Mutation() *RolePanelMutation {
	return rpuo.mutation
}

// ClearGuild clears the "guild" edge to the Guild entity.
func (rpuo *RolePanelUpdateOne) ClearGuild() *RolePanelUpdateOne {
	rpuo.mutation.ClearGuild()
	return rpuo
}

// ClearPlacements clears all "placements" edges to the RolePanelPlaced entity.
func (rpuo *RolePanelUpdateOne) ClearPlacements() *RolePanelUpdateOne {
	rpuo.mutation.ClearPlacements()
	return rpuo
}

// RemovePlacementIDs removes the "placements" edge to RolePanelPlaced entities by IDs.
func (rpuo *RolePanelUpdateOne) RemovePlacementIDs(ids ...uuid.UUID) *RolePanelUpdateOne {
	rpuo.mutation.RemovePlacementIDs(ids...)
	return rpuo
}

// RemovePlacements removes "placements" edges to RolePanelPlaced entities.
func (rpuo *RolePanelUpdateOne) RemovePlacements(r ...*RolePanelPlaced) *RolePanelUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rpuo.RemovePlacementIDs(ids...)
}

// ClearEdit clears the "edit" edge to the RolePanelEdit entity.
func (rpuo *RolePanelUpdateOne) ClearEdit() *RolePanelUpdateOne {
	rpuo.mutation.ClearEdit()
	return rpuo
}

// Where appends a list predicates to the RolePanelUpdate builder.
func (rpuo *RolePanelUpdateOne) Where(ps ...predicate.RolePanel) *RolePanelUpdateOne {
	rpuo.mutation.Where(ps...)
	return rpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rpuo *RolePanelUpdateOne) Select(field string, fields ...string) *RolePanelUpdateOne {
	rpuo.fields = append([]string{field}, fields...)
	return rpuo
}

// Save executes the query and returns the updated RolePanel entity.
func (rpuo *RolePanelUpdateOne) Save(ctx context.Context) (*RolePanel, error) {
	return withHooks(ctx, rpuo.sqlSave, rpuo.mutation, rpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rpuo *RolePanelUpdateOne) SaveX(ctx context.Context) *RolePanel {
	node, err := rpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rpuo *RolePanelUpdateOne) Exec(ctx context.Context) error {
	_, err := rpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rpuo *RolePanelUpdateOne) ExecX(ctx context.Context) {
	if err := rpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rpuo *RolePanelUpdateOne) check() error {
	if v, ok := rpuo.mutation.Name(); ok {
		if err := rolepanel.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "RolePanel.name": %w`, err)}
		}
	}
	if _, ok := rpuo.mutation.GuildID(); rpuo.mutation.GuildCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RolePanel.guild"`)
	}
	return nil
}

func (rpuo *RolePanelUpdateOne) sqlSave(ctx context.Context) (_node *RolePanel, err error) {
	if err := rpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rolepanel.Table, rolepanel.Columns, sqlgraph.NewFieldSpec(rolepanel.FieldID, field.TypeUUID))
	id, ok := rpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RolePanel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rolepanel.FieldID)
		for _, f := range fields {
			if !rolepanel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rolepanel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rpuo.mutation.Name(); ok {
		_spec.SetField(rolepanel.FieldName, field.TypeString, value)
	}
	if value, ok := rpuo.mutation.Description(); ok {
		_spec.SetField(rolepanel.FieldDescription, field.TypeString, value)
	}
	if value, ok := rpuo.mutation.Roles(); ok {
		_spec.SetField(rolepanel.FieldRoles, field.TypeJSON, value)
	}
	if value, ok := rpuo.mutation.AppendedRoles(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, rolepanel.FieldRoles, value)
		})
	}
	if rpuo.mutation.RolesCleared() {
		_spec.ClearField(rolepanel.FieldRoles, field.TypeJSON)
	}
	if value, ok := rpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(rolepanel.FieldUpdatedAt, field.TypeTime, value)
	}
	if rpuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(rolepanel.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := rpuo.mutation.AppliedAt(); ok {
		_spec.SetField(rolepanel.FieldAppliedAt, field.TypeTime, value)
	}
	if rpuo.mutation.AppliedAtCleared() {
		_spec.ClearField(rolepanel.FieldAppliedAt, field.TypeTime)
	}
	if rpuo.mutation.GuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolepanel.GuildTable,
			Columns: []string{rolepanel.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.GuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolepanel.GuildTable,
			Columns: []string{rolepanel.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpuo.mutation.PlacementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rolepanel.PlacementsTable,
			Columns: []string{rolepanel.PlacementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolepanelplaced.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.RemovedPlacementsIDs(); len(nodes) > 0 && !rpuo.mutation.PlacementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rolepanel.PlacementsTable,
			Columns: []string{rolepanel.PlacementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolepanelplaced.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.PlacementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rolepanel.PlacementsTable,
			Columns: []string{rolepanel.PlacementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolepanelplaced.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rpuo.mutation.EditCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   rolepanel.EditTable,
			Columns: []string{rolepanel.EditColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolepaneledit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rpuo.mutation.EditIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   rolepanel.EditTable,
			Columns: []string{rolepanel.EditColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolepaneledit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RolePanel{config: rpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolepanel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rpuo.mutation.done = true
	return _node, nil
}
