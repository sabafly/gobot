// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/disgoorg/disgo/discord"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/google/uuid"
	"github.com/sabafly/gobot/ent/guild"
	"github.com/sabafly/gobot/ent/predicate"
	"github.com/sabafly/gobot/ent/rolepanel"
	"github.com/sabafly/gobot/ent/rolepanelplaced"
)

// RolePanelPlacedUpdate is the builder for updating RolePanelPlaced entities.
type RolePanelPlacedUpdate struct {
	config
	hooks    []Hook
	mutation *RolePanelPlacedMutation
}

// Where appends a list predicates to the RolePanelPlacedUpdate builder.
func (rppu *RolePanelPlacedUpdate) Where(ps ...predicate.RolePanelPlaced) *RolePanelPlacedUpdate {
	rppu.mutation.Where(ps...)
	return rppu
}

// SetMessageID sets the "message_id" field.
func (rppu *RolePanelPlacedUpdate) SetMessageID(s snowflake.ID) *RolePanelPlacedUpdate {
	rppu.mutation.ResetMessageID()
	rppu.mutation.SetMessageID(s)
	return rppu
}

// SetNillableMessageID sets the "message_id" field if the given value is not nil.
func (rppu *RolePanelPlacedUpdate) SetNillableMessageID(s *snowflake.ID) *RolePanelPlacedUpdate {
	if s != nil {
		rppu.SetMessageID(*s)
	}
	return rppu
}

// AddMessageID adds s to the "message_id" field.
func (rppu *RolePanelPlacedUpdate) AddMessageID(s snowflake.ID) *RolePanelPlacedUpdate {
	rppu.mutation.AddMessageID(s)
	return rppu
}

// ClearMessageID clears the value of the "message_id" field.
func (rppu *RolePanelPlacedUpdate) ClearMessageID() *RolePanelPlacedUpdate {
	rppu.mutation.ClearMessageID()
	return rppu
}

// SetChannelID sets the "channel_id" field.
func (rppu *RolePanelPlacedUpdate) SetChannelID(s snowflake.ID) *RolePanelPlacedUpdate {
	rppu.mutation.ResetChannelID()
	rppu.mutation.SetChannelID(s)
	return rppu
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (rppu *RolePanelPlacedUpdate) SetNillableChannelID(s *snowflake.ID) *RolePanelPlacedUpdate {
	if s != nil {
		rppu.SetChannelID(*s)
	}
	return rppu
}

// AddChannelID adds s to the "channel_id" field.
func (rppu *RolePanelPlacedUpdate) AddChannelID(s snowflake.ID) *RolePanelPlacedUpdate {
	rppu.mutation.AddChannelID(s)
	return rppu
}

// SetType sets the "type" field.
func (rppu *RolePanelPlacedUpdate) SetType(r rolepanelplaced.Type) *RolePanelPlacedUpdate {
	rppu.mutation.SetType(r)
	return rppu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (rppu *RolePanelPlacedUpdate) SetNillableType(r *rolepanelplaced.Type) *RolePanelPlacedUpdate {
	if r != nil {
		rppu.SetType(*r)
	}
	return rppu
}

// ClearType clears the value of the "type" field.
func (rppu *RolePanelPlacedUpdate) ClearType() *RolePanelPlacedUpdate {
	rppu.mutation.ClearType()
	return rppu
}

// SetButtonType sets the "button_type" field.
func (rppu *RolePanelPlacedUpdate) SetButtonType(ds discord.ButtonStyle) *RolePanelPlacedUpdate {
	rppu.mutation.ResetButtonType()
	rppu.mutation.SetButtonType(ds)
	return rppu
}

// SetNillableButtonType sets the "button_type" field if the given value is not nil.
func (rppu *RolePanelPlacedUpdate) SetNillableButtonType(ds *discord.ButtonStyle) *RolePanelPlacedUpdate {
	if ds != nil {
		rppu.SetButtonType(*ds)
	}
	return rppu
}

// AddButtonType adds ds to the "button_type" field.
func (rppu *RolePanelPlacedUpdate) AddButtonType(ds discord.ButtonStyle) *RolePanelPlacedUpdate {
	rppu.mutation.AddButtonType(ds)
	return rppu
}

// SetShowName sets the "show_name" field.
func (rppu *RolePanelPlacedUpdate) SetShowName(b bool) *RolePanelPlacedUpdate {
	rppu.mutation.SetShowName(b)
	return rppu
}

// SetNillableShowName sets the "show_name" field if the given value is not nil.
func (rppu *RolePanelPlacedUpdate) SetNillableShowName(b *bool) *RolePanelPlacedUpdate {
	if b != nil {
		rppu.SetShowName(*b)
	}
	return rppu
}

// SetFoldingSelectMenu sets the "folding_select_menu" field.
func (rppu *RolePanelPlacedUpdate) SetFoldingSelectMenu(b bool) *RolePanelPlacedUpdate {
	rppu.mutation.SetFoldingSelectMenu(b)
	return rppu
}

// SetNillableFoldingSelectMenu sets the "folding_select_menu" field if the given value is not nil.
func (rppu *RolePanelPlacedUpdate) SetNillableFoldingSelectMenu(b *bool) *RolePanelPlacedUpdate {
	if b != nil {
		rppu.SetFoldingSelectMenu(*b)
	}
	return rppu
}

// SetHideNotice sets the "hide_notice" field.
func (rppu *RolePanelPlacedUpdate) SetHideNotice(b bool) *RolePanelPlacedUpdate {
	rppu.mutation.SetHideNotice(b)
	return rppu
}

// SetNillableHideNotice sets the "hide_notice" field if the given value is not nil.
func (rppu *RolePanelPlacedUpdate) SetNillableHideNotice(b *bool) *RolePanelPlacedUpdate {
	if b != nil {
		rppu.SetHideNotice(*b)
	}
	return rppu
}

// SetUseDisplayName sets the "use_display_name" field.
func (rppu *RolePanelPlacedUpdate) SetUseDisplayName(b bool) *RolePanelPlacedUpdate {
	rppu.mutation.SetUseDisplayName(b)
	return rppu
}

// SetNillableUseDisplayName sets the "use_display_name" field if the given value is not nil.
func (rppu *RolePanelPlacedUpdate) SetNillableUseDisplayName(b *bool) *RolePanelPlacedUpdate {
	if b != nil {
		rppu.SetUseDisplayName(*b)
	}
	return rppu
}

// SetUses sets the "uses" field.
func (rppu *RolePanelPlacedUpdate) SetUses(i int) *RolePanelPlacedUpdate {
	rppu.mutation.ResetUses()
	rppu.mutation.SetUses(i)
	return rppu
}

// SetNillableUses sets the "uses" field if the given value is not nil.
func (rppu *RolePanelPlacedUpdate) SetNillableUses(i *int) *RolePanelPlacedUpdate {
	if i != nil {
		rppu.SetUses(*i)
	}
	return rppu
}

// AddUses adds i to the "uses" field.
func (rppu *RolePanelPlacedUpdate) AddUses(i int) *RolePanelPlacedUpdate {
	rppu.mutation.AddUses(i)
	return rppu
}

// SetGuildID sets the "guild" edge to the Guild entity by ID.
func (rppu *RolePanelPlacedUpdate) SetGuildID(id snowflake.ID) *RolePanelPlacedUpdate {
	rppu.mutation.SetGuildID(id)
	return rppu
}

// SetGuild sets the "guild" edge to the Guild entity.
func (rppu *RolePanelPlacedUpdate) SetGuild(g *Guild) *RolePanelPlacedUpdate {
	return rppu.SetGuildID(g.ID)
}

// SetRolePanelID sets the "role_panel" edge to the RolePanel entity by ID.
func (rppu *RolePanelPlacedUpdate) SetRolePanelID(id uuid.UUID) *RolePanelPlacedUpdate {
	rppu.mutation.SetRolePanelID(id)
	return rppu
}

// SetRolePanel sets the "role_panel" edge to the RolePanel entity.
func (rppu *RolePanelPlacedUpdate) SetRolePanel(r *RolePanel) *RolePanelPlacedUpdate {
	return rppu.SetRolePanelID(r.ID)
}

// Mutation returns the RolePanelPlacedMutation object of the builder.
func (rppu *RolePanelPlacedUpdate) Mutation() *RolePanelPlacedMutation {
	return rppu.mutation
}

// ClearGuild clears the "guild" edge to the Guild entity.
func (rppu *RolePanelPlacedUpdate) ClearGuild() *RolePanelPlacedUpdate {
	rppu.mutation.ClearGuild()
	return rppu
}

// ClearRolePanel clears the "role_panel" edge to the RolePanel entity.
func (rppu *RolePanelPlacedUpdate) ClearRolePanel() *RolePanelPlacedUpdate {
	rppu.mutation.ClearRolePanel()
	return rppu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rppu *RolePanelPlacedUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rppu.sqlSave, rppu.mutation, rppu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rppu *RolePanelPlacedUpdate) SaveX(ctx context.Context) int {
	affected, err := rppu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rppu *RolePanelPlacedUpdate) Exec(ctx context.Context) error {
	_, err := rppu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rppu *RolePanelPlacedUpdate) ExecX(ctx context.Context) {
	if err := rppu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rppu *RolePanelPlacedUpdate) check() error {
	if v, ok := rppu.mutation.GetType(); ok {
		if err := rolepanelplaced.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "RolePanelPlaced.type": %w`, err)}
		}
	}
	if v, ok := rppu.mutation.ButtonType(); ok {
		if err := rolepanelplaced.ButtonTypeValidator(int(v)); err != nil {
			return &ValidationError{Name: "button_type", err: fmt.Errorf(`ent: validator failed for field "RolePanelPlaced.button_type": %w`, err)}
		}
	}
	if _, ok := rppu.mutation.GuildID(); rppu.mutation.GuildCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RolePanelPlaced.guild"`)
	}
	if _, ok := rppu.mutation.RolePanelID(); rppu.mutation.RolePanelCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RolePanelPlaced.role_panel"`)
	}
	return nil
}

func (rppu *RolePanelPlacedUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rppu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(rolepanelplaced.Table, rolepanelplaced.Columns, sqlgraph.NewFieldSpec(rolepanelplaced.FieldID, field.TypeUUID))
	if ps := rppu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rppu.mutation.MessageID(); ok {
		_spec.SetField(rolepanelplaced.FieldMessageID, field.TypeUint64, value)
	}
	if value, ok := rppu.mutation.AddedMessageID(); ok {
		_spec.AddField(rolepanelplaced.FieldMessageID, field.TypeUint64, value)
	}
	if rppu.mutation.MessageIDCleared() {
		_spec.ClearField(rolepanelplaced.FieldMessageID, field.TypeUint64)
	}
	if value, ok := rppu.mutation.ChannelID(); ok {
		_spec.SetField(rolepanelplaced.FieldChannelID, field.TypeUint64, value)
	}
	if value, ok := rppu.mutation.AddedChannelID(); ok {
		_spec.AddField(rolepanelplaced.FieldChannelID, field.TypeUint64, value)
	}
	if value, ok := rppu.mutation.GetType(); ok {
		_spec.SetField(rolepanelplaced.FieldType, field.TypeEnum, value)
	}
	if rppu.mutation.TypeCleared() {
		_spec.ClearField(rolepanelplaced.FieldType, field.TypeEnum)
	}
	if value, ok := rppu.mutation.ButtonType(); ok {
		_spec.SetField(rolepanelplaced.FieldButtonType, field.TypeInt, value)
	}
	if value, ok := rppu.mutation.AddedButtonType(); ok {
		_spec.AddField(rolepanelplaced.FieldButtonType, field.TypeInt, value)
	}
	if value, ok := rppu.mutation.ShowName(); ok {
		_spec.SetField(rolepanelplaced.FieldShowName, field.TypeBool, value)
	}
	if value, ok := rppu.mutation.FoldingSelectMenu(); ok {
		_spec.SetField(rolepanelplaced.FieldFoldingSelectMenu, field.TypeBool, value)
	}
	if value, ok := rppu.mutation.HideNotice(); ok {
		_spec.SetField(rolepanelplaced.FieldHideNotice, field.TypeBool, value)
	}
	if value, ok := rppu.mutation.UseDisplayName(); ok {
		_spec.SetField(rolepanelplaced.FieldUseDisplayName, field.TypeBool, value)
	}
	if value, ok := rppu.mutation.Uses(); ok {
		_spec.SetField(rolepanelplaced.FieldUses, field.TypeInt, value)
	}
	if value, ok := rppu.mutation.AddedUses(); ok {
		_spec.AddField(rolepanelplaced.FieldUses, field.TypeInt, value)
	}
	if rppu.mutation.GuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolepanelplaced.GuildTable,
			Columns: []string{rolepanelplaced.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rppu.mutation.GuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolepanelplaced.GuildTable,
			Columns: []string{rolepanelplaced.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rppu.mutation.RolePanelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolepanelplaced.RolePanelTable,
			Columns: []string{rolepanelplaced.RolePanelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolepanel.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rppu.mutation.RolePanelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolepanelplaced.RolePanelTable,
			Columns: []string{rolepanelplaced.RolePanelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolepanel.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rppu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolepanelplaced.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rppu.mutation.done = true
	return n, nil
}

// RolePanelPlacedUpdateOne is the builder for updating a single RolePanelPlaced entity.
type RolePanelPlacedUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RolePanelPlacedMutation
}

// SetMessageID sets the "message_id" field.
func (rppuo *RolePanelPlacedUpdateOne) SetMessageID(s snowflake.ID) *RolePanelPlacedUpdateOne {
	rppuo.mutation.ResetMessageID()
	rppuo.mutation.SetMessageID(s)
	return rppuo
}

// SetNillableMessageID sets the "message_id" field if the given value is not nil.
func (rppuo *RolePanelPlacedUpdateOne) SetNillableMessageID(s *snowflake.ID) *RolePanelPlacedUpdateOne {
	if s != nil {
		rppuo.SetMessageID(*s)
	}
	return rppuo
}

// AddMessageID adds s to the "message_id" field.
func (rppuo *RolePanelPlacedUpdateOne) AddMessageID(s snowflake.ID) *RolePanelPlacedUpdateOne {
	rppuo.mutation.AddMessageID(s)
	return rppuo
}

// ClearMessageID clears the value of the "message_id" field.
func (rppuo *RolePanelPlacedUpdateOne) ClearMessageID() *RolePanelPlacedUpdateOne {
	rppuo.mutation.ClearMessageID()
	return rppuo
}

// SetChannelID sets the "channel_id" field.
func (rppuo *RolePanelPlacedUpdateOne) SetChannelID(s snowflake.ID) *RolePanelPlacedUpdateOne {
	rppuo.mutation.ResetChannelID()
	rppuo.mutation.SetChannelID(s)
	return rppuo
}

// SetNillableChannelID sets the "channel_id" field if the given value is not nil.
func (rppuo *RolePanelPlacedUpdateOne) SetNillableChannelID(s *snowflake.ID) *RolePanelPlacedUpdateOne {
	if s != nil {
		rppuo.SetChannelID(*s)
	}
	return rppuo
}

// AddChannelID adds s to the "channel_id" field.
func (rppuo *RolePanelPlacedUpdateOne) AddChannelID(s snowflake.ID) *RolePanelPlacedUpdateOne {
	rppuo.mutation.AddChannelID(s)
	return rppuo
}

// SetType sets the "type" field.
func (rppuo *RolePanelPlacedUpdateOne) SetType(r rolepanelplaced.Type) *RolePanelPlacedUpdateOne {
	rppuo.mutation.SetType(r)
	return rppuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (rppuo *RolePanelPlacedUpdateOne) SetNillableType(r *rolepanelplaced.Type) *RolePanelPlacedUpdateOne {
	if r != nil {
		rppuo.SetType(*r)
	}
	return rppuo
}

// ClearType clears the value of the "type" field.
func (rppuo *RolePanelPlacedUpdateOne) ClearType() *RolePanelPlacedUpdateOne {
	rppuo.mutation.ClearType()
	return rppuo
}

// SetButtonType sets the "button_type" field.
func (rppuo *RolePanelPlacedUpdateOne) SetButtonType(ds discord.ButtonStyle) *RolePanelPlacedUpdateOne {
	rppuo.mutation.ResetButtonType()
	rppuo.mutation.SetButtonType(ds)
	return rppuo
}

// SetNillableButtonType sets the "button_type" field if the given value is not nil.
func (rppuo *RolePanelPlacedUpdateOne) SetNillableButtonType(ds *discord.ButtonStyle) *RolePanelPlacedUpdateOne {
	if ds != nil {
		rppuo.SetButtonType(*ds)
	}
	return rppuo
}

// AddButtonType adds ds to the "button_type" field.
func (rppuo *RolePanelPlacedUpdateOne) AddButtonType(ds discord.ButtonStyle) *RolePanelPlacedUpdateOne {
	rppuo.mutation.AddButtonType(ds)
	return rppuo
}

// SetShowName sets the "show_name" field.
func (rppuo *RolePanelPlacedUpdateOne) SetShowName(b bool) *RolePanelPlacedUpdateOne {
	rppuo.mutation.SetShowName(b)
	return rppuo
}

// SetNillableShowName sets the "show_name" field if the given value is not nil.
func (rppuo *RolePanelPlacedUpdateOne) SetNillableShowName(b *bool) *RolePanelPlacedUpdateOne {
	if b != nil {
		rppuo.SetShowName(*b)
	}
	return rppuo
}

// SetFoldingSelectMenu sets the "folding_select_menu" field.
func (rppuo *RolePanelPlacedUpdateOne) SetFoldingSelectMenu(b bool) *RolePanelPlacedUpdateOne {
	rppuo.mutation.SetFoldingSelectMenu(b)
	return rppuo
}

// SetNillableFoldingSelectMenu sets the "folding_select_menu" field if the given value is not nil.
func (rppuo *RolePanelPlacedUpdateOne) SetNillableFoldingSelectMenu(b *bool) *RolePanelPlacedUpdateOne {
	if b != nil {
		rppuo.SetFoldingSelectMenu(*b)
	}
	return rppuo
}

// SetHideNotice sets the "hide_notice" field.
func (rppuo *RolePanelPlacedUpdateOne) SetHideNotice(b bool) *RolePanelPlacedUpdateOne {
	rppuo.mutation.SetHideNotice(b)
	return rppuo
}

// SetNillableHideNotice sets the "hide_notice" field if the given value is not nil.
func (rppuo *RolePanelPlacedUpdateOne) SetNillableHideNotice(b *bool) *RolePanelPlacedUpdateOne {
	if b != nil {
		rppuo.SetHideNotice(*b)
	}
	return rppuo
}

// SetUseDisplayName sets the "use_display_name" field.
func (rppuo *RolePanelPlacedUpdateOne) SetUseDisplayName(b bool) *RolePanelPlacedUpdateOne {
	rppuo.mutation.SetUseDisplayName(b)
	return rppuo
}

// SetNillableUseDisplayName sets the "use_display_name" field if the given value is not nil.
func (rppuo *RolePanelPlacedUpdateOne) SetNillableUseDisplayName(b *bool) *RolePanelPlacedUpdateOne {
	if b != nil {
		rppuo.SetUseDisplayName(*b)
	}
	return rppuo
}

// SetUses sets the "uses" field.
func (rppuo *RolePanelPlacedUpdateOne) SetUses(i int) *RolePanelPlacedUpdateOne {
	rppuo.mutation.ResetUses()
	rppuo.mutation.SetUses(i)
	return rppuo
}

// SetNillableUses sets the "uses" field if the given value is not nil.
func (rppuo *RolePanelPlacedUpdateOne) SetNillableUses(i *int) *RolePanelPlacedUpdateOne {
	if i != nil {
		rppuo.SetUses(*i)
	}
	return rppuo
}

// AddUses adds i to the "uses" field.
func (rppuo *RolePanelPlacedUpdateOne) AddUses(i int) *RolePanelPlacedUpdateOne {
	rppuo.mutation.AddUses(i)
	return rppuo
}

// SetGuildID sets the "guild" edge to the Guild entity by ID.
func (rppuo *RolePanelPlacedUpdateOne) SetGuildID(id snowflake.ID) *RolePanelPlacedUpdateOne {
	rppuo.mutation.SetGuildID(id)
	return rppuo
}

// SetGuild sets the "guild" edge to the Guild entity.
func (rppuo *RolePanelPlacedUpdateOne) SetGuild(g *Guild) *RolePanelPlacedUpdateOne {
	return rppuo.SetGuildID(g.ID)
}

// SetRolePanelID sets the "role_panel" edge to the RolePanel entity by ID.
func (rppuo *RolePanelPlacedUpdateOne) SetRolePanelID(id uuid.UUID) *RolePanelPlacedUpdateOne {
	rppuo.mutation.SetRolePanelID(id)
	return rppuo
}

// SetRolePanel sets the "role_panel" edge to the RolePanel entity.
func (rppuo *RolePanelPlacedUpdateOne) SetRolePanel(r *RolePanel) *RolePanelPlacedUpdateOne {
	return rppuo.SetRolePanelID(r.ID)
}

// Mutation returns the RolePanelPlacedMutation object of the builder.
func (rppuo *RolePanelPlacedUpdateOne) Mutation() *RolePanelPlacedMutation {
	return rppuo.mutation
}

// ClearGuild clears the "guild" edge to the Guild entity.
func (rppuo *RolePanelPlacedUpdateOne) ClearGuild() *RolePanelPlacedUpdateOne {
	rppuo.mutation.ClearGuild()
	return rppuo
}

// ClearRolePanel clears the "role_panel" edge to the RolePanel entity.
func (rppuo *RolePanelPlacedUpdateOne) ClearRolePanel() *RolePanelPlacedUpdateOne {
	rppuo.mutation.ClearRolePanel()
	return rppuo
}

// Where appends a list predicates to the RolePanelPlacedUpdate builder.
func (rppuo *RolePanelPlacedUpdateOne) Where(ps ...predicate.RolePanelPlaced) *RolePanelPlacedUpdateOne {
	rppuo.mutation.Where(ps...)
	return rppuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rppuo *RolePanelPlacedUpdateOne) Select(field string, fields ...string) *RolePanelPlacedUpdateOne {
	rppuo.fields = append([]string{field}, fields...)
	return rppuo
}

// Save executes the query and returns the updated RolePanelPlaced entity.
func (rppuo *RolePanelPlacedUpdateOne) Save(ctx context.Context) (*RolePanelPlaced, error) {
	return withHooks(ctx, rppuo.sqlSave, rppuo.mutation, rppuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rppuo *RolePanelPlacedUpdateOne) SaveX(ctx context.Context) *RolePanelPlaced {
	node, err := rppuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rppuo *RolePanelPlacedUpdateOne) Exec(ctx context.Context) error {
	_, err := rppuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rppuo *RolePanelPlacedUpdateOne) ExecX(ctx context.Context) {
	if err := rppuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rppuo *RolePanelPlacedUpdateOne) check() error {
	if v, ok := rppuo.mutation.GetType(); ok {
		if err := rolepanelplaced.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "RolePanelPlaced.type": %w`, err)}
		}
	}
	if v, ok := rppuo.mutation.ButtonType(); ok {
		if err := rolepanelplaced.ButtonTypeValidator(int(v)); err != nil {
			return &ValidationError{Name: "button_type", err: fmt.Errorf(`ent: validator failed for field "RolePanelPlaced.button_type": %w`, err)}
		}
	}
	if _, ok := rppuo.mutation.GuildID(); rppuo.mutation.GuildCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RolePanelPlaced.guild"`)
	}
	if _, ok := rppuo.mutation.RolePanelID(); rppuo.mutation.RolePanelCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "RolePanelPlaced.role_panel"`)
	}
	return nil
}

func (rppuo *RolePanelPlacedUpdateOne) sqlSave(ctx context.Context) (_node *RolePanelPlaced, err error) {
	if err := rppuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rolepanelplaced.Table, rolepanelplaced.Columns, sqlgraph.NewFieldSpec(rolepanelplaced.FieldID, field.TypeUUID))
	id, ok := rppuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RolePanelPlaced.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rppuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rolepanelplaced.FieldID)
		for _, f := range fields {
			if !rolepanelplaced.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rolepanelplaced.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rppuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rppuo.mutation.MessageID(); ok {
		_spec.SetField(rolepanelplaced.FieldMessageID, field.TypeUint64, value)
	}
	if value, ok := rppuo.mutation.AddedMessageID(); ok {
		_spec.AddField(rolepanelplaced.FieldMessageID, field.TypeUint64, value)
	}
	if rppuo.mutation.MessageIDCleared() {
		_spec.ClearField(rolepanelplaced.FieldMessageID, field.TypeUint64)
	}
	if value, ok := rppuo.mutation.ChannelID(); ok {
		_spec.SetField(rolepanelplaced.FieldChannelID, field.TypeUint64, value)
	}
	if value, ok := rppuo.mutation.AddedChannelID(); ok {
		_spec.AddField(rolepanelplaced.FieldChannelID, field.TypeUint64, value)
	}
	if value, ok := rppuo.mutation.GetType(); ok {
		_spec.SetField(rolepanelplaced.FieldType, field.TypeEnum, value)
	}
	if rppuo.mutation.TypeCleared() {
		_spec.ClearField(rolepanelplaced.FieldType, field.TypeEnum)
	}
	if value, ok := rppuo.mutation.ButtonType(); ok {
		_spec.SetField(rolepanelplaced.FieldButtonType, field.TypeInt, value)
	}
	if value, ok := rppuo.mutation.AddedButtonType(); ok {
		_spec.AddField(rolepanelplaced.FieldButtonType, field.TypeInt, value)
	}
	if value, ok := rppuo.mutation.ShowName(); ok {
		_spec.SetField(rolepanelplaced.FieldShowName, field.TypeBool, value)
	}
	if value, ok := rppuo.mutation.FoldingSelectMenu(); ok {
		_spec.SetField(rolepanelplaced.FieldFoldingSelectMenu, field.TypeBool, value)
	}
	if value, ok := rppuo.mutation.HideNotice(); ok {
		_spec.SetField(rolepanelplaced.FieldHideNotice, field.TypeBool, value)
	}
	if value, ok := rppuo.mutation.UseDisplayName(); ok {
		_spec.SetField(rolepanelplaced.FieldUseDisplayName, field.TypeBool, value)
	}
	if value, ok := rppuo.mutation.Uses(); ok {
		_spec.SetField(rolepanelplaced.FieldUses, field.TypeInt, value)
	}
	if value, ok := rppuo.mutation.AddedUses(); ok {
		_spec.AddField(rolepanelplaced.FieldUses, field.TypeInt, value)
	}
	if rppuo.mutation.GuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolepanelplaced.GuildTable,
			Columns: []string{rolepanelplaced.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rppuo.mutation.GuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolepanelplaced.GuildTable,
			Columns: []string{rolepanelplaced.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rppuo.mutation.RolePanelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolepanelplaced.RolePanelTable,
			Columns: []string{rolepanelplaced.RolePanelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolepanel.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rppuo.mutation.RolePanelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rolepanelplaced.RolePanelTable,
			Columns: []string{rolepanelplaced.RolePanelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rolepanel.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RolePanelPlaced{config: rppuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rppuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rolepanelplaced.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rppuo.mutation.done = true
	return _node, nil
}
