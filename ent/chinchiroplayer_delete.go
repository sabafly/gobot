// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sabafly/gobot/ent/chinchiroplayer"
	"github.com/sabafly/gobot/ent/predicate"
)

// ChinchiroPlayerDelete is the builder for deleting a ChinchiroPlayer entity.
type ChinchiroPlayerDelete struct {
	config
	hooks    []Hook
	mutation *ChinchiroPlayerMutation
}

// Where appends a list predicates to the ChinchiroPlayerDelete builder.
func (cpd *ChinchiroPlayerDelete) Where(ps ...predicate.ChinchiroPlayer) *ChinchiroPlayerDelete {
	cpd.mutation.Where(ps...)
	return cpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cpd *ChinchiroPlayerDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cpd.sqlExec, cpd.mutation, cpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cpd *ChinchiroPlayerDelete) ExecX(ctx context.Context) int {
	n, err := cpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cpd *ChinchiroPlayerDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(chinchiroplayer.Table, sqlgraph.NewFieldSpec(chinchiroplayer.FieldID, field.TypeUUID))
	if ps := cpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cpd.mutation.done = true
	return affected, err
}

// ChinchiroPlayerDeleteOne is the builder for deleting a single ChinchiroPlayer entity.
type ChinchiroPlayerDeleteOne struct {
	cpd *ChinchiroPlayerDelete
}

// Where appends a list predicates to the ChinchiroPlayerDelete builder.
func (cpdo *ChinchiroPlayerDeleteOne) Where(ps ...predicate.ChinchiroPlayer) *ChinchiroPlayerDeleteOne {
	cpdo.cpd.mutation.Where(ps...)
	return cpdo
}

// Exec executes the deletion query.
func (cpdo *ChinchiroPlayerDeleteOne) Exec(ctx context.Context) error {
	n, err := cpdo.cpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{chinchiroplayer.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cpdo *ChinchiroPlayerDeleteOne) ExecX(ctx context.Context) {
	if err := cpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
