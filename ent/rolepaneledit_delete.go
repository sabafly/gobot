// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sabafly/gobot/ent/predicate"
	"github.com/sabafly/gobot/ent/rolepaneledit"
)

// RolePanelEditDelete is the builder for deleting a RolePanelEdit entity.
type RolePanelEditDelete struct {
	config
	hooks    []Hook
	mutation *RolePanelEditMutation
}

// Where appends a list predicates to the RolePanelEditDelete builder.
func (rped *RolePanelEditDelete) Where(ps ...predicate.RolePanelEdit) *RolePanelEditDelete {
	rped.mutation.Where(ps...)
	return rped
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rped *RolePanelEditDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rped.sqlExec, rped.mutation, rped.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rped *RolePanelEditDelete) ExecX(ctx context.Context) int {
	n, err := rped.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rped *RolePanelEditDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(rolepaneledit.Table, sqlgraph.NewFieldSpec(rolepaneledit.FieldID, field.TypeUUID))
	if ps := rped.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rped.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rped.mutation.done = true
	return affected, err
}

// RolePanelEditDeleteOne is the builder for deleting a single RolePanelEdit entity.
type RolePanelEditDeleteOne struct {
	rped *RolePanelEditDelete
}

// Where appends a list predicates to the RolePanelEditDelete builder.
func (rpedo *RolePanelEditDeleteOne) Where(ps ...predicate.RolePanelEdit) *RolePanelEditDeleteOne {
	rpedo.rped.mutation.Where(ps...)
	return rpedo
}

// Exec executes the deletion query.
func (rpedo *RolePanelEditDeleteOne) Exec(ctx context.Context) error {
	n, err := rpedo.rped.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{rolepaneledit.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rpedo *RolePanelEditDeleteOne) ExecX(ctx context.Context) {
	if err := rpedo.Exec(ctx); err != nil {
		panic(err)
	}
}
