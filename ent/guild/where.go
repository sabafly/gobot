// Code generated by ent, DO NOT EDIT.

package guild

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/disgoorg/disgo/discord"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/sabafly/gobot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id snowflake.ID) predicate.Guild {
	return predicate.Guild(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id snowflake.ID) predicate.Guild {
	return predicate.Guild(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id snowflake.ID) predicate.Guild {
	return predicate.Guild(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...snowflake.ID) predicate.Guild {
	return predicate.Guild(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...snowflake.ID) predicate.Guild {
	return predicate.Guild(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id snowflake.ID) predicate.Guild {
	return predicate.Guild(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id snowflake.ID) predicate.Guild {
	return predicate.Guild(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id snowflake.ID) predicate.Guild {
	return predicate.Guild(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id snowflake.ID) predicate.Guild {
	return predicate.Guild(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Guild {
	return predicate.Guild(sql.FieldEQ(FieldName, v))
}

// Locale applies equality check predicate on the "locale" field. It's identical to LocaleEQ.
func Locale(v discord.Locale) predicate.Guild {
	vc := string(v)
	return predicate.Guild(sql.FieldEQ(FieldLocale, vc))
}

// LevelUpMessage applies equality check predicate on the "level_up_message" field. It's identical to LevelUpMessageEQ.
func LevelUpMessage(v string) predicate.Guild {
	return predicate.Guild(sql.FieldEQ(FieldLevelUpMessage, v))
}

// LevelUpChannel applies equality check predicate on the "level_up_channel" field. It's identical to LevelUpChannelEQ.
func LevelUpChannel(v snowflake.ID) predicate.Guild {
	vc := uint64(v)
	return predicate.Guild(sql.FieldEQ(FieldLevelUpChannel, vc))
}

// LevelMee6Imported applies equality check predicate on the "level_mee6_imported" field. It's identical to LevelMee6ImportedEQ.
func LevelMee6Imported(v bool) predicate.Guild {
	return predicate.Guild(sql.FieldEQ(FieldLevelMee6Imported, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Guild {
	return predicate.Guild(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Guild {
	return predicate.Guild(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Guild {
	return predicate.Guild(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Guild {
	return predicate.Guild(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Guild {
	return predicate.Guild(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Guild {
	return predicate.Guild(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Guild {
	return predicate.Guild(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Guild {
	return predicate.Guild(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Guild {
	return predicate.Guild(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Guild {
	return predicate.Guild(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Guild {
	return predicate.Guild(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Guild {
	return predicate.Guild(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Guild {
	return predicate.Guild(sql.FieldContainsFold(FieldName, v))
}

// LocaleEQ applies the EQ predicate on the "locale" field.
func LocaleEQ(v discord.Locale) predicate.Guild {
	vc := string(v)
	return predicate.Guild(sql.FieldEQ(FieldLocale, vc))
}

// LocaleNEQ applies the NEQ predicate on the "locale" field.
func LocaleNEQ(v discord.Locale) predicate.Guild {
	vc := string(v)
	return predicate.Guild(sql.FieldNEQ(FieldLocale, vc))
}

// LocaleIn applies the In predicate on the "locale" field.
func LocaleIn(vs ...discord.Locale) predicate.Guild {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Guild(sql.FieldIn(FieldLocale, v...))
}

// LocaleNotIn applies the NotIn predicate on the "locale" field.
func LocaleNotIn(vs ...discord.Locale) predicate.Guild {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.Guild(sql.FieldNotIn(FieldLocale, v...))
}

// LocaleGT applies the GT predicate on the "locale" field.
func LocaleGT(v discord.Locale) predicate.Guild {
	vc := string(v)
	return predicate.Guild(sql.FieldGT(FieldLocale, vc))
}

// LocaleGTE applies the GTE predicate on the "locale" field.
func LocaleGTE(v discord.Locale) predicate.Guild {
	vc := string(v)
	return predicate.Guild(sql.FieldGTE(FieldLocale, vc))
}

// LocaleLT applies the LT predicate on the "locale" field.
func LocaleLT(v discord.Locale) predicate.Guild {
	vc := string(v)
	return predicate.Guild(sql.FieldLT(FieldLocale, vc))
}

// LocaleLTE applies the LTE predicate on the "locale" field.
func LocaleLTE(v discord.Locale) predicate.Guild {
	vc := string(v)
	return predicate.Guild(sql.FieldLTE(FieldLocale, vc))
}

// LocaleContains applies the Contains predicate on the "locale" field.
func LocaleContains(v discord.Locale) predicate.Guild {
	vc := string(v)
	return predicate.Guild(sql.FieldContains(FieldLocale, vc))
}

// LocaleHasPrefix applies the HasPrefix predicate on the "locale" field.
func LocaleHasPrefix(v discord.Locale) predicate.Guild {
	vc := string(v)
	return predicate.Guild(sql.FieldHasPrefix(FieldLocale, vc))
}

// LocaleHasSuffix applies the HasSuffix predicate on the "locale" field.
func LocaleHasSuffix(v discord.Locale) predicate.Guild {
	vc := string(v)
	return predicate.Guild(sql.FieldHasSuffix(FieldLocale, vc))
}

// LocaleEqualFold applies the EqualFold predicate on the "locale" field.
func LocaleEqualFold(v discord.Locale) predicate.Guild {
	vc := string(v)
	return predicate.Guild(sql.FieldEqualFold(FieldLocale, vc))
}

// LocaleContainsFold applies the ContainsFold predicate on the "locale" field.
func LocaleContainsFold(v discord.Locale) predicate.Guild {
	vc := string(v)
	return predicate.Guild(sql.FieldContainsFold(FieldLocale, vc))
}

// LevelUpMessageEQ applies the EQ predicate on the "level_up_message" field.
func LevelUpMessageEQ(v string) predicate.Guild {
	return predicate.Guild(sql.FieldEQ(FieldLevelUpMessage, v))
}

// LevelUpMessageNEQ applies the NEQ predicate on the "level_up_message" field.
func LevelUpMessageNEQ(v string) predicate.Guild {
	return predicate.Guild(sql.FieldNEQ(FieldLevelUpMessage, v))
}

// LevelUpMessageIn applies the In predicate on the "level_up_message" field.
func LevelUpMessageIn(vs ...string) predicate.Guild {
	return predicate.Guild(sql.FieldIn(FieldLevelUpMessage, vs...))
}

// LevelUpMessageNotIn applies the NotIn predicate on the "level_up_message" field.
func LevelUpMessageNotIn(vs ...string) predicate.Guild {
	return predicate.Guild(sql.FieldNotIn(FieldLevelUpMessage, vs...))
}

// LevelUpMessageGT applies the GT predicate on the "level_up_message" field.
func LevelUpMessageGT(v string) predicate.Guild {
	return predicate.Guild(sql.FieldGT(FieldLevelUpMessage, v))
}

// LevelUpMessageGTE applies the GTE predicate on the "level_up_message" field.
func LevelUpMessageGTE(v string) predicate.Guild {
	return predicate.Guild(sql.FieldGTE(FieldLevelUpMessage, v))
}

// LevelUpMessageLT applies the LT predicate on the "level_up_message" field.
func LevelUpMessageLT(v string) predicate.Guild {
	return predicate.Guild(sql.FieldLT(FieldLevelUpMessage, v))
}

// LevelUpMessageLTE applies the LTE predicate on the "level_up_message" field.
func LevelUpMessageLTE(v string) predicate.Guild {
	return predicate.Guild(sql.FieldLTE(FieldLevelUpMessage, v))
}

// LevelUpMessageContains applies the Contains predicate on the "level_up_message" field.
func LevelUpMessageContains(v string) predicate.Guild {
	return predicate.Guild(sql.FieldContains(FieldLevelUpMessage, v))
}

// LevelUpMessageHasPrefix applies the HasPrefix predicate on the "level_up_message" field.
func LevelUpMessageHasPrefix(v string) predicate.Guild {
	return predicate.Guild(sql.FieldHasPrefix(FieldLevelUpMessage, v))
}

// LevelUpMessageHasSuffix applies the HasSuffix predicate on the "level_up_message" field.
func LevelUpMessageHasSuffix(v string) predicate.Guild {
	return predicate.Guild(sql.FieldHasSuffix(FieldLevelUpMessage, v))
}

// LevelUpMessageEqualFold applies the EqualFold predicate on the "level_up_message" field.
func LevelUpMessageEqualFold(v string) predicate.Guild {
	return predicate.Guild(sql.FieldEqualFold(FieldLevelUpMessage, v))
}

// LevelUpMessageContainsFold applies the ContainsFold predicate on the "level_up_message" field.
func LevelUpMessageContainsFold(v string) predicate.Guild {
	return predicate.Guild(sql.FieldContainsFold(FieldLevelUpMessage, v))
}

// LevelUpChannelEQ applies the EQ predicate on the "level_up_channel" field.
func LevelUpChannelEQ(v snowflake.ID) predicate.Guild {
	vc := uint64(v)
	return predicate.Guild(sql.FieldEQ(FieldLevelUpChannel, vc))
}

// LevelUpChannelNEQ applies the NEQ predicate on the "level_up_channel" field.
func LevelUpChannelNEQ(v snowflake.ID) predicate.Guild {
	vc := uint64(v)
	return predicate.Guild(sql.FieldNEQ(FieldLevelUpChannel, vc))
}

// LevelUpChannelIn applies the In predicate on the "level_up_channel" field.
func LevelUpChannelIn(vs ...snowflake.ID) predicate.Guild {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Guild(sql.FieldIn(FieldLevelUpChannel, v...))
}

// LevelUpChannelNotIn applies the NotIn predicate on the "level_up_channel" field.
func LevelUpChannelNotIn(vs ...snowflake.ID) predicate.Guild {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Guild(sql.FieldNotIn(FieldLevelUpChannel, v...))
}

// LevelUpChannelGT applies the GT predicate on the "level_up_channel" field.
func LevelUpChannelGT(v snowflake.ID) predicate.Guild {
	vc := uint64(v)
	return predicate.Guild(sql.FieldGT(FieldLevelUpChannel, vc))
}

// LevelUpChannelGTE applies the GTE predicate on the "level_up_channel" field.
func LevelUpChannelGTE(v snowflake.ID) predicate.Guild {
	vc := uint64(v)
	return predicate.Guild(sql.FieldGTE(FieldLevelUpChannel, vc))
}

// LevelUpChannelLT applies the LT predicate on the "level_up_channel" field.
func LevelUpChannelLT(v snowflake.ID) predicate.Guild {
	vc := uint64(v)
	return predicate.Guild(sql.FieldLT(FieldLevelUpChannel, vc))
}

// LevelUpChannelLTE applies the LTE predicate on the "level_up_channel" field.
func LevelUpChannelLTE(v snowflake.ID) predicate.Guild {
	vc := uint64(v)
	return predicate.Guild(sql.FieldLTE(FieldLevelUpChannel, vc))
}

// LevelUpChannelIsNil applies the IsNil predicate on the "level_up_channel" field.
func LevelUpChannelIsNil() predicate.Guild {
	return predicate.Guild(sql.FieldIsNull(FieldLevelUpChannel))
}

// LevelUpChannelNotNil applies the NotNil predicate on the "level_up_channel" field.
func LevelUpChannelNotNil() predicate.Guild {
	return predicate.Guild(sql.FieldNotNull(FieldLevelUpChannel))
}

// LevelUpExcludeChannelIsNil applies the IsNil predicate on the "level_up_exclude_channel" field.
func LevelUpExcludeChannelIsNil() predicate.Guild {
	return predicate.Guild(sql.FieldIsNull(FieldLevelUpExcludeChannel))
}

// LevelUpExcludeChannelNotNil applies the NotNil predicate on the "level_up_exclude_channel" field.
func LevelUpExcludeChannelNotNil() predicate.Guild {
	return predicate.Guild(sql.FieldNotNull(FieldLevelUpExcludeChannel))
}

// LevelMee6ImportedEQ applies the EQ predicate on the "level_mee6_imported" field.
func LevelMee6ImportedEQ(v bool) predicate.Guild {
	return predicate.Guild(sql.FieldEQ(FieldLevelMee6Imported, v))
}

// LevelMee6ImportedNEQ applies the NEQ predicate on the "level_mee6_imported" field.
func LevelMee6ImportedNEQ(v bool) predicate.Guild {
	return predicate.Guild(sql.FieldNEQ(FieldLevelMee6Imported, v))
}

// LevelRoleIsNil applies the IsNil predicate on the "level_role" field.
func LevelRoleIsNil() predicate.Guild {
	return predicate.Guild(sql.FieldIsNull(FieldLevelRole))
}

// LevelRoleNotNil applies the NotNil predicate on the "level_role" field.
func LevelRoleNotNil() predicate.Guild {
	return predicate.Guild(sql.FieldNotNull(FieldLevelRole))
}

// PermissionsIsNil applies the IsNil predicate on the "permissions" field.
func PermissionsIsNil() predicate.Guild {
	return predicate.Guild(sql.FieldIsNull(FieldPermissions))
}

// PermissionsNotNil applies the NotNil predicate on the "permissions" field.
func PermissionsNotNil() predicate.Guild {
	return predicate.Guild(sql.FieldNotNull(FieldPermissions))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMembers applies the HasEdge predicate on the "members" edge.
func HasMembers() predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MembersTable, MembersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMembersWith applies the HasEdge predicate on the "members" edge with a given conditions (other predicates).
func HasMembersWith(preds ...predicate.Member) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		step := newMembersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMessagePins applies the HasEdge predicate on the "message_pins" edge.
func HasMessagePins() predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, MessagePinsTable, MessagePinsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMessagePinsWith applies the HasEdge predicate on the "message_pins" edge with a given conditions (other predicates).
func HasMessagePinsWith(preds ...predicate.MessagePin) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		step := newMessagePinsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRolePanels applies the HasEdge predicate on the "role_panels" edge.
func HasRolePanels() predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RolePanelsTable, RolePanelsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolePanelsWith applies the HasEdge predicate on the "role_panels" edge with a given conditions (other predicates).
func HasRolePanelsWith(preds ...predicate.RolePanel) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		step := newRolePanelsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRolePanelPlacements applies the HasEdge predicate on the "role_panel_placements" edge.
func HasRolePanelPlacements() predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RolePanelPlacementsTable, RolePanelPlacementsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolePanelPlacementsWith applies the HasEdge predicate on the "role_panel_placements" edge with a given conditions (other predicates).
func HasRolePanelPlacementsWith(preds ...predicate.RolePanelPlaced) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		step := newRolePanelPlacementsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRolePanelEdits applies the HasEdge predicate on the "role_panel_edits" edge.
func HasRolePanelEdits() predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RolePanelEditsTable, RolePanelEditsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolePanelEditsWith applies the HasEdge predicate on the "role_panel_edits" edge with a given conditions (other predicates).
func HasRolePanelEditsWith(preds ...predicate.RolePanelEdit) predicate.Guild {
	return predicate.Guild(func(s *sql.Selector) {
		step := newRolePanelEditsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Guild) predicate.Guild {
	return predicate.Guild(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Guild) predicate.Guild {
	return predicate.Guild(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Guild) predicate.Guild {
	return predicate.Guild(sql.NotPredicates(p))
}
