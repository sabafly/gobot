// Code generated by ent, DO NOT EDIT.

package guild

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/disgoorg/disgo/discord"
)

const (
	// Label holds the string label denoting the guild type in the database.
	Label = "guild"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldLocale holds the string denoting the locale field in the database.
	FieldLocale = "locale"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeMembers holds the string denoting the members edge name in mutations.
	EdgeMembers = "members"
	// EdgeMessagePins holds the string denoting the message_pins edge name in mutations.
	EdgeMessagePins = "message_pins"
	// EdgeRolePanels holds the string denoting the role_panels edge name in mutations.
	EdgeRolePanels = "role_panels"
	// EdgeRolePanelPlacements holds the string denoting the role_panel_placements edge name in mutations.
	EdgeRolePanelPlacements = "role_panel_placements"
	// EdgeRolePanelEdits holds the string denoting the role_panel_edits edge name in mutations.
	EdgeRolePanelEdits = "role_panel_edits"
	// Table holds the table name of the guild in the database.
	Table = "guilds"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "guilds"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_own_guilds"
	// MembersTable is the table that holds the members relation/edge.
	MembersTable = "members"
	// MembersInverseTable is the table name for the Member entity.
	// It exists in this package in order to avoid circular dependency with the "member" package.
	MembersInverseTable = "members"
	// MembersColumn is the table column denoting the members relation/edge.
	MembersColumn = "guild_members"
	// MessagePinsTable is the table that holds the message_pins relation/edge.
	MessagePinsTable = "message_pins"
	// MessagePinsInverseTable is the table name for the MessagePin entity.
	// It exists in this package in order to avoid circular dependency with the "messagepin" package.
	MessagePinsInverseTable = "message_pins"
	// MessagePinsColumn is the table column denoting the message_pins relation/edge.
	MessagePinsColumn = "guild_message_pins"
	// RolePanelsTable is the table that holds the role_panels relation/edge.
	RolePanelsTable = "role_panels"
	// RolePanelsInverseTable is the table name for the RolePanel entity.
	// It exists in this package in order to avoid circular dependency with the "rolepanel" package.
	RolePanelsInverseTable = "role_panels"
	// RolePanelsColumn is the table column denoting the role_panels relation/edge.
	RolePanelsColumn = "guild_role_panels"
	// RolePanelPlacementsTable is the table that holds the role_panel_placements relation/edge.
	RolePanelPlacementsTable = "role_panel_placeds"
	// RolePanelPlacementsInverseTable is the table name for the RolePanelPlaced entity.
	// It exists in this package in order to avoid circular dependency with the "rolepanelplaced" package.
	RolePanelPlacementsInverseTable = "role_panel_placeds"
	// RolePanelPlacementsColumn is the table column denoting the role_panel_placements relation/edge.
	RolePanelPlacementsColumn = "guild_role_panel_placements"
	// RolePanelEditsTable is the table that holds the role_panel_edits relation/edge.
	RolePanelEditsTable = "role_panel_edits"
	// RolePanelEditsInverseTable is the table name for the RolePanelEdit entity.
	// It exists in this package in order to avoid circular dependency with the "rolepaneledit" package.
	RolePanelEditsInverseTable = "role_panel_edits"
	// RolePanelEditsColumn is the table column denoting the role_panel_edits relation/edge.
	RolePanelEditsColumn = "guild_role_panel_edits"
)

// Columns holds all SQL columns for guild fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldLocale,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "guilds"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_own_guilds",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultLocale holds the default value on creation for the "locale" field.
	DefaultLocale discord.Locale
	// LocaleValidator is a validator for the "locale" field. It is called by the builders before save.
	LocaleValidator func(string) error
)

// OrderOption defines the ordering options for the Guild queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByLocale orders the results by the locale field.
func ByLocale(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocale, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByMembersCount orders the results by members count.
func ByMembersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMembersStep(), opts...)
	}
}

// ByMembers orders the results by members terms.
func ByMembers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMembersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMessagePinsCount orders the results by message_pins count.
func ByMessagePinsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMessagePinsStep(), opts...)
	}
}

// ByMessagePins orders the results by message_pins terms.
func ByMessagePins(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMessagePinsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRolePanelsCount orders the results by role_panels count.
func ByRolePanelsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRolePanelsStep(), opts...)
	}
}

// ByRolePanels orders the results by role_panels terms.
func ByRolePanels(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRolePanelsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRolePanelPlacementsCount orders the results by role_panel_placements count.
func ByRolePanelPlacementsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRolePanelPlacementsStep(), opts...)
	}
}

// ByRolePanelPlacements orders the results by role_panel_placements terms.
func ByRolePanelPlacements(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRolePanelPlacementsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRolePanelEditsCount orders the results by role_panel_edits count.
func ByRolePanelEditsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRolePanelEditsStep(), opts...)
	}
}

// ByRolePanelEdits orders the results by role_panel_edits terms.
func ByRolePanelEdits(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRolePanelEditsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newMembersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MembersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MembersTable, MembersColumn),
	)
}
func newMessagePinsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MessagePinsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MessagePinsTable, MessagePinsColumn),
	)
}
func newRolePanelsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RolePanelsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RolePanelsTable, RolePanelsColumn),
	)
}
func newRolePanelPlacementsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RolePanelPlacementsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RolePanelPlacementsTable, RolePanelPlacementsColumn),
	)
}
func newRolePanelEditsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RolePanelEditsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RolePanelEditsTable, RolePanelEditsColumn),
	)
}
