// Code generated by ent, DO NOT EDIT.

package guild

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/disgoorg/disgo/discord"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/sabafly/gobot/internal/permissions"
)

const (
	// Label holds the string label denoting the guild type in the database.
	Label = "guild"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldLocale holds the string denoting the locale field in the database.
	FieldLocale = "locale"
	// FieldLevelUpMessage holds the string denoting the level_up_message field in the database.
	FieldLevelUpMessage = "level_up_message"
	// FieldLevelUpChannel holds the string denoting the level_up_channel field in the database.
	FieldLevelUpChannel = "level_up_channel"
	// FieldLevelUpExcludeChannel holds the string denoting the level_up_exclude_channel field in the database.
	FieldLevelUpExcludeChannel = "level_up_exclude_channel"
	// FieldLevelMee6Imported holds the string denoting the level_mee6_imported field in the database.
	FieldLevelMee6Imported = "level_mee6_imported"
	// FieldLevelRole holds the string denoting the level_role field in the database.
	FieldLevelRole = "level_role"
	// FieldPermissions holds the string denoting the permissions field in the database.
	FieldPermissions = "permissions"
	// FieldRemindCount holds the string denoting the remind_count field in the database.
	FieldRemindCount = "remind_count"
	// FieldRolePanelEditTimes holds the string denoting the role_panel_edit_times field in the database.
	FieldRolePanelEditTimes = "role_panel_edit_times"
	// FieldBumpEnabled holds the string denoting the bump_enabled field in the database.
	FieldBumpEnabled = "bump_enabled"
	// FieldBumpMessageTitle holds the string denoting the bump_message_title field in the database.
	FieldBumpMessageTitle = "bump_message_title"
	// FieldBumpMessage holds the string denoting the bump_message field in the database.
	FieldBumpMessage = "bump_message"
	// FieldBumpRemindMessageTitle holds the string denoting the bump_remind_message_title field in the database.
	FieldBumpRemindMessageTitle = "bump_remind_message_title"
	// FieldBumpRemindMessage holds the string denoting the bump_remind_message field in the database.
	FieldBumpRemindMessage = "bump_remind_message"
	// FieldUpEnabled holds the string denoting the up_enabled field in the database.
	FieldUpEnabled = "up_enabled"
	// FieldUpMessageTitle holds the string denoting the up_message_title field in the database.
	FieldUpMessageTitle = "up_message_title"
	// FieldUpMessage holds the string denoting the up_message field in the database.
	FieldUpMessage = "up_message"
	// FieldUpRemindMessageTitle holds the string denoting the up_remind_message_title field in the database.
	FieldUpRemindMessageTitle = "up_remind_message_title"
	// FieldUpRemindMessage holds the string denoting the up_remind_message field in the database.
	FieldUpRemindMessage = "up_remind_message"
	// FieldBumpMention holds the string denoting the bump_mention field in the database.
	FieldBumpMention = "bump_mention"
	// FieldUpMention holds the string denoting the up_mention field in the database.
	FieldUpMention = "up_mention"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeMembers holds the string denoting the members edge name in mutations.
	EdgeMembers = "members"
	// EdgeMessagePins holds the string denoting the message_pins edge name in mutations.
	EdgeMessagePins = "message_pins"
	// EdgeReminds holds the string denoting the reminds edge name in mutations.
	EdgeReminds = "reminds"
	// EdgeRolePanels holds the string denoting the role_panels edge name in mutations.
	EdgeRolePanels = "role_panels"
	// EdgeRolePanelPlacements holds the string denoting the role_panel_placements edge name in mutations.
	EdgeRolePanelPlacements = "role_panel_placements"
	// EdgeRolePanelEdits holds the string denoting the role_panel_edits edge name in mutations.
	EdgeRolePanelEdits = "role_panel_edits"
	// EdgeChinchiroSessions holds the string denoting the chinchiro_sessions edge name in mutations.
	EdgeChinchiroSessions = "chinchiro_sessions"
	// Table holds the table name of the guild in the database.
	Table = "guilds"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "guilds"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_own_guilds"
	// MembersTable is the table that holds the members relation/edge.
	MembersTable = "members"
	// MembersInverseTable is the table name for the Member entity.
	// It exists in this package in order to avoid circular dependency with the "member" package.
	MembersInverseTable = "members"
	// MembersColumn is the table column denoting the members relation/edge.
	MembersColumn = "guild_members"
	// MessagePinsTable is the table that holds the message_pins relation/edge.
	MessagePinsTable = "message_pins"
	// MessagePinsInverseTable is the table name for the MessagePin entity.
	// It exists in this package in order to avoid circular dependency with the "messagepin" package.
	MessagePinsInverseTable = "message_pins"
	// MessagePinsColumn is the table column denoting the message_pins relation/edge.
	MessagePinsColumn = "guild_message_pins"
	// RemindsTable is the table that holds the reminds relation/edge.
	RemindsTable = "message_reminds"
	// RemindsInverseTable is the table name for the MessageRemind entity.
	// It exists in this package in order to avoid circular dependency with the "messageremind" package.
	RemindsInverseTable = "message_reminds"
	// RemindsColumn is the table column denoting the reminds relation/edge.
	RemindsColumn = "guild_reminds"
	// RolePanelsTable is the table that holds the role_panels relation/edge.
	RolePanelsTable = "role_panels"
	// RolePanelsInverseTable is the table name for the RolePanel entity.
	// It exists in this package in order to avoid circular dependency with the "rolepanel" package.
	RolePanelsInverseTable = "role_panels"
	// RolePanelsColumn is the table column denoting the role_panels relation/edge.
	RolePanelsColumn = "guild_role_panels"
	// RolePanelPlacementsTable is the table that holds the role_panel_placements relation/edge.
	RolePanelPlacementsTable = "role_panel_placeds"
	// RolePanelPlacementsInverseTable is the table name for the RolePanelPlaced entity.
	// It exists in this package in order to avoid circular dependency with the "rolepanelplaced" package.
	RolePanelPlacementsInverseTable = "role_panel_placeds"
	// RolePanelPlacementsColumn is the table column denoting the role_panel_placements relation/edge.
	RolePanelPlacementsColumn = "guild_role_panel_placements"
	// RolePanelEditsTable is the table that holds the role_panel_edits relation/edge.
	RolePanelEditsTable = "role_panel_edits"
	// RolePanelEditsInverseTable is the table name for the RolePanelEdit entity.
	// It exists in this package in order to avoid circular dependency with the "rolepaneledit" package.
	RolePanelEditsInverseTable = "role_panel_edits"
	// RolePanelEditsColumn is the table column denoting the role_panel_edits relation/edge.
	RolePanelEditsColumn = "guild_role_panel_edits"
	// ChinchiroSessionsTable is the table that holds the chinchiro_sessions relation/edge.
	ChinchiroSessionsTable = "chinchiro_sessions"
	// ChinchiroSessionsInverseTable is the table name for the ChinchiroSession entity.
	// It exists in this package in order to avoid circular dependency with the "chinchirosession" package.
	ChinchiroSessionsInverseTable = "chinchiro_sessions"
	// ChinchiroSessionsColumn is the table column denoting the chinchiro_sessions relation/edge.
	ChinchiroSessionsColumn = "guild_chinchiro_sessions"
)

// Columns holds all SQL columns for guild fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldLocale,
	FieldLevelUpMessage,
	FieldLevelUpChannel,
	FieldLevelUpExcludeChannel,
	FieldLevelMee6Imported,
	FieldLevelRole,
	FieldPermissions,
	FieldRemindCount,
	FieldRolePanelEditTimes,
	FieldBumpEnabled,
	FieldBumpMessageTitle,
	FieldBumpMessage,
	FieldBumpRemindMessageTitle,
	FieldBumpRemindMessage,
	FieldUpEnabled,
	FieldUpMessageTitle,
	FieldUpMessage,
	FieldUpRemindMessageTitle,
	FieldUpRemindMessage,
	FieldBumpMention,
	FieldUpMention,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "guilds"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_own_guilds",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultLocale holds the default value on creation for the "locale" field.
	DefaultLocale discord.Locale
	// LocaleValidator is a validator for the "locale" field. It is called by the builders before save.
	LocaleValidator func(string) error
	// DefaultLevelUpMessage holds the default value on creation for the "level_up_message" field.
	DefaultLevelUpMessage string
	// LevelUpMessageValidator is a validator for the "level_up_message" field. It is called by the builders before save.
	LevelUpMessageValidator func(string) error
	// DefaultLevelMee6Imported holds the default value on creation for the "level_mee6_imported" field.
	DefaultLevelMee6Imported bool
	// DefaultLevelRole holds the default value on creation for the "level_role" field.
	DefaultLevelRole map[int]snowflake.ID
	// DefaultPermissions holds the default value on creation for the "permissions" field.
	DefaultPermissions map[snowflake.ID]permissions.Permission
	// DefaultRemindCount holds the default value on creation for the "remind_count" field.
	DefaultRemindCount int
	// DefaultRolePanelEditTimes holds the default value on creation for the "role_panel_edit_times" field.
	DefaultRolePanelEditTimes []time.Time
	// DefaultBumpEnabled holds the default value on creation for the "bump_enabled" field.
	DefaultBumpEnabled bool
	// DefaultBumpMessageTitle holds the default value on creation for the "bump_message_title" field.
	DefaultBumpMessageTitle string
	// BumpMessageTitleValidator is a validator for the "bump_message_title" field. It is called by the builders before save.
	BumpMessageTitleValidator func(string) error
	// DefaultBumpMessage holds the default value on creation for the "bump_message" field.
	DefaultBumpMessage string
	// BumpMessageValidator is a validator for the "bump_message" field. It is called by the builders before save.
	BumpMessageValidator func(string) error
	// DefaultBumpRemindMessageTitle holds the default value on creation for the "bump_remind_message_title" field.
	DefaultBumpRemindMessageTitle string
	// BumpRemindMessageTitleValidator is a validator for the "bump_remind_message_title" field. It is called by the builders before save.
	BumpRemindMessageTitleValidator func(string) error
	// DefaultBumpRemindMessage holds the default value on creation for the "bump_remind_message" field.
	DefaultBumpRemindMessage string
	// BumpRemindMessageValidator is a validator for the "bump_remind_message" field. It is called by the builders before save.
	BumpRemindMessageValidator func(string) error
	// DefaultUpEnabled holds the default value on creation for the "up_enabled" field.
	DefaultUpEnabled bool
	// DefaultUpMessageTitle holds the default value on creation for the "up_message_title" field.
	DefaultUpMessageTitle string
	// UpMessageTitleValidator is a validator for the "up_message_title" field. It is called by the builders before save.
	UpMessageTitleValidator func(string) error
	// DefaultUpMessage holds the default value on creation for the "up_message" field.
	DefaultUpMessage string
	// UpMessageValidator is a validator for the "up_message" field. It is called by the builders before save.
	UpMessageValidator func(string) error
	// DefaultUpRemindMessageTitle holds the default value on creation for the "up_remind_message_title" field.
	DefaultUpRemindMessageTitle string
	// UpRemindMessageTitleValidator is a validator for the "up_remind_message_title" field. It is called by the builders before save.
	UpRemindMessageTitleValidator func(string) error
	// DefaultUpRemindMessage holds the default value on creation for the "up_remind_message" field.
	DefaultUpRemindMessage string
	// UpRemindMessageValidator is a validator for the "up_remind_message" field. It is called by the builders before save.
	UpRemindMessageValidator func(string) error
)

// OrderOption defines the ordering options for the Guild queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByLocale orders the results by the locale field.
func ByLocale(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocale, opts...).ToFunc()
}

// ByLevelUpMessage orders the results by the level_up_message field.
func ByLevelUpMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevelUpMessage, opts...).ToFunc()
}

// ByLevelUpChannel orders the results by the level_up_channel field.
func ByLevelUpChannel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevelUpChannel, opts...).ToFunc()
}

// ByLevelMee6Imported orders the results by the level_mee6_imported field.
func ByLevelMee6Imported(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevelMee6Imported, opts...).ToFunc()
}

// ByRemindCount orders the results by the remind_count field.
func ByRemindCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemindCount, opts...).ToFunc()
}

// ByBumpEnabled orders the results by the bump_enabled field.
func ByBumpEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBumpEnabled, opts...).ToFunc()
}

// ByBumpMessageTitle orders the results by the bump_message_title field.
func ByBumpMessageTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBumpMessageTitle, opts...).ToFunc()
}

// ByBumpMessage orders the results by the bump_message field.
func ByBumpMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBumpMessage, opts...).ToFunc()
}

// ByBumpRemindMessageTitle orders the results by the bump_remind_message_title field.
func ByBumpRemindMessageTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBumpRemindMessageTitle, opts...).ToFunc()
}

// ByBumpRemindMessage orders the results by the bump_remind_message field.
func ByBumpRemindMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBumpRemindMessage, opts...).ToFunc()
}

// ByUpEnabled orders the results by the up_enabled field.
func ByUpEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpEnabled, opts...).ToFunc()
}

// ByUpMessageTitle orders the results by the up_message_title field.
func ByUpMessageTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpMessageTitle, opts...).ToFunc()
}

// ByUpMessage orders the results by the up_message field.
func ByUpMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpMessage, opts...).ToFunc()
}

// ByUpRemindMessageTitle orders the results by the up_remind_message_title field.
func ByUpRemindMessageTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpRemindMessageTitle, opts...).ToFunc()
}

// ByUpRemindMessage orders the results by the up_remind_message field.
func ByUpRemindMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpRemindMessage, opts...).ToFunc()
}

// ByBumpMention orders the results by the bump_mention field.
func ByBumpMention(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBumpMention, opts...).ToFunc()
}

// ByUpMention orders the results by the up_mention field.
func ByUpMention(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpMention, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByMembersCount orders the results by members count.
func ByMembersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMembersStep(), opts...)
	}
}

// ByMembers orders the results by members terms.
func ByMembers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMembersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMessagePinsCount orders the results by message_pins count.
func ByMessagePinsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMessagePinsStep(), opts...)
	}
}

// ByMessagePins orders the results by message_pins terms.
func ByMessagePins(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMessagePinsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRemindsCount orders the results by reminds count.
func ByRemindsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRemindsStep(), opts...)
	}
}

// ByReminds orders the results by reminds terms.
func ByReminds(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRemindsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRolePanelsCount orders the results by role_panels count.
func ByRolePanelsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRolePanelsStep(), opts...)
	}
}

// ByRolePanels orders the results by role_panels terms.
func ByRolePanels(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRolePanelsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRolePanelPlacementsCount orders the results by role_panel_placements count.
func ByRolePanelPlacementsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRolePanelPlacementsStep(), opts...)
	}
}

// ByRolePanelPlacements orders the results by role_panel_placements terms.
func ByRolePanelPlacements(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRolePanelPlacementsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRolePanelEditsCount orders the results by role_panel_edits count.
func ByRolePanelEditsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRolePanelEditsStep(), opts...)
	}
}

// ByRolePanelEdits orders the results by role_panel_edits terms.
func ByRolePanelEdits(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRolePanelEditsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByChinchiroSessionsCount orders the results by chinchiro_sessions count.
func ByChinchiroSessionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChinchiroSessionsStep(), opts...)
	}
}

// ByChinchiroSessions orders the results by chinchiro_sessions terms.
func ByChinchiroSessions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChinchiroSessionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newMembersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MembersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MembersTable, MembersColumn),
	)
}
func newMessagePinsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MessagePinsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MessagePinsTable, MessagePinsColumn),
	)
}
func newRemindsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RemindsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RemindsTable, RemindsColumn),
	)
}
func newRolePanelsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RolePanelsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RolePanelsTable, RolePanelsColumn),
	)
}
func newRolePanelPlacementsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RolePanelPlacementsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RolePanelPlacementsTable, RolePanelPlacementsColumn),
	)
}
func newRolePanelEditsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RolePanelEditsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RolePanelEditsTable, RolePanelEditsColumn),
	)
}
func newChinchiroSessionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChinchiroSessionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChinchiroSessionsTable, ChinchiroSessionsColumn),
	)
}
