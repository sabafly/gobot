// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/google/uuid"
	"github.com/sabafly/gobot/ent/chinchiroplayer"
	"github.com/sabafly/gobot/ent/chinchirosession"
	"github.com/sabafly/gobot/ent/user"
)

// ChinchiroPlayerCreate is the builder for creating a ChinchiroPlayer entity.
type ChinchiroPlayerCreate struct {
	config
	mutation *ChinchiroPlayerMutation
	hooks    []Hook
}

// SetPoint sets the "point" field.
func (cpc *ChinchiroPlayerCreate) SetPoint(i int) *ChinchiroPlayerCreate {
	cpc.mutation.SetPoint(i)
	return cpc
}

// SetNillablePoint sets the "point" field if the given value is not nil.
func (cpc *ChinchiroPlayerCreate) SetNillablePoint(i *int) *ChinchiroPlayerCreate {
	if i != nil {
		cpc.SetPoint(*i)
	}
	return cpc
}

// SetIsOwner sets the "is_owner" field.
func (cpc *ChinchiroPlayerCreate) SetIsOwner(b bool) *ChinchiroPlayerCreate {
	cpc.mutation.SetIsOwner(b)
	return cpc
}

// SetNillableIsOwner sets the "is_owner" field if the given value is not nil.
func (cpc *ChinchiroPlayerCreate) SetNillableIsOwner(b *bool) *ChinchiroPlayerCreate {
	if b != nil {
		cpc.SetIsOwner(*b)
	}
	return cpc
}

// SetUserID sets the "user_id" field.
func (cpc *ChinchiroPlayerCreate) SetUserID(s snowflake.ID) *ChinchiroPlayerCreate {
	cpc.mutation.SetUserID(s)
	return cpc
}

// SetBet sets the "bet" field.
func (cpc *ChinchiroPlayerCreate) SetBet(i int) *ChinchiroPlayerCreate {
	cpc.mutation.SetBet(i)
	return cpc
}

// SetNillableBet sets the "bet" field if the given value is not nil.
func (cpc *ChinchiroPlayerCreate) SetNillableBet(i *int) *ChinchiroPlayerCreate {
	if i != nil {
		cpc.SetBet(*i)
	}
	return cpc
}

// SetDices sets the "dices" field.
func (cpc *ChinchiroPlayerCreate) SetDices(i []int) *ChinchiroPlayerCreate {
	cpc.mutation.SetDices(i)
	return cpc
}

// SetID sets the "id" field.
func (cpc *ChinchiroPlayerCreate) SetID(u uuid.UUID) *ChinchiroPlayerCreate {
	cpc.mutation.SetID(u)
	return cpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cpc *ChinchiroPlayerCreate) SetNillableID(u *uuid.UUID) *ChinchiroPlayerCreate {
	if u != nil {
		cpc.SetID(*u)
	}
	return cpc
}

// SetUser sets the "user" edge to the User entity.
func (cpc *ChinchiroPlayerCreate) SetUser(u *User) *ChinchiroPlayerCreate {
	return cpc.SetUserID(u.ID)
}

// SetSessionID sets the "session" edge to the ChinchiroSession entity by ID.
func (cpc *ChinchiroPlayerCreate) SetSessionID(id uuid.UUID) *ChinchiroPlayerCreate {
	cpc.mutation.SetSessionID(id)
	return cpc
}

// SetSession sets the "session" edge to the ChinchiroSession entity.
func (cpc *ChinchiroPlayerCreate) SetSession(c *ChinchiroSession) *ChinchiroPlayerCreate {
	return cpc.SetSessionID(c.ID)
}

// Mutation returns the ChinchiroPlayerMutation object of the builder.
func (cpc *ChinchiroPlayerCreate) Mutation() *ChinchiroPlayerMutation {
	return cpc.mutation
}

// Save creates the ChinchiroPlayer in the database.
func (cpc *ChinchiroPlayerCreate) Save(ctx context.Context) (*ChinchiroPlayer, error) {
	cpc.defaults()
	return withHooks(ctx, cpc.sqlSave, cpc.mutation, cpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cpc *ChinchiroPlayerCreate) SaveX(ctx context.Context) *ChinchiroPlayer {
	v, err := cpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpc *ChinchiroPlayerCreate) Exec(ctx context.Context) error {
	_, err := cpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpc *ChinchiroPlayerCreate) ExecX(ctx context.Context) {
	if err := cpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cpc *ChinchiroPlayerCreate) defaults() {
	if _, ok := cpc.mutation.Point(); !ok {
		v := chinchiroplayer.DefaultPoint
		cpc.mutation.SetPoint(v)
	}
	if _, ok := cpc.mutation.IsOwner(); !ok {
		v := chinchiroplayer.DefaultIsOwner
		cpc.mutation.SetIsOwner(v)
	}
	if _, ok := cpc.mutation.ID(); !ok {
		v := chinchiroplayer.DefaultID()
		cpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpc *ChinchiroPlayerCreate) check() error {
	if _, ok := cpc.mutation.Point(); !ok {
		return &ValidationError{Name: "point", err: errors.New(`ent: missing required field "ChinchiroPlayer.point"`)}
	}
	if _, ok := cpc.mutation.IsOwner(); !ok {
		return &ValidationError{Name: "is_owner", err: errors.New(`ent: missing required field "ChinchiroPlayer.is_owner"`)}
	}
	if _, ok := cpc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "ChinchiroPlayer.user_id"`)}
	}
	if _, ok := cpc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "ChinchiroPlayer.user"`)}
	}
	if _, ok := cpc.mutation.SessionID(); !ok {
		return &ValidationError{Name: "session", err: errors.New(`ent: missing required edge "ChinchiroPlayer.session"`)}
	}
	return nil
}

func (cpc *ChinchiroPlayerCreate) sqlSave(ctx context.Context) (*ChinchiroPlayer, error) {
	if err := cpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cpc.mutation.id = &_node.ID
	cpc.mutation.done = true
	return _node, nil
}

func (cpc *ChinchiroPlayerCreate) createSpec() (*ChinchiroPlayer, *sqlgraph.CreateSpec) {
	var (
		_node = &ChinchiroPlayer{config: cpc.config}
		_spec = sqlgraph.NewCreateSpec(chinchiroplayer.Table, sqlgraph.NewFieldSpec(chinchiroplayer.FieldID, field.TypeUUID))
	)
	if id, ok := cpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cpc.mutation.Point(); ok {
		_spec.SetField(chinchiroplayer.FieldPoint, field.TypeInt, value)
		_node.Point = value
	}
	if value, ok := cpc.mutation.IsOwner(); ok {
		_spec.SetField(chinchiroplayer.FieldIsOwner, field.TypeBool, value)
		_node.IsOwner = value
	}
	if value, ok := cpc.mutation.Bet(); ok {
		_spec.SetField(chinchiroplayer.FieldBet, field.TypeInt, value)
		_node.Bet = &value
	}
	if value, ok := cpc.mutation.Dices(); ok {
		_spec.SetField(chinchiroplayer.FieldDices, field.TypeJSON, value)
		_node.Dices = value
	}
	if nodes := cpc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chinchiroplayer.UserTable,
			Columns: []string{chinchiroplayer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cpc.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chinchiroplayer.SessionTable,
			Columns: []string{chinchiroplayer.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chinchirosession.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.chinchiro_session_players = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ChinchiroPlayerCreateBulk is the builder for creating many ChinchiroPlayer entities in bulk.
type ChinchiroPlayerCreateBulk struct {
	config
	err      error
	builders []*ChinchiroPlayerCreate
}

// Save creates the ChinchiroPlayer entities in the database.
func (cpcb *ChinchiroPlayerCreateBulk) Save(ctx context.Context) ([]*ChinchiroPlayer, error) {
	if cpcb.err != nil {
		return nil, cpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cpcb.builders))
	nodes := make([]*ChinchiroPlayer, len(cpcb.builders))
	mutators := make([]Mutator, len(cpcb.builders))
	for i := range cpcb.builders {
		func(i int, root context.Context) {
			builder := cpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChinchiroPlayerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cpcb *ChinchiroPlayerCreateBulk) SaveX(ctx context.Context) []*ChinchiroPlayer {
	v, err := cpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpcb *ChinchiroPlayerCreateBulk) Exec(ctx context.Context) error {
	_, err := cpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpcb *ChinchiroPlayerCreateBulk) ExecX(ctx context.Context) {
	if err := cpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
