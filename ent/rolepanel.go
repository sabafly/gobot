// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/google/uuid"
	"github.com/sabafly/gobot/ent/guild"
	"github.com/sabafly/gobot/ent/rolepanel"
	"github.com/sabafly/gobot/ent/rolepaneledit"
	"github.com/sabafly/gobot/ent/schema"
)

// RolePanel is the model entity for the RolePanel schema.
type RolePanel struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Roles holds the value of the "roles" field.
	Roles []schema.Role `json:"roles,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RolePanelQuery when eager-loading is set.
	Edges             RolePanelEdges `json:"edges"`
	guild_role_panels *snowflake.ID
	selectValues      sql.SelectValues
}

// RolePanelEdges holds the relations/edges for other nodes in the graph.
type RolePanelEdges struct {
	// Guild holds the value of the guild edge.
	Guild *Guild `json:"guild,omitempty"`
	// Placements holds the value of the placements edge.
	Placements []*RolePanelPlaced `json:"placements,omitempty"`
	// Edit holds the value of the edit edge.
	Edit *RolePanelEdit `json:"edit,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// GuildOrErr returns the Guild value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RolePanelEdges) GuildOrErr() (*Guild, error) {
	if e.loadedTypes[0] {
		if e.Guild == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: guild.Label}
		}
		return e.Guild, nil
	}
	return nil, &NotLoadedError{edge: "guild"}
}

// PlacementsOrErr returns the Placements value or an error if the edge
// was not loaded in eager-loading.
func (e RolePanelEdges) PlacementsOrErr() ([]*RolePanelPlaced, error) {
	if e.loadedTypes[1] {
		return e.Placements, nil
	}
	return nil, &NotLoadedError{edge: "placements"}
}

// EditOrErr returns the Edit value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RolePanelEdges) EditOrErr() (*RolePanelEdit, error) {
	if e.loadedTypes[2] {
		if e.Edit == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: rolepaneledit.Label}
		}
		return e.Edit, nil
	}
	return nil, &NotLoadedError{edge: "edit"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RolePanel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rolepanel.FieldRoles:
			values[i] = new([]byte)
		case rolepanel.FieldName, rolepanel.FieldDescription:
			values[i] = new(sql.NullString)
		case rolepanel.FieldID:
			values[i] = new(uuid.UUID)
		case rolepanel.ForeignKeys[0]: // guild_role_panels
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RolePanel fields.
func (rp *RolePanel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rolepanel.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rp.ID = *value
			}
		case rolepanel.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rp.Name = value.String
			}
		case rolepanel.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				rp.Description = value.String
			}
		case rolepanel.FieldRoles:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field roles", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &rp.Roles); err != nil {
					return fmt.Errorf("unmarshal field roles: %w", err)
				}
			}
		case rolepanel.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field guild_role_panels", values[i])
			} else if value.Valid {
				rp.guild_role_panels = new(snowflake.ID)
				*rp.guild_role_panels = snowflake.ID(value.Int64)
			}
		default:
			rp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RolePanel.
// This includes values selected through modifiers, order, etc.
func (rp *RolePanel) Value(name string) (ent.Value, error) {
	return rp.selectValues.Get(name)
}

// QueryGuild queries the "guild" edge of the RolePanel entity.
func (rp *RolePanel) QueryGuild() *GuildQuery {
	return NewRolePanelClient(rp.config).QueryGuild(rp)
}

// QueryPlacements queries the "placements" edge of the RolePanel entity.
func (rp *RolePanel) QueryPlacements() *RolePanelPlacedQuery {
	return NewRolePanelClient(rp.config).QueryPlacements(rp)
}

// QueryEdit queries the "edit" edge of the RolePanel entity.
func (rp *RolePanel) QueryEdit() *RolePanelEditQuery {
	return NewRolePanelClient(rp.config).QueryEdit(rp)
}

// Update returns a builder for updating this RolePanel.
// Note that you need to call RolePanel.Unwrap() before calling this method if this RolePanel
// was returned from a transaction, and the transaction was committed or rolled back.
func (rp *RolePanel) Update() *RolePanelUpdateOne {
	return NewRolePanelClient(rp.config).UpdateOne(rp)
}

// Unwrap unwraps the RolePanel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rp *RolePanel) Unwrap() *RolePanel {
	_tx, ok := rp.config.driver.(*txDriver)
	if !ok {
		panic("ent: RolePanel is not a transactional entity")
	}
	rp.config.driver = _tx.drv
	return rp
}

// String implements the fmt.Stringer.
func (rp *RolePanel) String() string {
	var builder strings.Builder
	builder.WriteString("RolePanel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rp.ID))
	builder.WriteString("name=")
	builder.WriteString(rp.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(rp.Description)
	builder.WriteString(", ")
	builder.WriteString("roles=")
	builder.WriteString(fmt.Sprintf("%v", rp.Roles))
	builder.WriteByte(')')
	return builder.String()
}

// RolePanels is a parsable slice of RolePanel.
type RolePanels []*RolePanel
