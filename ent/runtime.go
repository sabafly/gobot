// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/disgoorg/disgo/discord"
	"github.com/google/uuid"
	"github.com/sabafly/gobot/ent/guild"
	"github.com/sabafly/gobot/ent/messagepin"
	"github.com/sabafly/gobot/ent/schema"
	"github.com/sabafly/gobot/ent/user"
	"github.com/sabafly/gobot/ent/wordsuffix"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	guildFields := schema.Guild{}.Fields()
	_ = guildFields
	// guildDescName is the schema descriptor for name field.
	guildDescName := guildFields[1].Descriptor()
	// guild.NameValidator is a validator for the "name" field. It is called by the builders before save.
	guild.NameValidator = guildDescName.Validators[0].(func(string) error)
	// guildDescLocale is the schema descriptor for locale field.
	guildDescLocale := guildFields[2].Descriptor()
	// guild.DefaultLocale holds the default value on creation for the locale field.
	guild.DefaultLocale = discord.Locale(guildDescLocale.Default.(string))
	// guild.LocaleValidator is a validator for the "locale" field. It is called by the builders before save.
	guild.LocaleValidator = guildDescLocale.Validators[0].(func(string) error)
	messagepinFields := schema.MessagePin{}.Fields()
	_ = messagepinFields
	// messagepinDescRateLimit is the schema descriptor for rate_limit field.
	messagepinDescRateLimit := messagepinFields[5].Descriptor()
	// messagepin.DefaultRateLimit holds the default value on creation for the rate_limit field.
	messagepin.DefaultRateLimit = messagepinDescRateLimit.Default.(schema.RateLimit)
	// messagepinDescID is the schema descriptor for id field.
	messagepinDescID := messagepinFields[0].Descriptor()
	// messagepin.DefaultID holds the default value on creation for the id field.
	messagepin.DefaultID = messagepinDescID.Default.(func() uuid.UUID)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[2].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescLocale is the schema descriptor for locale field.
	userDescLocale := userFields[3].Descriptor()
	// user.DefaultLocale holds the default value on creation for the locale field.
	user.DefaultLocale = discord.Locale(userDescLocale.Default.(string))
	// user.LocaleValidator is a validator for the "locale" field. It is called by the builders before save.
	user.LocaleValidator = userDescLocale.Validators[0].(func(string) error)
	wordsuffixFields := schema.WordSuffix{}.Fields()
	_ = wordsuffixFields
	// wordsuffixDescSuffix is the schema descriptor for suffix field.
	wordsuffixDescSuffix := wordsuffixFields[1].Descriptor()
	// wordsuffix.SuffixValidator is a validator for the "suffix" field. It is called by the builders before save.
	wordsuffix.SuffixValidator = func() func(string) error {
		validators := wordsuffixDescSuffix.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(suffix string) error {
			for _, fn := range fns {
				if err := fn(suffix); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// wordsuffixDescID is the schema descriptor for id field.
	wordsuffixDescID := wordsuffixFields[0].Descriptor()
	// wordsuffix.DefaultID holds the default value on creation for the id field.
	wordsuffix.DefaultID = wordsuffixDescID.Default.(func() uuid.UUID)
}
