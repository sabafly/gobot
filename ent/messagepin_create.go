// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/disgoorg/disgo/discord"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/google/uuid"
	"github.com/sabafly/gobot/ent/guild"
	"github.com/sabafly/gobot/ent/messagepin"
	"github.com/sabafly/gobot/ent/schema"
)

// MessagePinCreate is the builder for creating a MessagePin entity.
type MessagePinCreate struct {
	config
	mutation *MessagePinMutation
	hooks    []Hook
}

// SetChannelID sets the "channel_id" field.
func (mpc *MessagePinCreate) SetChannelID(s snowflake.ID) *MessagePinCreate {
	mpc.mutation.SetChannelID(s)
	return mpc
}

// SetContent sets the "content" field.
func (mpc *MessagePinCreate) SetContent(s string) *MessagePinCreate {
	mpc.mutation.SetContent(s)
	return mpc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (mpc *MessagePinCreate) SetNillableContent(s *string) *MessagePinCreate {
	if s != nil {
		mpc.SetContent(*s)
	}
	return mpc
}

// SetEmbeds sets the "embeds" field.
func (mpc *MessagePinCreate) SetEmbeds(d []discord.Embed) *MessagePinCreate {
	mpc.mutation.SetEmbeds(d)
	return mpc
}

// SetBeforeID sets the "before_id" field.
func (mpc *MessagePinCreate) SetBeforeID(s snowflake.ID) *MessagePinCreate {
	mpc.mutation.SetBeforeID(s)
	return mpc
}

// SetNillableBeforeID sets the "before_id" field if the given value is not nil.
func (mpc *MessagePinCreate) SetNillableBeforeID(s *snowflake.ID) *MessagePinCreate {
	if s != nil {
		mpc.SetBeforeID(*s)
	}
	return mpc
}

// SetRateLimit sets the "rate_limit" field.
func (mpc *MessagePinCreate) SetRateLimit(sl schema.RateLimit) *MessagePinCreate {
	mpc.mutation.SetRateLimit(sl)
	return mpc
}

// SetNillableRateLimit sets the "rate_limit" field if the given value is not nil.
func (mpc *MessagePinCreate) SetNillableRateLimit(sl *schema.RateLimit) *MessagePinCreate {
	if sl != nil {
		mpc.SetRateLimit(*sl)
	}
	return mpc
}

// SetID sets the "id" field.
func (mpc *MessagePinCreate) SetID(u uuid.UUID) *MessagePinCreate {
	mpc.mutation.SetID(u)
	return mpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mpc *MessagePinCreate) SetNillableID(u *uuid.UUID) *MessagePinCreate {
	if u != nil {
		mpc.SetID(*u)
	}
	return mpc
}

// SetGuildID sets the "guild" edge to the Guild entity by ID.
func (mpc *MessagePinCreate) SetGuildID(id snowflake.ID) *MessagePinCreate {
	mpc.mutation.SetGuildID(id)
	return mpc
}

// SetGuild sets the "guild" edge to the Guild entity.
func (mpc *MessagePinCreate) SetGuild(g *Guild) *MessagePinCreate {
	return mpc.SetGuildID(g.ID)
}

// Mutation returns the MessagePinMutation object of the builder.
func (mpc *MessagePinCreate) Mutation() *MessagePinMutation {
	return mpc.mutation
}

// Save creates the MessagePin in the database.
func (mpc *MessagePinCreate) Save(ctx context.Context) (*MessagePin, error) {
	mpc.defaults()
	return withHooks(ctx, mpc.sqlSave, mpc.mutation, mpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mpc *MessagePinCreate) SaveX(ctx context.Context) *MessagePin {
	v, err := mpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpc *MessagePinCreate) Exec(ctx context.Context) error {
	_, err := mpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpc *MessagePinCreate) ExecX(ctx context.Context) {
	if err := mpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mpc *MessagePinCreate) defaults() {
	if _, ok := mpc.mutation.RateLimit(); !ok {
		v := messagepin.DefaultRateLimit
		mpc.mutation.SetRateLimit(v)
	}
	if _, ok := mpc.mutation.ID(); !ok {
		v := messagepin.DefaultID()
		mpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpc *MessagePinCreate) check() error {
	if _, ok := mpc.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel_id", err: errors.New(`ent: missing required field "MessagePin.channel_id"`)}
	}
	if _, ok := mpc.mutation.RateLimit(); !ok {
		return &ValidationError{Name: "rate_limit", err: errors.New(`ent: missing required field "MessagePin.rate_limit"`)}
	}
	if _, ok := mpc.mutation.GuildID(); !ok {
		return &ValidationError{Name: "guild", err: errors.New(`ent: missing required edge "MessagePin.guild"`)}
	}
	return nil
}

func (mpc *MessagePinCreate) sqlSave(ctx context.Context) (*MessagePin, error) {
	if err := mpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mpc.mutation.id = &_node.ID
	mpc.mutation.done = true
	return _node, nil
}

func (mpc *MessagePinCreate) createSpec() (*MessagePin, *sqlgraph.CreateSpec) {
	var (
		_node = &MessagePin{config: mpc.config}
		_spec = sqlgraph.NewCreateSpec(messagepin.Table, sqlgraph.NewFieldSpec(messagepin.FieldID, field.TypeUUID))
	)
	if id, ok := mpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mpc.mutation.ChannelID(); ok {
		_spec.SetField(messagepin.FieldChannelID, field.TypeUint64, value)
		_node.ChannelID = value
	}
	if value, ok := mpc.mutation.Content(); ok {
		_spec.SetField(messagepin.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := mpc.mutation.Embeds(); ok {
		_spec.SetField(messagepin.FieldEmbeds, field.TypeJSON, value)
		_node.Embeds = value
	}
	if value, ok := mpc.mutation.BeforeID(); ok {
		_spec.SetField(messagepin.FieldBeforeID, field.TypeUint64, value)
		_node.BeforeID = &value
	}
	if value, ok := mpc.mutation.RateLimit(); ok {
		_spec.SetField(messagepin.FieldRateLimit, field.TypeJSON, value)
		_node.RateLimit = value
	}
	if nodes := mpc.mutation.GuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messagepin.GuildTable,
			Columns: []string{messagepin.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.guild_message_pins = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MessagePinCreateBulk is the builder for creating many MessagePin entities in bulk.
type MessagePinCreateBulk struct {
	config
	err      error
	builders []*MessagePinCreate
}

// Save creates the MessagePin entities in the database.
func (mpcb *MessagePinCreateBulk) Save(ctx context.Context) ([]*MessagePin, error) {
	if mpcb.err != nil {
		return nil, mpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mpcb.builders))
	nodes := make([]*MessagePin, len(mpcb.builders))
	mutators := make([]Mutator, len(mpcb.builders))
	for i := range mpcb.builders {
		func(i int, root context.Context) {
			builder := mpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MessagePinMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mpcb *MessagePinCreateBulk) SaveX(ctx context.Context) []*MessagePin {
	v, err := mpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mpcb *MessagePinCreateBulk) Exec(ctx context.Context) error {
	_, err := mpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpcb *MessagePinCreateBulk) ExecX(ctx context.Context) {
	if err := mpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
