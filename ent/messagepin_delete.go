// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sabafly/gobot/ent/messagepin"
	"github.com/sabafly/gobot/ent/predicate"
)

// MessagePinDelete is the builder for deleting a MessagePin entity.
type MessagePinDelete struct {
	config
	hooks    []Hook
	mutation *MessagePinMutation
}

// Where appends a list predicates to the MessagePinDelete builder.
func (mpd *MessagePinDelete) Where(ps ...predicate.MessagePin) *MessagePinDelete {
	mpd.mutation.Where(ps...)
	return mpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mpd *MessagePinDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mpd.sqlExec, mpd.mutation, mpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mpd *MessagePinDelete) ExecX(ctx context.Context) int {
	n, err := mpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mpd *MessagePinDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(messagepin.Table, sqlgraph.NewFieldSpec(messagepin.FieldID, field.TypeUUID))
	if ps := mpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mpd.mutation.done = true
	return affected, err
}

// MessagePinDeleteOne is the builder for deleting a single MessagePin entity.
type MessagePinDeleteOne struct {
	mpd *MessagePinDelete
}

// Where appends a list predicates to the MessagePinDelete builder.
func (mpdo *MessagePinDeleteOne) Where(ps ...predicate.MessagePin) *MessagePinDeleteOne {
	mpdo.mpd.mutation.Where(ps...)
	return mpdo
}

// Exec executes the deletion query.
func (mpdo *MessagePinDeleteOne) Exec(ctx context.Context) error {
	n, err := mpdo.mpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{messagepin.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mpdo *MessagePinDeleteOne) ExecX(ctx context.Context) {
	if err := mpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
