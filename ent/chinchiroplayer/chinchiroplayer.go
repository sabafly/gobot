// Code generated by ent, DO NOT EDIT.

package chinchiroplayer

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the chinchiroplayer type in the database.
	Label = "chinchiro_player"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPoint holds the string denoting the point field in the database.
	FieldPoint = "point"
	// FieldIsOwner holds the string denoting the is_owner field in the database.
	FieldIsOwner = "is_owner"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldBet holds the string denoting the bet field in the database.
	FieldBet = "bet"
	// FieldDices holds the string denoting the dices field in the database.
	FieldDices = "dices"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeSession holds the string denoting the session edge name in mutations.
	EdgeSession = "session"
	// Table holds the table name of the chinchiroplayer in the database.
	Table = "chinchiro_players"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "chinchiro_players"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// SessionTable is the table that holds the session relation/edge.
	SessionTable = "chinchiro_players"
	// SessionInverseTable is the table name for the ChinchiroSession entity.
	// It exists in this package in order to avoid circular dependency with the "chinchirosession" package.
	SessionInverseTable = "chinchiro_sessions"
	// SessionColumn is the table column denoting the session relation/edge.
	SessionColumn = "chinchiro_session_players"
)

// Columns holds all SQL columns for chinchiroplayer fields.
var Columns = []string{
	FieldID,
	FieldPoint,
	FieldIsOwner,
	FieldUserID,
	FieldBet,
	FieldDices,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "chinchiro_players"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"chinchiro_session_players",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultPoint holds the default value on creation for the "point" field.
	DefaultPoint int
	// DefaultIsOwner holds the default value on creation for the "is_owner" field.
	DefaultIsOwner bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ChinchiroPlayer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPoint orders the results by the point field.
func ByPoint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPoint, opts...).ToFunc()
}

// ByIsOwner orders the results by the is_owner field.
func ByIsOwner(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsOwner, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByBet orders the results by the bet field.
func ByBet(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBet, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// BySessionField orders the results by session field.
func BySessionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSessionStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newSessionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SessionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SessionTable, SessionColumn),
	)
}
