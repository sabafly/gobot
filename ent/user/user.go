// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/disgoorg/disgo/discord"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldLocale holds the string denoting the locale field in the database.
	FieldLocale = "locale"
	// EdgeOwnGuilds holds the string denoting the own_guilds edge name in mutations.
	EdgeOwnGuilds = "own_guilds"
	// EdgeGuilds holds the string denoting the guilds edge name in mutations.
	EdgeGuilds = "guilds"
	// EdgeWordSuffix holds the string denoting the word_suffix edge name in mutations.
	EdgeWordSuffix = "word_suffix"
	// Table holds the table name of the user in the database.
	Table = "users"
	// OwnGuildsTable is the table that holds the own_guilds relation/edge.
	OwnGuildsTable = "guilds"
	// OwnGuildsInverseTable is the table name for the Guild entity.
	// It exists in this package in order to avoid circular dependency with the "guild" package.
	OwnGuildsInverseTable = "guilds"
	// OwnGuildsColumn is the table column denoting the own_guilds relation/edge.
	OwnGuildsColumn = "user_own_guilds"
	// GuildsTable is the table that holds the guilds relation/edge.
	GuildsTable = "members"
	// GuildsInverseTable is the table name for the Member entity.
	// It exists in this package in order to avoid circular dependency with the "member" package.
	GuildsInverseTable = "members"
	// GuildsColumn is the table column denoting the guilds relation/edge.
	GuildsColumn = "user_guilds"
	// WordSuffixTable is the table that holds the word_suffix relation/edge.
	WordSuffixTable = "word_suffixes"
	// WordSuffixInverseTable is the table name for the WordSuffix entity.
	// It exists in this package in order to avoid circular dependency with the "wordsuffix" package.
	WordSuffixInverseTable = "word_suffixes"
	// WordSuffixColumn is the table column denoting the word_suffix relation/edge.
	WordSuffixColumn = "user_word_suffix"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCreatedAt,
	FieldLocale,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultLocale holds the default value on creation for the "locale" field.
	DefaultLocale discord.Locale
	// LocaleValidator is a validator for the "locale" field. It is called by the builders before save.
	LocaleValidator func(string) error
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByLocale orders the results by the locale field.
func ByLocale(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocale, opts...).ToFunc()
}

// ByOwnGuildsCount orders the results by own_guilds count.
func ByOwnGuildsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOwnGuildsStep(), opts...)
	}
}

// ByOwnGuilds orders the results by own_guilds terms.
func ByOwnGuilds(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnGuildsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGuildsCount orders the results by guilds count.
func ByGuildsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGuildsStep(), opts...)
	}
}

// ByGuilds orders the results by guilds terms.
func ByGuilds(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGuildsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWordSuffixCount orders the results by word_suffix count.
func ByWordSuffixCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWordSuffixStep(), opts...)
	}
}

// ByWordSuffix orders the results by word_suffix terms.
func ByWordSuffix(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWordSuffixStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnGuildsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnGuildsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OwnGuildsTable, OwnGuildsColumn),
	)
}
func newGuildsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GuildsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GuildsTable, GuildsColumn),
	)
}
func newWordSuffixStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WordSuffixInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, WordSuffixTable, WordSuffixColumn),
	)
}
