// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/google/uuid"
	"github.com/sabafly/gobot/ent/guild"
	"github.com/sabafly/gobot/ent/user"
	"github.com/sabafly/gobot/ent/wordsuffix"
)

// WordSuffix is the model entity for the WordSuffix schema.
type WordSuffix struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Suffix holds the value of the "suffix" field.
	Suffix string `json:"suffix,omitempty"`
	// Expired holds the value of the "expired" field.
	Expired *time.Time `json:"expired,omitempty"`
	// GuildID holds the value of the "guild_id" field.
	GuildID *snowflake.ID `json:"guild_id,omitempty"`
	// Rule holds the value of the "rule" field.
	Rule wordsuffix.Rule `json:"rule,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WordSuffixQuery when eager-loading is set.
	Edges            WordSuffixEdges `json:"edges"`
	user_word_suffix *snowflake.ID
	selectValues     sql.SelectValues
}

// WordSuffixEdges holds the relations/edges for other nodes in the graph.
type WordSuffixEdges struct {
	// Guild holds the value of the guild edge.
	Guild *Guild `json:"guild,omitempty"`
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// GuildOrErr returns the Guild value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WordSuffixEdges) GuildOrErr() (*Guild, error) {
	if e.loadedTypes[0] {
		if e.Guild == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: guild.Label}
		}
		return e.Guild, nil
	}
	return nil, &NotLoadedError{edge: "guild"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WordSuffixEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WordSuffix) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case wordsuffix.FieldGuildID:
			values[i] = new(sql.NullInt64)
		case wordsuffix.FieldSuffix, wordsuffix.FieldRule:
			values[i] = new(sql.NullString)
		case wordsuffix.FieldExpired:
			values[i] = new(sql.NullTime)
		case wordsuffix.FieldID:
			values[i] = new(uuid.UUID)
		case wordsuffix.ForeignKeys[0]: // user_word_suffix
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WordSuffix fields.
func (ws *WordSuffix) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case wordsuffix.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ws.ID = *value
			}
		case wordsuffix.FieldSuffix:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field suffix", values[i])
			} else if value.Valid {
				ws.Suffix = value.String
			}
		case wordsuffix.FieldExpired:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expired", values[i])
			} else if value.Valid {
				ws.Expired = new(time.Time)
				*ws.Expired = value.Time
			}
		case wordsuffix.FieldGuildID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field guild_id", values[i])
			} else if value.Valid {
				ws.GuildID = new(snowflake.ID)
				*ws.GuildID = snowflake.ID(value.Int64)
			}
		case wordsuffix.FieldRule:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rule", values[i])
			} else if value.Valid {
				ws.Rule = wordsuffix.Rule(value.String)
			}
		case wordsuffix.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_word_suffix", values[i])
			} else if value.Valid {
				ws.user_word_suffix = new(snowflake.ID)
				*ws.user_word_suffix = snowflake.ID(value.Int64)
			}
		default:
			ws.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WordSuffix.
// This includes values selected through modifiers, order, etc.
func (ws *WordSuffix) Value(name string) (ent.Value, error) {
	return ws.selectValues.Get(name)
}

// QueryGuild queries the "guild" edge of the WordSuffix entity.
func (ws *WordSuffix) QueryGuild() *GuildQuery {
	return NewWordSuffixClient(ws.config).QueryGuild(ws)
}

// QueryOwner queries the "owner" edge of the WordSuffix entity.
func (ws *WordSuffix) QueryOwner() *UserQuery {
	return NewWordSuffixClient(ws.config).QueryOwner(ws)
}

// Update returns a builder for updating this WordSuffix.
// Note that you need to call WordSuffix.Unwrap() before calling this method if this WordSuffix
// was returned from a transaction, and the transaction was committed or rolled back.
func (ws *WordSuffix) Update() *WordSuffixUpdateOne {
	return NewWordSuffixClient(ws.config).UpdateOne(ws)
}

// Unwrap unwraps the WordSuffix entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ws *WordSuffix) Unwrap() *WordSuffix {
	_tx, ok := ws.config.driver.(*txDriver)
	if !ok {
		panic("ent: WordSuffix is not a transactional entity")
	}
	ws.config.driver = _tx.drv
	return ws
}

// String implements the fmt.Stringer.
func (ws *WordSuffix) String() string {
	var builder strings.Builder
	builder.WriteString("WordSuffix(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ws.ID))
	builder.WriteString("suffix=")
	builder.WriteString(ws.Suffix)
	builder.WriteString(", ")
	if v := ws.Expired; v != nil {
		builder.WriteString("expired=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := ws.GuildID; v != nil {
		builder.WriteString("guild_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("rule=")
	builder.WriteString(fmt.Sprintf("%v", ws.Rule))
	builder.WriteByte(')')
	return builder.String()
}

// WordSuffixes is a parsable slice of WordSuffix.
type WordSuffixes []*WordSuffix
