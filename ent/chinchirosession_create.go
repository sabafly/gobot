// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/google/uuid"
	"github.com/sabafly/gobot/ent/chinchiroplayer"
	"github.com/sabafly/gobot/ent/chinchirosession"
	"github.com/sabafly/gobot/ent/guild"
)

// ChinchiroSessionCreate is the builder for creating a ChinchiroSession entity.
type ChinchiroSessionCreate struct {
	config
	mutation *ChinchiroSessionMutation
	hooks    []Hook
}

// SetTurn sets the "turn" field.
func (csc *ChinchiroSessionCreate) SetTurn(i int) *ChinchiroSessionCreate {
	csc.mutation.SetTurn(i)
	return csc
}

// SetNillableTurn sets the "turn" field if the given value is not nil.
func (csc *ChinchiroSessionCreate) SetNillableTurn(i *int) *ChinchiroSessionCreate {
	if i != nil {
		csc.SetTurn(*i)
	}
	return csc
}

// SetLoop sets the "loop" field.
func (csc *ChinchiroSessionCreate) SetLoop(i int) *ChinchiroSessionCreate {
	csc.mutation.SetLoop(i)
	return csc
}

// SetNillableLoop sets the "loop" field if the given value is not nil.
func (csc *ChinchiroSessionCreate) SetNillableLoop(i *int) *ChinchiroSessionCreate {
	if i != nil {
		csc.SetLoop(*i)
	}
	return csc
}

// SetID sets the "id" field.
func (csc *ChinchiroSessionCreate) SetID(u uuid.UUID) *ChinchiroSessionCreate {
	csc.mutation.SetID(u)
	return csc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (csc *ChinchiroSessionCreate) SetNillableID(u *uuid.UUID) *ChinchiroSessionCreate {
	if u != nil {
		csc.SetID(*u)
	}
	return csc
}

// SetGuildID sets the "guild" edge to the Guild entity by ID.
func (csc *ChinchiroSessionCreate) SetGuildID(id snowflake.ID) *ChinchiroSessionCreate {
	csc.mutation.SetGuildID(id)
	return csc
}

// SetNillableGuildID sets the "guild" edge to the Guild entity by ID if the given value is not nil.
func (csc *ChinchiroSessionCreate) SetNillableGuildID(id *snowflake.ID) *ChinchiroSessionCreate {
	if id != nil {
		csc = csc.SetGuildID(*id)
	}
	return csc
}

// SetGuild sets the "guild" edge to the Guild entity.
func (csc *ChinchiroSessionCreate) SetGuild(g *Guild) *ChinchiroSessionCreate {
	return csc.SetGuildID(g.ID)
}

// AddPlayerIDs adds the "players" edge to the ChinchiroPlayer entity by IDs.
func (csc *ChinchiroSessionCreate) AddPlayerIDs(ids ...uuid.UUID) *ChinchiroSessionCreate {
	csc.mutation.AddPlayerIDs(ids...)
	return csc
}

// AddPlayers adds the "players" edges to the ChinchiroPlayer entity.
func (csc *ChinchiroSessionCreate) AddPlayers(c ...*ChinchiroPlayer) *ChinchiroSessionCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return csc.AddPlayerIDs(ids...)
}

// Mutation returns the ChinchiroSessionMutation object of the builder.
func (csc *ChinchiroSessionCreate) Mutation() *ChinchiroSessionMutation {
	return csc.mutation
}

// Save creates the ChinchiroSession in the database.
func (csc *ChinchiroSessionCreate) Save(ctx context.Context) (*ChinchiroSession, error) {
	csc.defaults()
	return withHooks(ctx, csc.sqlSave, csc.mutation, csc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (csc *ChinchiroSessionCreate) SaveX(ctx context.Context) *ChinchiroSession {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csc *ChinchiroSessionCreate) Exec(ctx context.Context) error {
	_, err := csc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csc *ChinchiroSessionCreate) ExecX(ctx context.Context) {
	if err := csc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csc *ChinchiroSessionCreate) defaults() {
	if _, ok := csc.mutation.Turn(); !ok {
		v := chinchirosession.DefaultTurn
		csc.mutation.SetTurn(v)
	}
	if _, ok := csc.mutation.Loop(); !ok {
		v := chinchirosession.DefaultLoop
		csc.mutation.SetLoop(v)
	}
	if _, ok := csc.mutation.ID(); !ok {
		v := chinchirosession.DefaultID()
		csc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csc *ChinchiroSessionCreate) check() error {
	if _, ok := csc.mutation.Turn(); !ok {
		return &ValidationError{Name: "turn", err: errors.New(`ent: missing required field "ChinchiroSession.turn"`)}
	}
	if _, ok := csc.mutation.Loop(); !ok {
		return &ValidationError{Name: "loop", err: errors.New(`ent: missing required field "ChinchiroSession.loop"`)}
	}
	return nil
}

func (csc *ChinchiroSessionCreate) sqlSave(ctx context.Context) (*ChinchiroSession, error) {
	if err := csc.check(); err != nil {
		return nil, err
	}
	_node, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	csc.mutation.id = &_node.ID
	csc.mutation.done = true
	return _node, nil
}

func (csc *ChinchiroSessionCreate) createSpec() (*ChinchiroSession, *sqlgraph.CreateSpec) {
	var (
		_node = &ChinchiroSession{config: csc.config}
		_spec = sqlgraph.NewCreateSpec(chinchirosession.Table, sqlgraph.NewFieldSpec(chinchirosession.FieldID, field.TypeUUID))
	)
	if id, ok := csc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := csc.mutation.Turn(); ok {
		_spec.SetField(chinchirosession.FieldTurn, field.TypeInt, value)
		_node.Turn = value
	}
	if value, ok := csc.mutation.Loop(); ok {
		_spec.SetField(chinchirosession.FieldLoop, field.TypeInt, value)
		_node.Loop = value
	}
	if nodes := csc.mutation.GuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chinchirosession.GuildTable,
			Columns: []string{chinchirosession.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.guild_chinchiro_sessions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.PlayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chinchirosession.PlayersTable,
			Columns: []string{chinchirosession.PlayersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chinchiroplayer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ChinchiroSessionCreateBulk is the builder for creating many ChinchiroSession entities in bulk.
type ChinchiroSessionCreateBulk struct {
	config
	err      error
	builders []*ChinchiroSessionCreate
}

// Save creates the ChinchiroSession entities in the database.
func (cscb *ChinchiroSessionCreateBulk) Save(ctx context.Context) ([]*ChinchiroSession, error) {
	if cscb.err != nil {
		return nil, cscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cscb.builders))
	nodes := make([]*ChinchiroSession, len(cscb.builders))
	mutators := make([]Mutator, len(cscb.builders))
	for i := range cscb.builders {
		func(i int, root context.Context) {
			builder := cscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChinchiroSessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cscb *ChinchiroSessionCreateBulk) SaveX(ctx context.Context) []*ChinchiroSession {
	v, err := cscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cscb *ChinchiroSessionCreateBulk) Exec(ctx context.Context) error {
	_, err := cscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscb *ChinchiroSessionCreateBulk) ExecX(ctx context.Context) {
	if err := cscb.Exec(ctx); err != nil {
		panic(err)
	}
}
