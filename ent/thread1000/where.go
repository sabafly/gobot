// Code generated by ent, DO NOT EDIT.

package thread1000

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/google/uuid"
	"github.com/sabafly/gobot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldEQ(FieldName, v))
}

// MessageCount applies equality check predicate on the "message_count" field. It's identical to MessageCountEQ.
func MessageCount(v int) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldEQ(FieldMessageCount, v))
}

// IsArchived applies equality check predicate on the "is_archived" field. It's identical to IsArchivedEQ.
func IsArchived(v bool) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldEQ(FieldIsArchived, v))
}

// ThreadID applies equality check predicate on the "thread_id" field. It's identical to ThreadIDEQ.
func ThreadID(v snowflake.ID) predicate.Thread1000 {
	vc := uint64(v)
	return predicate.Thread1000(sql.FieldEQ(FieldThreadID, vc))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldContainsFold(FieldName, v))
}

// MessageCountEQ applies the EQ predicate on the "message_count" field.
func MessageCountEQ(v int) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldEQ(FieldMessageCount, v))
}

// MessageCountNEQ applies the NEQ predicate on the "message_count" field.
func MessageCountNEQ(v int) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldNEQ(FieldMessageCount, v))
}

// MessageCountIn applies the In predicate on the "message_count" field.
func MessageCountIn(vs ...int) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldIn(FieldMessageCount, vs...))
}

// MessageCountNotIn applies the NotIn predicate on the "message_count" field.
func MessageCountNotIn(vs ...int) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldNotIn(FieldMessageCount, vs...))
}

// MessageCountGT applies the GT predicate on the "message_count" field.
func MessageCountGT(v int) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldGT(FieldMessageCount, v))
}

// MessageCountGTE applies the GTE predicate on the "message_count" field.
func MessageCountGTE(v int) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldGTE(FieldMessageCount, v))
}

// MessageCountLT applies the LT predicate on the "message_count" field.
func MessageCountLT(v int) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldLT(FieldMessageCount, v))
}

// MessageCountLTE applies the LTE predicate on the "message_count" field.
func MessageCountLTE(v int) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldLTE(FieldMessageCount, v))
}

// IsArchivedEQ applies the EQ predicate on the "is_archived" field.
func IsArchivedEQ(v bool) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldEQ(FieldIsArchived, v))
}

// IsArchivedNEQ applies the NEQ predicate on the "is_archived" field.
func IsArchivedNEQ(v bool) predicate.Thread1000 {
	return predicate.Thread1000(sql.FieldNEQ(FieldIsArchived, v))
}

// ThreadIDEQ applies the EQ predicate on the "thread_id" field.
func ThreadIDEQ(v snowflake.ID) predicate.Thread1000 {
	vc := uint64(v)
	return predicate.Thread1000(sql.FieldEQ(FieldThreadID, vc))
}

// ThreadIDNEQ applies the NEQ predicate on the "thread_id" field.
func ThreadIDNEQ(v snowflake.ID) predicate.Thread1000 {
	vc := uint64(v)
	return predicate.Thread1000(sql.FieldNEQ(FieldThreadID, vc))
}

// ThreadIDIn applies the In predicate on the "thread_id" field.
func ThreadIDIn(vs ...snowflake.ID) predicate.Thread1000 {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Thread1000(sql.FieldIn(FieldThreadID, v...))
}

// ThreadIDNotIn applies the NotIn predicate on the "thread_id" field.
func ThreadIDNotIn(vs ...snowflake.ID) predicate.Thread1000 {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Thread1000(sql.FieldNotIn(FieldThreadID, v...))
}

// ThreadIDGT applies the GT predicate on the "thread_id" field.
func ThreadIDGT(v snowflake.ID) predicate.Thread1000 {
	vc := uint64(v)
	return predicate.Thread1000(sql.FieldGT(FieldThreadID, vc))
}

// ThreadIDGTE applies the GTE predicate on the "thread_id" field.
func ThreadIDGTE(v snowflake.ID) predicate.Thread1000 {
	vc := uint64(v)
	return predicate.Thread1000(sql.FieldGTE(FieldThreadID, vc))
}

// ThreadIDLT applies the LT predicate on the "thread_id" field.
func ThreadIDLT(v snowflake.ID) predicate.Thread1000 {
	vc := uint64(v)
	return predicate.Thread1000(sql.FieldLT(FieldThreadID, vc))
}

// ThreadIDLTE applies the LTE predicate on the "thread_id" field.
func ThreadIDLTE(v snowflake.ID) predicate.Thread1000 {
	vc := uint64(v)
	return predicate.Thread1000(sql.FieldLTE(FieldThreadID, vc))
}

// HasGuild applies the HasEdge predicate on the "guild" edge.
func HasGuild() predicate.Thread1000 {
	return predicate.Thread1000(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GuildTable, GuildColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGuildWith applies the HasEdge predicate on the "guild" edge with a given conditions (other predicates).
func HasGuildWith(preds ...predicate.Guild) predicate.Thread1000 {
	return predicate.Thread1000(func(s *sql.Selector) {
		step := newGuildStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChannel applies the HasEdge predicate on the "channel" edge.
func HasChannel() predicate.Thread1000 {
	return predicate.Thread1000(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChannelTable, ChannelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChannelWith applies the HasEdge predicate on the "channel" edge with a given conditions (other predicates).
func HasChannelWith(preds ...predicate.Thread1000Channel) predicate.Thread1000 {
	return predicate.Thread1000(func(s *sql.Selector) {
		step := newChannelStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Thread1000) predicate.Thread1000 {
	return predicate.Thread1000(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Thread1000) predicate.Thread1000 {
	return predicate.Thread1000(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Thread1000) predicate.Thread1000 {
	return predicate.Thread1000(sql.NotPredicates(p))
}
