// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/google/uuid"
	"github.com/sabafly/gobot/ent/chinchirosession"
	"github.com/sabafly/gobot/ent/guild"
)

// ChinchiroSession is the model entity for the ChinchiroSession schema.
type ChinchiroSession struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// 親を決めるための回の数
	Turn int `json:"turn,omitempty"`
	// その回でサイコロを振った数
	Loop int `json:"loop,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChinchiroSessionQuery when eager-loading is set.
	Edges                    ChinchiroSessionEdges `json:"edges"`
	guild_chinchiro_sessions *snowflake.ID
	user_chinchiro_sessions  *snowflake.ID
	selectValues             sql.SelectValues
}

// ChinchiroSessionEdges holds the relations/edges for other nodes in the graph.
type ChinchiroSessionEdges struct {
	// Guild holds the value of the guild edge.
	Guild *Guild `json:"guild,omitempty"`
	// Players holds the value of the players edge.
	Players []*ChinchiroPlayer `json:"players,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// GuildOrErr returns the Guild value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChinchiroSessionEdges) GuildOrErr() (*Guild, error) {
	if e.Guild != nil {
		return e.Guild, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: guild.Label}
	}
	return nil, &NotLoadedError{edge: "guild"}
}

// PlayersOrErr returns the Players value or an error if the edge
// was not loaded in eager-loading.
func (e ChinchiroSessionEdges) PlayersOrErr() ([]*ChinchiroPlayer, error) {
	if e.loadedTypes[1] {
		return e.Players, nil
	}
	return nil, &NotLoadedError{edge: "players"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChinchiroSession) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chinchirosession.FieldTurn, chinchirosession.FieldLoop:
			values[i] = new(sql.NullInt64)
		case chinchirosession.FieldID:
			values[i] = new(uuid.UUID)
		case chinchirosession.ForeignKeys[0]: // guild_chinchiro_sessions
			values[i] = new(sql.NullInt64)
		case chinchirosession.ForeignKeys[1]: // user_chinchiro_sessions
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChinchiroSession fields.
func (cs *ChinchiroSession) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chinchirosession.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cs.ID = *value
			}
		case chinchirosession.FieldTurn:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field turn", values[i])
			} else if value.Valid {
				cs.Turn = int(value.Int64)
			}
		case chinchirosession.FieldLoop:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field loop", values[i])
			} else if value.Valid {
				cs.Loop = int(value.Int64)
			}
		case chinchirosession.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field guild_chinchiro_sessions", values[i])
			} else if value.Valid {
				cs.guild_chinchiro_sessions = new(snowflake.ID)
				*cs.guild_chinchiro_sessions = snowflake.ID(value.Int64)
			}
		case chinchirosession.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_chinchiro_sessions", values[i])
			} else if value.Valid {
				cs.user_chinchiro_sessions = new(snowflake.ID)
				*cs.user_chinchiro_sessions = snowflake.ID(value.Int64)
			}
		default:
			cs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChinchiroSession.
// This includes values selected through modifiers, order, etc.
func (cs *ChinchiroSession) Value(name string) (ent.Value, error) {
	return cs.selectValues.Get(name)
}

// QueryGuild queries the "guild" edge of the ChinchiroSession entity.
func (cs *ChinchiroSession) QueryGuild() *GuildQuery {
	return NewChinchiroSessionClient(cs.config).QueryGuild(cs)
}

// QueryPlayers queries the "players" edge of the ChinchiroSession entity.
func (cs *ChinchiroSession) QueryPlayers() *ChinchiroPlayerQuery {
	return NewChinchiroSessionClient(cs.config).QueryPlayers(cs)
}

// Update returns a builder for updating this ChinchiroSession.
// Note that you need to call ChinchiroSession.Unwrap() before calling this method if this ChinchiroSession
// was returned from a transaction, and the transaction was committed or rolled back.
func (cs *ChinchiroSession) Update() *ChinchiroSessionUpdateOne {
	return NewChinchiroSessionClient(cs.config).UpdateOne(cs)
}

// Unwrap unwraps the ChinchiroSession entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cs *ChinchiroSession) Unwrap() *ChinchiroSession {
	_tx, ok := cs.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChinchiroSession is not a transactional entity")
	}
	cs.config.driver = _tx.drv
	return cs
}

// String implements the fmt.Stringer.
func (cs *ChinchiroSession) String() string {
	var builder strings.Builder
	builder.WriteString("ChinchiroSession(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cs.ID))
	builder.WriteString("turn=")
	builder.WriteString(fmt.Sprintf("%v", cs.Turn))
	builder.WriteString(", ")
	builder.WriteString("loop=")
	builder.WriteString(fmt.Sprintf("%v", cs.Loop))
	builder.WriteByte(')')
	return builder.String()
}

// ChinchiroSessions is a parsable slice of ChinchiroSession.
type ChinchiroSessions []*ChinchiroSession
