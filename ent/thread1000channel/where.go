// Code generated by ent, DO NOT EDIT.

package thread1000channel

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	snowflake "github.com/disgoorg/snowflake/v2"
	"github.com/google/uuid"
	"github.com/sabafly/gobot/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldEQ(FieldName, v))
}

// AnonymousName applies equality check predicate on the "anonymous_name" field. It's identical to AnonymousNameEQ.
func AnonymousName(v string) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldEQ(FieldAnonymousName, v))
}

// ChannelID applies equality check predicate on the "channel_id" field. It's identical to ChannelIDEQ.
func ChannelID(v snowflake.ID) predicate.Thread1000Channel {
	vc := uint64(v)
	return predicate.Thread1000Channel(sql.FieldEQ(FieldChannelID, vc))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldContainsFold(FieldName, v))
}

// AnonymousNameEQ applies the EQ predicate on the "anonymous_name" field.
func AnonymousNameEQ(v string) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldEQ(FieldAnonymousName, v))
}

// AnonymousNameNEQ applies the NEQ predicate on the "anonymous_name" field.
func AnonymousNameNEQ(v string) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldNEQ(FieldAnonymousName, v))
}

// AnonymousNameIn applies the In predicate on the "anonymous_name" field.
func AnonymousNameIn(vs ...string) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldIn(FieldAnonymousName, vs...))
}

// AnonymousNameNotIn applies the NotIn predicate on the "anonymous_name" field.
func AnonymousNameNotIn(vs ...string) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldNotIn(FieldAnonymousName, vs...))
}

// AnonymousNameGT applies the GT predicate on the "anonymous_name" field.
func AnonymousNameGT(v string) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldGT(FieldAnonymousName, v))
}

// AnonymousNameGTE applies the GTE predicate on the "anonymous_name" field.
func AnonymousNameGTE(v string) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldGTE(FieldAnonymousName, v))
}

// AnonymousNameLT applies the LT predicate on the "anonymous_name" field.
func AnonymousNameLT(v string) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldLT(FieldAnonymousName, v))
}

// AnonymousNameLTE applies the LTE predicate on the "anonymous_name" field.
func AnonymousNameLTE(v string) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldLTE(FieldAnonymousName, v))
}

// AnonymousNameContains applies the Contains predicate on the "anonymous_name" field.
func AnonymousNameContains(v string) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldContains(FieldAnonymousName, v))
}

// AnonymousNameHasPrefix applies the HasPrefix predicate on the "anonymous_name" field.
func AnonymousNameHasPrefix(v string) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldHasPrefix(FieldAnonymousName, v))
}

// AnonymousNameHasSuffix applies the HasSuffix predicate on the "anonymous_name" field.
func AnonymousNameHasSuffix(v string) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldHasSuffix(FieldAnonymousName, v))
}

// AnonymousNameIsNil applies the IsNil predicate on the "anonymous_name" field.
func AnonymousNameIsNil() predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldIsNull(FieldAnonymousName))
}

// AnonymousNameNotNil applies the NotNil predicate on the "anonymous_name" field.
func AnonymousNameNotNil() predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldNotNull(FieldAnonymousName))
}

// AnonymousNameEqualFold applies the EqualFold predicate on the "anonymous_name" field.
func AnonymousNameEqualFold(v string) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldEqualFold(FieldAnonymousName, v))
}

// AnonymousNameContainsFold applies the ContainsFold predicate on the "anonymous_name" field.
func AnonymousNameContainsFold(v string) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.FieldContainsFold(FieldAnonymousName, v))
}

// ChannelIDEQ applies the EQ predicate on the "channel_id" field.
func ChannelIDEQ(v snowflake.ID) predicate.Thread1000Channel {
	vc := uint64(v)
	return predicate.Thread1000Channel(sql.FieldEQ(FieldChannelID, vc))
}

// ChannelIDNEQ applies the NEQ predicate on the "channel_id" field.
func ChannelIDNEQ(v snowflake.ID) predicate.Thread1000Channel {
	vc := uint64(v)
	return predicate.Thread1000Channel(sql.FieldNEQ(FieldChannelID, vc))
}

// ChannelIDIn applies the In predicate on the "channel_id" field.
func ChannelIDIn(vs ...snowflake.ID) predicate.Thread1000Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Thread1000Channel(sql.FieldIn(FieldChannelID, v...))
}

// ChannelIDNotIn applies the NotIn predicate on the "channel_id" field.
func ChannelIDNotIn(vs ...snowflake.ID) predicate.Thread1000Channel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint64(vs[i])
	}
	return predicate.Thread1000Channel(sql.FieldNotIn(FieldChannelID, v...))
}

// ChannelIDGT applies the GT predicate on the "channel_id" field.
func ChannelIDGT(v snowflake.ID) predicate.Thread1000Channel {
	vc := uint64(v)
	return predicate.Thread1000Channel(sql.FieldGT(FieldChannelID, vc))
}

// ChannelIDGTE applies the GTE predicate on the "channel_id" field.
func ChannelIDGTE(v snowflake.ID) predicate.Thread1000Channel {
	vc := uint64(v)
	return predicate.Thread1000Channel(sql.FieldGTE(FieldChannelID, vc))
}

// ChannelIDLT applies the LT predicate on the "channel_id" field.
func ChannelIDLT(v snowflake.ID) predicate.Thread1000Channel {
	vc := uint64(v)
	return predicate.Thread1000Channel(sql.FieldLT(FieldChannelID, vc))
}

// ChannelIDLTE applies the LTE predicate on the "channel_id" field.
func ChannelIDLTE(v snowflake.ID) predicate.Thread1000Channel {
	vc := uint64(v)
	return predicate.Thread1000Channel(sql.FieldLTE(FieldChannelID, vc))
}

// HasGuild applies the HasEdge predicate on the "guild" edge.
func HasGuild() predicate.Thread1000Channel {
	return predicate.Thread1000Channel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GuildTable, GuildColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGuildWith applies the HasEdge predicate on the "guild" edge with a given conditions (other predicates).
func HasGuildWith(preds ...predicate.Guild) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(func(s *sql.Selector) {
		step := newGuildStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasThreads applies the HasEdge predicate on the "threads" edge.
func HasThreads() predicate.Thread1000Channel {
	return predicate.Thread1000Channel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ThreadsTable, ThreadsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasThreadsWith applies the HasEdge predicate on the "threads" edge with a given conditions (other predicates).
func HasThreadsWith(preds ...predicate.Thread1000) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(func(s *sql.Selector) {
		step := newThreadsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Thread1000Channel) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Thread1000Channel) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Thread1000Channel) predicate.Thread1000Channel {
	return predicate.Thread1000Channel(sql.NotPredicates(p))
}
